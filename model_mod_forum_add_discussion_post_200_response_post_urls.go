/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the ModForumAddDiscussionPost200ResponsePostUrls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModForumAddDiscussionPost200ResponsePostUrls{}

// ModForumAddDiscussionPost200ResponsePostUrls struct for ModForumAddDiscussionPost200ResponsePostUrls
type ModForumAddDiscussionPost200ResponsePostUrls struct {
	// The URL used to delete the post
	Delete *string `json:"delete,omitempty"`
	// discuss
	Discuss *string `json:"discuss,omitempty"`
	// The URL used to edit the post
	Edit *string `json:"edit,omitempty"`
	// The URL used to export the post
	Export *string `json:"export,omitempty"`
	// The URL used to mark the post as read
	Markasread *string `json:"markasread,omitempty"`
	// The URL used to mark the post as unread
	Markasunread *string `json:"markasunread,omitempty"`
	// The URL used to reply to the post
	Reply *string `json:"reply,omitempty"`
	// The URL used to split the discussion with the selected post being the first post in the new discussion
	Split *string `json:"split,omitempty"`
	// The URL used to view the post
	View *string `json:"view,omitempty"`
	// The URL used to view the post in isolation
	Viewisolated *string `json:"viewisolated,omitempty"`
	// The URL used to view the parent of the post
	Viewparent *string `json:"viewparent,omitempty"`
}

// NewModForumAddDiscussionPost200ResponsePostUrls instantiates a new ModForumAddDiscussionPost200ResponsePostUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModForumAddDiscussionPost200ResponsePostUrls() *ModForumAddDiscussionPost200ResponsePostUrls {
	this := ModForumAddDiscussionPost200ResponsePostUrls{}
	var delete string = "null"
	this.Delete = &delete
	var discuss string = "null"
	this.Discuss = &discuss
	var edit string = "null"
	this.Edit = &edit
	var export string = "null"
	this.Export = &export
	var markasread string = "null"
	this.Markasread = &markasread
	var markasunread string = "null"
	this.Markasunread = &markasunread
	var reply string = "null"
	this.Reply = &reply
	var split string = "null"
	this.Split = &split
	var view string = "null"
	this.View = &view
	var viewisolated string = "null"
	this.Viewisolated = &viewisolated
	var viewparent string = "null"
	this.Viewparent = &viewparent
	return &this
}

// NewModForumAddDiscussionPost200ResponsePostUrlsWithDefaults instantiates a new ModForumAddDiscussionPost200ResponsePostUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModForumAddDiscussionPost200ResponsePostUrlsWithDefaults() *ModForumAddDiscussionPost200ResponsePostUrls {
	this := ModForumAddDiscussionPost200ResponsePostUrls{}
	var delete string = "null"
	this.Delete = &delete
	var discuss string = "null"
	this.Discuss = &discuss
	var edit string = "null"
	this.Edit = &edit
	var export string = "null"
	this.Export = &export
	var markasread string = "null"
	this.Markasread = &markasread
	var markasunread string = "null"
	this.Markasunread = &markasunread
	var reply string = "null"
	this.Reply = &reply
	var split string = "null"
	this.Split = &split
	var view string = "null"
	this.View = &view
	var viewisolated string = "null"
	this.Viewisolated = &viewisolated
	var viewparent string = "null"
	this.Viewparent = &viewparent
	return &this
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetDelete() string {
	if o == nil || IsNil(o.Delete) {
		var ret string
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetDeleteOk() (*string, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given string and assigns it to the Delete field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetDelete(v string) {
	o.Delete = &v
}

// GetDiscuss returns the Discuss field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetDiscuss() string {
	if o == nil || IsNil(o.Discuss) {
		var ret string
		return ret
	}
	return *o.Discuss
}

// GetDiscussOk returns a tuple with the Discuss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetDiscussOk() (*string, bool) {
	if o == nil || IsNil(o.Discuss) {
		return nil, false
	}
	return o.Discuss, true
}

// HasDiscuss returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasDiscuss() bool {
	if o != nil && !IsNil(o.Discuss) {
		return true
	}

	return false
}

// SetDiscuss gets a reference to the given string and assigns it to the Discuss field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetDiscuss(v string) {
	o.Discuss = &v
}

// GetEdit returns the Edit field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetEdit() string {
	if o == nil || IsNil(o.Edit) {
		var ret string
		return ret
	}
	return *o.Edit
}

// GetEditOk returns a tuple with the Edit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetEditOk() (*string, bool) {
	if o == nil || IsNil(o.Edit) {
		return nil, false
	}
	return o.Edit, true
}

// HasEdit returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasEdit() bool {
	if o != nil && !IsNil(o.Edit) {
		return true
	}

	return false
}

// SetEdit gets a reference to the given string and assigns it to the Edit field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetEdit(v string) {
	o.Edit = &v
}

// GetExport returns the Export field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetExport() string {
	if o == nil || IsNil(o.Export) {
		var ret string
		return ret
	}
	return *o.Export
}

// GetExportOk returns a tuple with the Export field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetExportOk() (*string, bool) {
	if o == nil || IsNil(o.Export) {
		return nil, false
	}
	return o.Export, true
}

// HasExport returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasExport() bool {
	if o != nil && !IsNil(o.Export) {
		return true
	}

	return false
}

// SetExport gets a reference to the given string and assigns it to the Export field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetExport(v string) {
	o.Export = &v
}

// GetMarkasread returns the Markasread field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetMarkasread() string {
	if o == nil || IsNil(o.Markasread) {
		var ret string
		return ret
	}
	return *o.Markasread
}

// GetMarkasreadOk returns a tuple with the Markasread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetMarkasreadOk() (*string, bool) {
	if o == nil || IsNil(o.Markasread) {
		return nil, false
	}
	return o.Markasread, true
}

// HasMarkasread returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasMarkasread() bool {
	if o != nil && !IsNil(o.Markasread) {
		return true
	}

	return false
}

// SetMarkasread gets a reference to the given string and assigns it to the Markasread field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetMarkasread(v string) {
	o.Markasread = &v
}

// GetMarkasunread returns the Markasunread field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetMarkasunread() string {
	if o == nil || IsNil(o.Markasunread) {
		var ret string
		return ret
	}
	return *o.Markasunread
}

// GetMarkasunreadOk returns a tuple with the Markasunread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetMarkasunreadOk() (*string, bool) {
	if o == nil || IsNil(o.Markasunread) {
		return nil, false
	}
	return o.Markasunread, true
}

// HasMarkasunread returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasMarkasunread() bool {
	if o != nil && !IsNil(o.Markasunread) {
		return true
	}

	return false
}

// SetMarkasunread gets a reference to the given string and assigns it to the Markasunread field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetMarkasunread(v string) {
	o.Markasunread = &v
}

// GetReply returns the Reply field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetReply() string {
	if o == nil || IsNil(o.Reply) {
		var ret string
		return ret
	}
	return *o.Reply
}

// GetReplyOk returns a tuple with the Reply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetReplyOk() (*string, bool) {
	if o == nil || IsNil(o.Reply) {
		return nil, false
	}
	return o.Reply, true
}

// HasReply returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasReply() bool {
	if o != nil && !IsNil(o.Reply) {
		return true
	}

	return false
}

// SetReply gets a reference to the given string and assigns it to the Reply field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetReply(v string) {
	o.Reply = &v
}

// GetSplit returns the Split field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetSplit() string {
	if o == nil || IsNil(o.Split) {
		var ret string
		return ret
	}
	return *o.Split
}

// GetSplitOk returns a tuple with the Split field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetSplitOk() (*string, bool) {
	if o == nil || IsNil(o.Split) {
		return nil, false
	}
	return o.Split, true
}

// HasSplit returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasSplit() bool {
	if o != nil && !IsNil(o.Split) {
		return true
	}

	return false
}

// SetSplit gets a reference to the given string and assigns it to the Split field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetSplit(v string) {
	o.Split = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetView(v string) {
	o.View = &v
}

// GetViewisolated returns the Viewisolated field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetViewisolated() string {
	if o == nil || IsNil(o.Viewisolated) {
		var ret string
		return ret
	}
	return *o.Viewisolated
}

// GetViewisolatedOk returns a tuple with the Viewisolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetViewisolatedOk() (*string, bool) {
	if o == nil || IsNil(o.Viewisolated) {
		return nil, false
	}
	return o.Viewisolated, true
}

// HasViewisolated returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasViewisolated() bool {
	if o != nil && !IsNil(o.Viewisolated) {
		return true
	}

	return false
}

// SetViewisolated gets a reference to the given string and assigns it to the Viewisolated field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetViewisolated(v string) {
	o.Viewisolated = &v
}

// GetViewparent returns the Viewparent field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetViewparent() string {
	if o == nil || IsNil(o.Viewparent) {
		var ret string
		return ret
	}
	return *o.Viewparent
}

// GetViewparentOk returns a tuple with the Viewparent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) GetViewparentOk() (*string, bool) {
	if o == nil || IsNil(o.Viewparent) {
		return nil, false
	}
	return o.Viewparent, true
}

// HasViewparent returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) HasViewparent() bool {
	if o != nil && !IsNil(o.Viewparent) {
		return true
	}

	return false
}

// SetViewparent gets a reference to the given string and assigns it to the Viewparent field.
func (o *ModForumAddDiscussionPost200ResponsePostUrls) SetViewparent(v string) {
	o.Viewparent = &v
}

func (o ModForumAddDiscussionPost200ResponsePostUrls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModForumAddDiscussionPost200ResponsePostUrls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if !IsNil(o.Discuss) {
		toSerialize["discuss"] = o.Discuss
	}
	if !IsNil(o.Edit) {
		toSerialize["edit"] = o.Edit
	}
	if !IsNil(o.Export) {
		toSerialize["export"] = o.Export
	}
	if !IsNil(o.Markasread) {
		toSerialize["markasread"] = o.Markasread
	}
	if !IsNil(o.Markasunread) {
		toSerialize["markasunread"] = o.Markasunread
	}
	if !IsNil(o.Reply) {
		toSerialize["reply"] = o.Reply
	}
	if !IsNil(o.Split) {
		toSerialize["split"] = o.Split
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Viewisolated) {
		toSerialize["viewisolated"] = o.Viewisolated
	}
	if !IsNil(o.Viewparent) {
		toSerialize["viewparent"] = o.Viewparent
	}
	return toSerialize, nil
}

type NullableModForumAddDiscussionPost200ResponsePostUrls struct {
	value *ModForumAddDiscussionPost200ResponsePostUrls
	isSet bool
}

func (v NullableModForumAddDiscussionPost200ResponsePostUrls) Get() *ModForumAddDiscussionPost200ResponsePostUrls {
	return v.value
}

func (v *NullableModForumAddDiscussionPost200ResponsePostUrls) Set(val *ModForumAddDiscussionPost200ResponsePostUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableModForumAddDiscussionPost200ResponsePostUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableModForumAddDiscussionPost200ResponsePostUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModForumAddDiscussionPost200ResponsePostUrls(val *ModForumAddDiscussionPost200ResponsePostUrls) *NullableModForumAddDiscussionPost200ResponsePostUrls {
	return &NullableModForumAddDiscussionPost200ResponsePostUrls{value: val, isSet: true}
}

func (v NullableModForumAddDiscussionPost200ResponsePostUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModForumAddDiscussionPost200ResponsePostUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


