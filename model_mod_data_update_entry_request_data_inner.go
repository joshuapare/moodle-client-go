/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the ModDataUpdateEntryRequestDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModDataUpdateEntryRequestDataInner{}

// ModDataUpdateEntryRequestDataInner struct for ModDataUpdateEntryRequestDataInner
type ModDataUpdateEntryRequestDataInner struct {
	// The field id.
	Fieldid *int32 `json:"fieldid,omitempty"`
	// The subfield name (if required).
	Subfield *string `json:"subfield,omitempty"`
	// The new contents for the field always JSON encoded.
	Value *string `json:"value,omitempty"`
}

// NewModDataUpdateEntryRequestDataInner instantiates a new ModDataUpdateEntryRequestDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModDataUpdateEntryRequestDataInner() *ModDataUpdateEntryRequestDataInner {
	this := ModDataUpdateEntryRequestDataInner{}
	var subfield string = "null"
	this.Subfield = &subfield
	var value string = "null"
	this.Value = &value
	return &this
}

// NewModDataUpdateEntryRequestDataInnerWithDefaults instantiates a new ModDataUpdateEntryRequestDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModDataUpdateEntryRequestDataInnerWithDefaults() *ModDataUpdateEntryRequestDataInner {
	this := ModDataUpdateEntryRequestDataInner{}
	var subfield string = "null"
	this.Subfield = &subfield
	var value string = "null"
	this.Value = &value
	return &this
}

// GetFieldid returns the Fieldid field value if set, zero value otherwise.
func (o *ModDataUpdateEntryRequestDataInner) GetFieldid() int32 {
	if o == nil || IsNil(o.Fieldid) {
		var ret int32
		return ret
	}
	return *o.Fieldid
}

// GetFieldidOk returns a tuple with the Fieldid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataUpdateEntryRequestDataInner) GetFieldidOk() (*int32, bool) {
	if o == nil || IsNil(o.Fieldid) {
		return nil, false
	}
	return o.Fieldid, true
}

// HasFieldid returns a boolean if a field has been set.
func (o *ModDataUpdateEntryRequestDataInner) HasFieldid() bool {
	if o != nil && !IsNil(o.Fieldid) {
		return true
	}

	return false
}

// SetFieldid gets a reference to the given int32 and assigns it to the Fieldid field.
func (o *ModDataUpdateEntryRequestDataInner) SetFieldid(v int32) {
	o.Fieldid = &v
}

// GetSubfield returns the Subfield field value if set, zero value otherwise.
func (o *ModDataUpdateEntryRequestDataInner) GetSubfield() string {
	if o == nil || IsNil(o.Subfield) {
		var ret string
		return ret
	}
	return *o.Subfield
}

// GetSubfieldOk returns a tuple with the Subfield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataUpdateEntryRequestDataInner) GetSubfieldOk() (*string, bool) {
	if o == nil || IsNil(o.Subfield) {
		return nil, false
	}
	return o.Subfield, true
}

// HasSubfield returns a boolean if a field has been set.
func (o *ModDataUpdateEntryRequestDataInner) HasSubfield() bool {
	if o != nil && !IsNil(o.Subfield) {
		return true
	}

	return false
}

// SetSubfield gets a reference to the given string and assigns it to the Subfield field.
func (o *ModDataUpdateEntryRequestDataInner) SetSubfield(v string) {
	o.Subfield = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModDataUpdateEntryRequestDataInner) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataUpdateEntryRequestDataInner) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModDataUpdateEntryRequestDataInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ModDataUpdateEntryRequestDataInner) SetValue(v string) {
	o.Value = &v
}

func (o ModDataUpdateEntryRequestDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModDataUpdateEntryRequestDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fieldid) {
		toSerialize["fieldid"] = o.Fieldid
	}
	if !IsNil(o.Subfield) {
		toSerialize["subfield"] = o.Subfield
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableModDataUpdateEntryRequestDataInner struct {
	value *ModDataUpdateEntryRequestDataInner
	isSet bool
}

func (v NullableModDataUpdateEntryRequestDataInner) Get() *ModDataUpdateEntryRequestDataInner {
	return v.value
}

func (v *NullableModDataUpdateEntryRequestDataInner) Set(val *ModDataUpdateEntryRequestDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableModDataUpdateEntryRequestDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableModDataUpdateEntryRequestDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModDataUpdateEntryRequestDataInner(val *ModDataUpdateEntryRequestDataInner) *NullableModDataUpdateEntryRequestDataInner {
	return &NullableModDataUpdateEntryRequestDataInner{value: val, isSet: true}
}

func (v NullableModDataUpdateEntryRequestDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModDataUpdateEntryRequestDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


