/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolDataprivacyTreeExtraBranchesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolDataprivacyTreeExtraBranchesRequest{}

// ToolDataprivacyTreeExtraBranchesRequest struct for ToolDataprivacyTreeExtraBranchesRequest
type ToolDataprivacyTreeExtraBranchesRequest struct {
	// The context id to expand
	Contextid int32 `json:"contextid"`
	// The element we are interested on
	Element string `json:"element"`
}

type _ToolDataprivacyTreeExtraBranchesRequest ToolDataprivacyTreeExtraBranchesRequest

// NewToolDataprivacyTreeExtraBranchesRequest instantiates a new ToolDataprivacyTreeExtraBranchesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolDataprivacyTreeExtraBranchesRequest(contextid int32, element string) *ToolDataprivacyTreeExtraBranchesRequest {
	this := ToolDataprivacyTreeExtraBranchesRequest{}
	this.Contextid = contextid
	this.Element = element
	return &this
}

// NewToolDataprivacyTreeExtraBranchesRequestWithDefaults instantiates a new ToolDataprivacyTreeExtraBranchesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolDataprivacyTreeExtraBranchesRequestWithDefaults() *ToolDataprivacyTreeExtraBranchesRequest {
	this := ToolDataprivacyTreeExtraBranchesRequest{}
	var contextid int32 = null
	this.Contextid = contextid
	var element string = "null"
	this.Element = element
	return &this
}

// GetContextid returns the Contextid field value
func (o *ToolDataprivacyTreeExtraBranchesRequest) GetContextid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Contextid
}

// GetContextidOk returns a tuple with the Contextid field value
// and a boolean to check if the value has been set.
func (o *ToolDataprivacyTreeExtraBranchesRequest) GetContextidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contextid, true
}

// SetContextid sets field value
func (o *ToolDataprivacyTreeExtraBranchesRequest) SetContextid(v int32) {
	o.Contextid = v
}

// GetElement returns the Element field value
func (o *ToolDataprivacyTreeExtraBranchesRequest) GetElement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Element
}

// GetElementOk returns a tuple with the Element field value
// and a boolean to check if the value has been set.
func (o *ToolDataprivacyTreeExtraBranchesRequest) GetElementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Element, true
}

// SetElement sets field value
func (o *ToolDataprivacyTreeExtraBranchesRequest) SetElement(v string) {
	o.Element = v
}

func (o ToolDataprivacyTreeExtraBranchesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolDataprivacyTreeExtraBranchesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contextid"] = o.Contextid
	toSerialize["element"] = o.Element
	return toSerialize, nil
}

func (o *ToolDataprivacyTreeExtraBranchesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contextid",
		"element",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolDataprivacyTreeExtraBranchesRequest := _ToolDataprivacyTreeExtraBranchesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolDataprivacyTreeExtraBranchesRequest)

	if err != nil {
		return err
	}

	*o = ToolDataprivacyTreeExtraBranchesRequest(varToolDataprivacyTreeExtraBranchesRequest)

	return err
}

type NullableToolDataprivacyTreeExtraBranchesRequest struct {
	value *ToolDataprivacyTreeExtraBranchesRequest
	isSet bool
}

func (v NullableToolDataprivacyTreeExtraBranchesRequest) Get() *ToolDataprivacyTreeExtraBranchesRequest {
	return v.value
}

func (v *NullableToolDataprivacyTreeExtraBranchesRequest) Set(val *ToolDataprivacyTreeExtraBranchesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableToolDataprivacyTreeExtraBranchesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableToolDataprivacyTreeExtraBranchesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolDataprivacyTreeExtraBranchesRequest(val *ToolDataprivacyTreeExtraBranchesRequest) *NullableToolDataprivacyTreeExtraBranchesRequest {
	return &NullableToolDataprivacyTreeExtraBranchesRequest{value: val, isSet: true}
}

func (v NullableToolDataprivacyTreeExtraBranchesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolDataprivacyTreeExtraBranchesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


