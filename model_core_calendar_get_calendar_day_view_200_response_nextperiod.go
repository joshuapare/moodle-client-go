/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCalendarGetCalendarDayView200ResponseNextperiod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarDayView200ResponseNextperiod{}

// CoreCalendarGetCalendarDayView200ResponseNextperiod struct for CoreCalendarGetCalendarDayView200ResponseNextperiod
type CoreCalendarGetCalendarDayView200ResponseNextperiod struct {
	// hours
	Hours int32 `json:"hours"`
	// mday
	Mday int32 `json:"mday"`
	// minutes
	Minutes int32 `json:"minutes"`
	// mon
	Mon int32 `json:"mon"`
	// month
	Month string `json:"month"`
	// seconds
	Seconds int32 `json:"seconds"`
	// timestamp
	Timestamp int32 `json:"timestamp"`
	// wday
	Wday int32 `json:"wday"`
	// weekday
	Weekday string `json:"weekday"`
	// yday
	Yday int32 `json:"yday"`
	// year
	Year int32 `json:"year"`
}

type _CoreCalendarGetCalendarDayView200ResponseNextperiod CoreCalendarGetCalendarDayView200ResponseNextperiod

// NewCoreCalendarGetCalendarDayView200ResponseNextperiod instantiates a new CoreCalendarGetCalendarDayView200ResponseNextperiod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarDayView200ResponseNextperiod(hours int32, mday int32, minutes int32, mon int32, month string, seconds int32, timestamp int32, wday int32, weekday string, yday int32, year int32) *CoreCalendarGetCalendarDayView200ResponseNextperiod {
	this := CoreCalendarGetCalendarDayView200ResponseNextperiod{}
	this.Hours = hours
	this.Mday = mday
	this.Minutes = minutes
	this.Mon = mon
	this.Month = month
	this.Seconds = seconds
	this.Timestamp = timestamp
	this.Wday = wday
	this.Weekday = weekday
	this.Yday = yday
	this.Year = year
	return &this
}

// NewCoreCalendarGetCalendarDayView200ResponseNextperiodWithDefaults instantiates a new CoreCalendarGetCalendarDayView200ResponseNextperiod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarDayView200ResponseNextperiodWithDefaults() *CoreCalendarGetCalendarDayView200ResponseNextperiod {
	this := CoreCalendarGetCalendarDayView200ResponseNextperiod{}
	return &this
}

// GetHours returns the Hours field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetHours() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Hours
}

// GetHoursOk returns a tuple with the Hours field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetHoursOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hours, true
}

// SetHours sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetHours(v int32) {
	o.Hours = v
}

// GetMday returns the Mday field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetMday() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Mday
}

// GetMdayOk returns a tuple with the Mday field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetMdayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mday, true
}

// SetMday sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetMday(v int32) {
	o.Mday = v
}

// GetMinutes returns the Minutes field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minutes, true
}

// SetMinutes sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetMinutes(v int32) {
	o.Minutes = v
}

// GetMon returns the Mon field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetMon() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Mon
}

// GetMonOk returns a tuple with the Mon field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetMonOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mon, true
}

// SetMon sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetMon(v int32) {
	o.Mon = v
}

// GetMonth returns the Month field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetMonth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetMonthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetMonth(v string) {
	o.Month = v
}

// GetSeconds returns the Seconds field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seconds, true
}

// SetSeconds sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetSeconds(v int32) {
	o.Seconds = v
}

// GetTimestamp returns the Timestamp field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetWday returns the Wday field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetWday() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Wday
}

// GetWdayOk returns a tuple with the Wday field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetWdayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wday, true
}

// SetWday sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetWday(v int32) {
	o.Wday = v
}

// GetWeekday returns the Weekday field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetWeekday() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Weekday
}

// GetWeekdayOk returns a tuple with the Weekday field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetWeekdayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weekday, true
}

// SetWeekday sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetWeekday(v string) {
	o.Weekday = v
}

// GetYday returns the Yday field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetYday() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Yday
}

// GetYdayOk returns a tuple with the Yday field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetYdayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Yday, true
}

// SetYday sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetYday(v int32) {
	o.Yday = v
}

// GetYear returns the Year field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) SetYear(v int32) {
	o.Year = v
}

func (o CoreCalendarGetCalendarDayView200ResponseNextperiod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarDayView200ResponseNextperiod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hours"] = o.Hours
	toSerialize["mday"] = o.Mday
	toSerialize["minutes"] = o.Minutes
	toSerialize["mon"] = o.Mon
	toSerialize["month"] = o.Month
	toSerialize["seconds"] = o.Seconds
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["wday"] = o.Wday
	toSerialize["weekday"] = o.Weekday
	toSerialize["yday"] = o.Yday
	toSerialize["year"] = o.Year
	return toSerialize, nil
}

func (o *CoreCalendarGetCalendarDayView200ResponseNextperiod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hours",
		"mday",
		"minutes",
		"mon",
		"month",
		"seconds",
		"timestamp",
		"wday",
		"weekday",
		"yday",
		"year",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCalendarGetCalendarDayView200ResponseNextperiod := _CoreCalendarGetCalendarDayView200ResponseNextperiod{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCalendarGetCalendarDayView200ResponseNextperiod)

	if err != nil {
		return err
	}

	*o = CoreCalendarGetCalendarDayView200ResponseNextperiod(varCoreCalendarGetCalendarDayView200ResponseNextperiod)

	return err
}

type NullableCoreCalendarGetCalendarDayView200ResponseNextperiod struct {
	value *CoreCalendarGetCalendarDayView200ResponseNextperiod
	isSet bool
}

func (v NullableCoreCalendarGetCalendarDayView200ResponseNextperiod) Get() *CoreCalendarGetCalendarDayView200ResponseNextperiod {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarDayView200ResponseNextperiod) Set(val *CoreCalendarGetCalendarDayView200ResponseNextperiod) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarDayView200ResponseNextperiod) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarDayView200ResponseNextperiod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarDayView200ResponseNextperiod(val *CoreCalendarGetCalendarDayView200ResponseNextperiod) *NullableCoreCalendarGetCalendarDayView200ResponseNextperiod {
	return &NullableCoreCalendarGetCalendarDayView200ResponseNextperiod{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarDayView200ResponseNextperiod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarDayView200ResponseNextperiod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


