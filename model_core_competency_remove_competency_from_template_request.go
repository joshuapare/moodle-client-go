/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCompetencyRemoveCompetencyFromTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCompetencyRemoveCompetencyFromTemplateRequest{}

// CoreCompetencyRemoveCompetencyFromTemplateRequest struct for CoreCompetencyRemoveCompetencyFromTemplateRequest
type CoreCompetencyRemoveCompetencyFromTemplateRequest struct {
	// The competency id
	Competencyid int32 `json:"competencyid"`
	// The template id
	Templateid int32 `json:"templateid"`
}

type _CoreCompetencyRemoveCompetencyFromTemplateRequest CoreCompetencyRemoveCompetencyFromTemplateRequest

// NewCoreCompetencyRemoveCompetencyFromTemplateRequest instantiates a new CoreCompetencyRemoveCompetencyFromTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCompetencyRemoveCompetencyFromTemplateRequest(competencyid int32, templateid int32) *CoreCompetencyRemoveCompetencyFromTemplateRequest {
	this := CoreCompetencyRemoveCompetencyFromTemplateRequest{}
	this.Competencyid = competencyid
	this.Templateid = templateid
	return &this
}

// NewCoreCompetencyRemoveCompetencyFromTemplateRequestWithDefaults instantiates a new CoreCompetencyRemoveCompetencyFromTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCompetencyRemoveCompetencyFromTemplateRequestWithDefaults() *CoreCompetencyRemoveCompetencyFromTemplateRequest {
	this := CoreCompetencyRemoveCompetencyFromTemplateRequest{}
	return &this
}

// GetCompetencyid returns the Competencyid field value
func (o *CoreCompetencyRemoveCompetencyFromTemplateRequest) GetCompetencyid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Competencyid
}

// GetCompetencyidOk returns a tuple with the Competencyid field value
// and a boolean to check if the value has been set.
func (o *CoreCompetencyRemoveCompetencyFromTemplateRequest) GetCompetencyidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Competencyid, true
}

// SetCompetencyid sets field value
func (o *CoreCompetencyRemoveCompetencyFromTemplateRequest) SetCompetencyid(v int32) {
	o.Competencyid = v
}

// GetTemplateid returns the Templateid field value
func (o *CoreCompetencyRemoveCompetencyFromTemplateRequest) GetTemplateid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Templateid
}

// GetTemplateidOk returns a tuple with the Templateid field value
// and a boolean to check if the value has been set.
func (o *CoreCompetencyRemoveCompetencyFromTemplateRequest) GetTemplateidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Templateid, true
}

// SetTemplateid sets field value
func (o *CoreCompetencyRemoveCompetencyFromTemplateRequest) SetTemplateid(v int32) {
	o.Templateid = v
}

func (o CoreCompetencyRemoveCompetencyFromTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCompetencyRemoveCompetencyFromTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["competencyid"] = o.Competencyid
	toSerialize["templateid"] = o.Templateid
	return toSerialize, nil
}

func (o *CoreCompetencyRemoveCompetencyFromTemplateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"competencyid",
		"templateid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCompetencyRemoveCompetencyFromTemplateRequest := _CoreCompetencyRemoveCompetencyFromTemplateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCompetencyRemoveCompetencyFromTemplateRequest)

	if err != nil {
		return err
	}

	*o = CoreCompetencyRemoveCompetencyFromTemplateRequest(varCoreCompetencyRemoveCompetencyFromTemplateRequest)

	return err
}

type NullableCoreCompetencyRemoveCompetencyFromTemplateRequest struct {
	value *CoreCompetencyRemoveCompetencyFromTemplateRequest
	isSet bool
}

func (v NullableCoreCompetencyRemoveCompetencyFromTemplateRequest) Get() *CoreCompetencyRemoveCompetencyFromTemplateRequest {
	return v.value
}

func (v *NullableCoreCompetencyRemoveCompetencyFromTemplateRequest) Set(val *CoreCompetencyRemoveCompetencyFromTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCompetencyRemoveCompetencyFromTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCompetencyRemoveCompetencyFromTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCompetencyRemoveCompetencyFromTemplateRequest(val *CoreCompetencyRemoveCompetencyFromTemplateRequest) *NullableCoreCompetencyRemoveCompetencyFromTemplateRequest {
	return &NullableCoreCompetencyRemoveCompetencyFromTemplateRequest{value: val, isSet: true}
}

func (v NullableCoreCompetencyRemoveCompetencyFromTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCompetencyRemoveCompetencyFromTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


