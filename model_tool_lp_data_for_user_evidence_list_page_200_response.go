/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolLpDataForUserEvidenceListPage200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolLpDataForUserEvidenceListPage200Response{}

// ToolLpDataForUserEvidenceListPage200Response struct for ToolLpDataForUserEvidenceListPage200Response
type ToolLpDataForUserEvidenceListPage200Response struct {
	// Can the current user manage the user's evidence
	Canmanage bool `json:"canmanage"`
	Evidence []ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner `json:"evidence"`
	Navigation []map[string]interface{} `json:"navigation"`
	// Url to the tool_lp plugin folder on this Moodle site
	Pluginbaseurl string `json:"pluginbaseurl"`
	// The user ID
	Userid int32 `json:"userid"`
}

type _ToolLpDataForUserEvidenceListPage200Response ToolLpDataForUserEvidenceListPage200Response

// NewToolLpDataForUserEvidenceListPage200Response instantiates a new ToolLpDataForUserEvidenceListPage200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolLpDataForUserEvidenceListPage200Response(canmanage bool, evidence []ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner, navigation []map[string]interface{}, pluginbaseurl string, userid int32) *ToolLpDataForUserEvidenceListPage200Response {
	this := ToolLpDataForUserEvidenceListPage200Response{}
	this.Canmanage = canmanage
	this.Evidence = evidence
	this.Navigation = navigation
	this.Pluginbaseurl = pluginbaseurl
	this.Userid = userid
	return &this
}

// NewToolLpDataForUserEvidenceListPage200ResponseWithDefaults instantiates a new ToolLpDataForUserEvidenceListPage200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolLpDataForUserEvidenceListPage200ResponseWithDefaults() *ToolLpDataForUserEvidenceListPage200Response {
	this := ToolLpDataForUserEvidenceListPage200Response{}
	var canmanage bool = null
	this.Canmanage = canmanage
	return &this
}

// GetCanmanage returns the Canmanage field value
func (o *ToolLpDataForUserEvidenceListPage200Response) GetCanmanage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Canmanage
}

// GetCanmanageOk returns a tuple with the Canmanage field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserEvidenceListPage200Response) GetCanmanageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Canmanage, true
}

// SetCanmanage sets field value
func (o *ToolLpDataForUserEvidenceListPage200Response) SetCanmanage(v bool) {
	o.Canmanage = v
}

// GetEvidence returns the Evidence field value
func (o *ToolLpDataForUserEvidenceListPage200Response) GetEvidence() []ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner {
	if o == nil {
		var ret []ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner
		return ret
	}

	return o.Evidence
}

// GetEvidenceOk returns a tuple with the Evidence field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserEvidenceListPage200Response) GetEvidenceOk() ([]ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Evidence, true
}

// SetEvidence sets field value
func (o *ToolLpDataForUserEvidenceListPage200Response) SetEvidence(v []ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner) {
	o.Evidence = v
}

// GetNavigation returns the Navigation field value
func (o *ToolLpDataForUserEvidenceListPage200Response) GetNavigation() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Navigation
}

// GetNavigationOk returns a tuple with the Navigation field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserEvidenceListPage200Response) GetNavigationOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Navigation, true
}

// SetNavigation sets field value
func (o *ToolLpDataForUserEvidenceListPage200Response) SetNavigation(v []map[string]interface{}) {
	o.Navigation = v
}

// GetPluginbaseurl returns the Pluginbaseurl field value
func (o *ToolLpDataForUserEvidenceListPage200Response) GetPluginbaseurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pluginbaseurl
}

// GetPluginbaseurlOk returns a tuple with the Pluginbaseurl field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserEvidenceListPage200Response) GetPluginbaseurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pluginbaseurl, true
}

// SetPluginbaseurl sets field value
func (o *ToolLpDataForUserEvidenceListPage200Response) SetPluginbaseurl(v string) {
	o.Pluginbaseurl = v
}

// GetUserid returns the Userid field value
func (o *ToolLpDataForUserEvidenceListPage200Response) GetUserid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Userid
}

// GetUseridOk returns a tuple with the Userid field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserEvidenceListPage200Response) GetUseridOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Userid, true
}

// SetUserid sets field value
func (o *ToolLpDataForUserEvidenceListPage200Response) SetUserid(v int32) {
	o.Userid = v
}

func (o ToolLpDataForUserEvidenceListPage200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolLpDataForUserEvidenceListPage200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["canmanage"] = o.Canmanage
	toSerialize["evidence"] = o.Evidence
	toSerialize["navigation"] = o.Navigation
	toSerialize["pluginbaseurl"] = o.Pluginbaseurl
	toSerialize["userid"] = o.Userid
	return toSerialize, nil
}

func (o *ToolLpDataForUserEvidenceListPage200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"canmanage",
		"evidence",
		"navigation",
		"pluginbaseurl",
		"userid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolLpDataForUserEvidenceListPage200Response := _ToolLpDataForUserEvidenceListPage200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolLpDataForUserEvidenceListPage200Response)

	if err != nil {
		return err
	}

	*o = ToolLpDataForUserEvidenceListPage200Response(varToolLpDataForUserEvidenceListPage200Response)

	return err
}

type NullableToolLpDataForUserEvidenceListPage200Response struct {
	value *ToolLpDataForUserEvidenceListPage200Response
	isSet bool
}

func (v NullableToolLpDataForUserEvidenceListPage200Response) Get() *ToolLpDataForUserEvidenceListPage200Response {
	return v.value
}

func (v *NullableToolLpDataForUserEvidenceListPage200Response) Set(val *ToolLpDataForUserEvidenceListPage200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableToolLpDataForUserEvidenceListPage200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableToolLpDataForUserEvidenceListPage200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolLpDataForUserEvidenceListPage200Response(val *ToolLpDataForUserEvidenceListPage200Response) *NullableToolLpDataForUserEvidenceListPage200Response {
	return &NullableToolLpDataForUserEvidenceListPage200Response{value: val, isSet: true}
}

func (v NullableToolLpDataForUserEvidenceListPage200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolLpDataForUserEvidenceListPage200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


