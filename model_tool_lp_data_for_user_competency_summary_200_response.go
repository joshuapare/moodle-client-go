/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolLpDataForUserCompetencySummary200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolLpDataForUserCompetencySummary200Response{}

// ToolLpDataForUserCompetencySummary200Response struct for ToolLpDataForUserCompetencySummary200Response
type ToolLpDataForUserCompetencySummary200Response struct {
	// cangrade
	Cangrade bool `json:"cangrade"`
	Commentarea *CoreCompetencyReadPlan200ResponseCommentarea `json:"commentarea,omitempty"`
	Competency ToolLpDataForCompetencySummary200Response `json:"competency"`
	Evidence []ToolLpDataForUserCompetencySummary200ResponseEvidenceInner `json:"evidence"`
	// showrelatedcompetencies
	Showrelatedcompetencies bool `json:"showrelatedcompetencies"`
	User CoreCompetencyGradeCompetency200ResponseActionuser `json:"user"`
	Usercompetency *ToolLpDataForUserCompetencySummary200ResponseUsercompetency `json:"usercompetency,omitempty"`
	Usercompetencycourse *ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse `json:"usercompetencycourse,omitempty"`
	Usercompetencyplan *ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan `json:"usercompetencyplan,omitempty"`
}

type _ToolLpDataForUserCompetencySummary200Response ToolLpDataForUserCompetencySummary200Response

// NewToolLpDataForUserCompetencySummary200Response instantiates a new ToolLpDataForUserCompetencySummary200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolLpDataForUserCompetencySummary200Response(cangrade bool, competency ToolLpDataForCompetencySummary200Response, evidence []ToolLpDataForUserCompetencySummary200ResponseEvidenceInner, showrelatedcompetencies bool, user CoreCompetencyGradeCompetency200ResponseActionuser) *ToolLpDataForUserCompetencySummary200Response {
	this := ToolLpDataForUserCompetencySummary200Response{}
	this.Cangrade = cangrade
	this.Competency = competency
	this.Evidence = evidence
	this.Showrelatedcompetencies = showrelatedcompetencies
	this.User = user
	return &this
}

// NewToolLpDataForUserCompetencySummary200ResponseWithDefaults instantiates a new ToolLpDataForUserCompetencySummary200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolLpDataForUserCompetencySummary200ResponseWithDefaults() *ToolLpDataForUserCompetencySummary200Response {
	this := ToolLpDataForUserCompetencySummary200Response{}
	var cangrade bool = null
	this.Cangrade = cangrade
	var showrelatedcompetencies bool = null
	this.Showrelatedcompetencies = showrelatedcompetencies
	return &this
}

// GetCangrade returns the Cangrade field value
func (o *ToolLpDataForUserCompetencySummary200Response) GetCangrade() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cangrade
}

// GetCangradeOk returns a tuple with the Cangrade field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetCangradeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cangrade, true
}

// SetCangrade sets field value
func (o *ToolLpDataForUserCompetencySummary200Response) SetCangrade(v bool) {
	o.Cangrade = v
}

// GetCommentarea returns the Commentarea field value if set, zero value otherwise.
func (o *ToolLpDataForUserCompetencySummary200Response) GetCommentarea() CoreCompetencyReadPlan200ResponseCommentarea {
	if o == nil || IsNil(o.Commentarea) {
		var ret CoreCompetencyReadPlan200ResponseCommentarea
		return ret
	}
	return *o.Commentarea
}

// GetCommentareaOk returns a tuple with the Commentarea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetCommentareaOk() (*CoreCompetencyReadPlan200ResponseCommentarea, bool) {
	if o == nil || IsNil(o.Commentarea) {
		return nil, false
	}
	return o.Commentarea, true
}

// HasCommentarea returns a boolean if a field has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) HasCommentarea() bool {
	if o != nil && !IsNil(o.Commentarea) {
		return true
	}

	return false
}

// SetCommentarea gets a reference to the given CoreCompetencyReadPlan200ResponseCommentarea and assigns it to the Commentarea field.
func (o *ToolLpDataForUserCompetencySummary200Response) SetCommentarea(v CoreCompetencyReadPlan200ResponseCommentarea) {
	o.Commentarea = &v
}

// GetCompetency returns the Competency field value
func (o *ToolLpDataForUserCompetencySummary200Response) GetCompetency() ToolLpDataForCompetencySummary200Response {
	if o == nil {
		var ret ToolLpDataForCompetencySummary200Response
		return ret
	}

	return o.Competency
}

// GetCompetencyOk returns a tuple with the Competency field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetCompetencyOk() (*ToolLpDataForCompetencySummary200Response, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Competency, true
}

// SetCompetency sets field value
func (o *ToolLpDataForUserCompetencySummary200Response) SetCompetency(v ToolLpDataForCompetencySummary200Response) {
	o.Competency = v
}

// GetEvidence returns the Evidence field value
func (o *ToolLpDataForUserCompetencySummary200Response) GetEvidence() []ToolLpDataForUserCompetencySummary200ResponseEvidenceInner {
	if o == nil {
		var ret []ToolLpDataForUserCompetencySummary200ResponseEvidenceInner
		return ret
	}

	return o.Evidence
}

// GetEvidenceOk returns a tuple with the Evidence field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetEvidenceOk() ([]ToolLpDataForUserCompetencySummary200ResponseEvidenceInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Evidence, true
}

// SetEvidence sets field value
func (o *ToolLpDataForUserCompetencySummary200Response) SetEvidence(v []ToolLpDataForUserCompetencySummary200ResponseEvidenceInner) {
	o.Evidence = v
}

// GetShowrelatedcompetencies returns the Showrelatedcompetencies field value
func (o *ToolLpDataForUserCompetencySummary200Response) GetShowrelatedcompetencies() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Showrelatedcompetencies
}

// GetShowrelatedcompetenciesOk returns a tuple with the Showrelatedcompetencies field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetShowrelatedcompetenciesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Showrelatedcompetencies, true
}

// SetShowrelatedcompetencies sets field value
func (o *ToolLpDataForUserCompetencySummary200Response) SetShowrelatedcompetencies(v bool) {
	o.Showrelatedcompetencies = v
}

// GetUser returns the User field value
func (o *ToolLpDataForUserCompetencySummary200Response) GetUser() CoreCompetencyGradeCompetency200ResponseActionuser {
	if o == nil {
		var ret CoreCompetencyGradeCompetency200ResponseActionuser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetUserOk() (*CoreCompetencyGradeCompetency200ResponseActionuser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ToolLpDataForUserCompetencySummary200Response) SetUser(v CoreCompetencyGradeCompetency200ResponseActionuser) {
	o.User = v
}

// GetUsercompetency returns the Usercompetency field value if set, zero value otherwise.
func (o *ToolLpDataForUserCompetencySummary200Response) GetUsercompetency() ToolLpDataForUserCompetencySummary200ResponseUsercompetency {
	if o == nil || IsNil(o.Usercompetency) {
		var ret ToolLpDataForUserCompetencySummary200ResponseUsercompetency
		return ret
	}
	return *o.Usercompetency
}

// GetUsercompetencyOk returns a tuple with the Usercompetency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetUsercompetencyOk() (*ToolLpDataForUserCompetencySummary200ResponseUsercompetency, bool) {
	if o == nil || IsNil(o.Usercompetency) {
		return nil, false
	}
	return o.Usercompetency, true
}

// HasUsercompetency returns a boolean if a field has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) HasUsercompetency() bool {
	if o != nil && !IsNil(o.Usercompetency) {
		return true
	}

	return false
}

// SetUsercompetency gets a reference to the given ToolLpDataForUserCompetencySummary200ResponseUsercompetency and assigns it to the Usercompetency field.
func (o *ToolLpDataForUserCompetencySummary200Response) SetUsercompetency(v ToolLpDataForUserCompetencySummary200ResponseUsercompetency) {
	o.Usercompetency = &v
}

// GetUsercompetencycourse returns the Usercompetencycourse field value if set, zero value otherwise.
func (o *ToolLpDataForUserCompetencySummary200Response) GetUsercompetencycourse() ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse {
	if o == nil || IsNil(o.Usercompetencycourse) {
		var ret ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse
		return ret
	}
	return *o.Usercompetencycourse
}

// GetUsercompetencycourseOk returns a tuple with the Usercompetencycourse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetUsercompetencycourseOk() (*ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse, bool) {
	if o == nil || IsNil(o.Usercompetencycourse) {
		return nil, false
	}
	return o.Usercompetencycourse, true
}

// HasUsercompetencycourse returns a boolean if a field has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) HasUsercompetencycourse() bool {
	if o != nil && !IsNil(o.Usercompetencycourse) {
		return true
	}

	return false
}

// SetUsercompetencycourse gets a reference to the given ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse and assigns it to the Usercompetencycourse field.
func (o *ToolLpDataForUserCompetencySummary200Response) SetUsercompetencycourse(v ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse) {
	o.Usercompetencycourse = &v
}

// GetUsercompetencyplan returns the Usercompetencyplan field value if set, zero value otherwise.
func (o *ToolLpDataForUserCompetencySummary200Response) GetUsercompetencyplan() ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan {
	if o == nil || IsNil(o.Usercompetencyplan) {
		var ret ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan
		return ret
	}
	return *o.Usercompetencyplan
}

// GetUsercompetencyplanOk returns a tuple with the Usercompetencyplan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) GetUsercompetencyplanOk() (*ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan, bool) {
	if o == nil || IsNil(o.Usercompetencyplan) {
		return nil, false
	}
	return o.Usercompetencyplan, true
}

// HasUsercompetencyplan returns a boolean if a field has been set.
func (o *ToolLpDataForUserCompetencySummary200Response) HasUsercompetencyplan() bool {
	if o != nil && !IsNil(o.Usercompetencyplan) {
		return true
	}

	return false
}

// SetUsercompetencyplan gets a reference to the given ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan and assigns it to the Usercompetencyplan field.
func (o *ToolLpDataForUserCompetencySummary200Response) SetUsercompetencyplan(v ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan) {
	o.Usercompetencyplan = &v
}

func (o ToolLpDataForUserCompetencySummary200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolLpDataForUserCompetencySummary200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cangrade"] = o.Cangrade
	if !IsNil(o.Commentarea) {
		toSerialize["commentarea"] = o.Commentarea
	}
	toSerialize["competency"] = o.Competency
	toSerialize["evidence"] = o.Evidence
	toSerialize["showrelatedcompetencies"] = o.Showrelatedcompetencies
	toSerialize["user"] = o.User
	if !IsNil(o.Usercompetency) {
		toSerialize["usercompetency"] = o.Usercompetency
	}
	if !IsNil(o.Usercompetencycourse) {
		toSerialize["usercompetencycourse"] = o.Usercompetencycourse
	}
	if !IsNil(o.Usercompetencyplan) {
		toSerialize["usercompetencyplan"] = o.Usercompetencyplan
	}
	return toSerialize, nil
}

func (o *ToolLpDataForUserCompetencySummary200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cangrade",
		"competency",
		"evidence",
		"showrelatedcompetencies",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolLpDataForUserCompetencySummary200Response := _ToolLpDataForUserCompetencySummary200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolLpDataForUserCompetencySummary200Response)

	if err != nil {
		return err
	}

	*o = ToolLpDataForUserCompetencySummary200Response(varToolLpDataForUserCompetencySummary200Response)

	return err
}

type NullableToolLpDataForUserCompetencySummary200Response struct {
	value *ToolLpDataForUserCompetencySummary200Response
	isSet bool
}

func (v NullableToolLpDataForUserCompetencySummary200Response) Get() *ToolLpDataForUserCompetencySummary200Response {
	return v.value
}

func (v *NullableToolLpDataForUserCompetencySummary200Response) Set(val *ToolLpDataForUserCompetencySummary200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableToolLpDataForUserCompetencySummary200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableToolLpDataForUserCompetencySummary200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolLpDataForUserCompetencySummary200Response(val *ToolLpDataForUserCompetencySummary200Response) *NullableToolLpDataForUserCompetencySummary200Response {
	return &NullableToolLpDataForUserCompetencySummary200Response{value: val, isSet: true}
}

func (v NullableToolLpDataForUserCompetencySummary200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolLpDataForUserCompetencySummary200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


