/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata{}

// ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata struct for ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata
type ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata struct {
	Activity string `json:"activity"`
	Columns []ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner `json:"columns"`
	Data string `json:"data"`
	Locale string `json:"locale"`
	PingInterval int32 `json:"ping_interval"`
	ProfileFeatures []map[string]interface{} `json:"profile_features"`
}

type _ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata

// NewModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata instantiates a new ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata(activity string, columns []ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner, data string, locale string, pingInterval int32, profileFeatures []map[string]interface{}) *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata {
	this := ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata{}
	this.Activity = activity
	this.Columns = columns
	this.Data = data
	this.Locale = locale
	this.PingInterval = pingInterval
	this.ProfileFeatures = profileFeatures
	return &this
}

// NewModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataWithDefaults instantiates a new ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataWithDefaults() *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata {
	this := ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata{}
	return &this
}

// GetActivity returns the Activity field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetActivity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Activity
}

// GetActivityOk returns a tuple with the Activity field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetActivityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activity, true
}

// SetActivity sets field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) SetActivity(v string) {
	o.Activity = v
}

// GetColumns returns the Columns field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetColumns() []ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner {
	if o == nil {
		var ret []ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetColumnsOk() ([]ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) SetColumns(v []ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner) {
	o.Columns = v
}

// GetData returns the Data field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) SetData(v string) {
	o.Data = v
}

// GetLocale returns the Locale field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetLocale() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) SetLocale(v string) {
	o.Locale = v
}

// GetPingInterval returns the PingInterval field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetPingInterval() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PingInterval
}

// GetPingIntervalOk returns a tuple with the PingInterval field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetPingIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PingInterval, true
}

// SetPingInterval sets field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) SetPingInterval(v int32) {
	o.PingInterval = v
}

// GetProfileFeatures returns the ProfileFeatures field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetProfileFeatures() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.ProfileFeatures
}

// GetProfileFeaturesOk returns a tuple with the ProfileFeatures field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) GetProfileFeaturesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProfileFeatures, true
}

// SetProfileFeatures sets field value
func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) SetProfileFeatures(v []map[string]interface{}) {
	o.ProfileFeatures = v
}

func (o ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activity"] = o.Activity
	toSerialize["columns"] = o.Columns
	toSerialize["data"] = o.Data
	toSerialize["locale"] = o.Locale
	toSerialize["ping_interval"] = o.PingInterval
	toSerialize["profile_features"] = o.ProfileFeatures
	return toSerialize, nil
}

func (o *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activity",
		"columns",
		"data",
		"locale",
		"ping_interval",
		"profile_features",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata := _ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata)

	if err != nil {
		return err
	}

	*o = ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata(varModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata)

	return err
}

type NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata struct {
	value *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata
	isSet bool
}

func (v NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) Get() *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata {
	return v.value
}

func (v *NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) Set(val *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) {
	v.value = val
	v.isSet = true
}

func (v NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) IsSet() bool {
	return v.isSet
}

func (v *NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata(val *ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) *NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata {
	return &NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata{value: val, isSet: true}
}

func (v NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModBigbluebuttonbnGetRecordingsToImport200ResponseTabledata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


