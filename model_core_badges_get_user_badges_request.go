/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreBadgesGetUserBadgesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreBadgesGetUserBadgesRequest{}

// CoreBadgesGetUserBadgesRequest struct for CoreBadgesGetUserBadgesRequest
type CoreBadgesGetUserBadgesRequest struct {
	// Filter badges by course id, empty all the courses
	Courseid *int32 `json:"courseid,omitempty"`
	// Whether to return only public badges
	Onlypublic *bool `json:"onlypublic,omitempty"`
	// The page of records to return.
	Page *int32 `json:"page,omitempty"`
	// The number of records to return per page
	Perpage *int32 `json:"perpage,omitempty"`
	// A simple string to search for
	Search *string `json:"search,omitempty"`
	// Badges only for this user id, empty for current user
	Userid *int32 `json:"userid,omitempty"`
}

// NewCoreBadgesGetUserBadgesRequest instantiates a new CoreBadgesGetUserBadgesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreBadgesGetUserBadgesRequest() *CoreBadgesGetUserBadgesRequest {
	this := CoreBadgesGetUserBadgesRequest{}
	var courseid int32 = 0
	this.Courseid = &courseid
	var onlypublic bool = false
	this.Onlypublic = &onlypublic
	var page int32 = 0
	this.Page = &page
	var perpage int32 = 0
	this.Perpage = &perpage
	var search string = ""
	this.Search = &search
	var userid int32 = 0
	this.Userid = &userid
	return &this
}

// NewCoreBadgesGetUserBadgesRequestWithDefaults instantiates a new CoreBadgesGetUserBadgesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreBadgesGetUserBadgesRequestWithDefaults() *CoreBadgesGetUserBadgesRequest {
	this := CoreBadgesGetUserBadgesRequest{}
	var courseid int32 = 0
	this.Courseid = &courseid
	var onlypublic bool = false
	this.Onlypublic = &onlypublic
	var page int32 = 0
	this.Page = &page
	var perpage int32 = 0
	this.Perpage = &perpage
	var search string = ""
	this.Search = &search
	var userid int32 = 0
	this.Userid = &userid
	return &this
}

// GetCourseid returns the Courseid field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgesRequest) GetCourseid() int32 {
	if o == nil || IsNil(o.Courseid) {
		var ret int32
		return ret
	}
	return *o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgesRequest) GetCourseidOk() (*int32, bool) {
	if o == nil || IsNil(o.Courseid) {
		return nil, false
	}
	return o.Courseid, true
}

// HasCourseid returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgesRequest) HasCourseid() bool {
	if o != nil && !IsNil(o.Courseid) {
		return true
	}

	return false
}

// SetCourseid gets a reference to the given int32 and assigns it to the Courseid field.
func (o *CoreBadgesGetUserBadgesRequest) SetCourseid(v int32) {
	o.Courseid = &v
}

// GetOnlypublic returns the Onlypublic field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgesRequest) GetOnlypublic() bool {
	if o == nil || IsNil(o.Onlypublic) {
		var ret bool
		return ret
	}
	return *o.Onlypublic
}

// GetOnlypublicOk returns a tuple with the Onlypublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgesRequest) GetOnlypublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Onlypublic) {
		return nil, false
	}
	return o.Onlypublic, true
}

// HasOnlypublic returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgesRequest) HasOnlypublic() bool {
	if o != nil && !IsNil(o.Onlypublic) {
		return true
	}

	return false
}

// SetOnlypublic gets a reference to the given bool and assigns it to the Onlypublic field.
func (o *CoreBadgesGetUserBadgesRequest) SetOnlypublic(v bool) {
	o.Onlypublic = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgesRequest) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgesRequest) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgesRequest) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *CoreBadgesGetUserBadgesRequest) SetPage(v int32) {
	o.Page = &v
}

// GetPerpage returns the Perpage field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgesRequest) GetPerpage() int32 {
	if o == nil || IsNil(o.Perpage) {
		var ret int32
		return ret
	}
	return *o.Perpage
}

// GetPerpageOk returns a tuple with the Perpage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgesRequest) GetPerpageOk() (*int32, bool) {
	if o == nil || IsNil(o.Perpage) {
		return nil, false
	}
	return o.Perpage, true
}

// HasPerpage returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgesRequest) HasPerpage() bool {
	if o != nil && !IsNil(o.Perpage) {
		return true
	}

	return false
}

// SetPerpage gets a reference to the given int32 and assigns it to the Perpage field.
func (o *CoreBadgesGetUserBadgesRequest) SetPerpage(v int32) {
	o.Perpage = &v
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgesRequest) GetSearch() string {
	if o == nil || IsNil(o.Search) {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgesRequest) GetSearchOk() (*string, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgesRequest) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *CoreBadgesGetUserBadgesRequest) SetSearch(v string) {
	o.Search = &v
}

// GetUserid returns the Userid field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgesRequest) GetUserid() int32 {
	if o == nil || IsNil(o.Userid) {
		var ret int32
		return ret
	}
	return *o.Userid
}

// GetUseridOk returns a tuple with the Userid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgesRequest) GetUseridOk() (*int32, bool) {
	if o == nil || IsNil(o.Userid) {
		return nil, false
	}
	return o.Userid, true
}

// HasUserid returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgesRequest) HasUserid() bool {
	if o != nil && !IsNil(o.Userid) {
		return true
	}

	return false
}

// SetUserid gets a reference to the given int32 and assigns it to the Userid field.
func (o *CoreBadgesGetUserBadgesRequest) SetUserid(v int32) {
	o.Userid = &v
}

func (o CoreBadgesGetUserBadgesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreBadgesGetUserBadgesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Courseid) {
		toSerialize["courseid"] = o.Courseid
	}
	if !IsNil(o.Onlypublic) {
		toSerialize["onlypublic"] = o.Onlypublic
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Perpage) {
		toSerialize["perpage"] = o.Perpage
	}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.Userid) {
		toSerialize["userid"] = o.Userid
	}
	return toSerialize, nil
}

type NullableCoreBadgesGetUserBadgesRequest struct {
	value *CoreBadgesGetUserBadgesRequest
	isSet bool
}

func (v NullableCoreBadgesGetUserBadgesRequest) Get() *CoreBadgesGetUserBadgesRequest {
	return v.value
}

func (v *NullableCoreBadgesGetUserBadgesRequest) Set(val *CoreBadgesGetUserBadgesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreBadgesGetUserBadgesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreBadgesGetUserBadgesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreBadgesGetUserBadgesRequest(val *CoreBadgesGetUserBadgesRequest) *NullableCoreBadgesGetUserBadgesRequest {
	return &NullableCoreBadgesGetUserBadgesRequest{value: val, isSet: true}
}

func (v NullableCoreBadgesGetUserBadgesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreBadgesGetUserBadgesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


