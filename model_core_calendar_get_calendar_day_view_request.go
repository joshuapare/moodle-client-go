/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCalendarGetCalendarDayViewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarDayViewRequest{}

// CoreCalendarGetCalendarDayViewRequest struct for CoreCalendarGetCalendarDayViewRequest
type CoreCalendarGetCalendarDayViewRequest struct {
	// Category being viewed
	Categoryid *int32 `json:"categoryid,omitempty"`
	// Course being viewed
	Courseid *int32 `json:"courseid,omitempty"`
	// Day to be viewed
	Day int32 `json:"day"`
	// Month to be viewed
	Month int32 `json:"month"`
	// Year to be viewed
	Year int32 `json:"year"`
}

type _CoreCalendarGetCalendarDayViewRequest CoreCalendarGetCalendarDayViewRequest

// NewCoreCalendarGetCalendarDayViewRequest instantiates a new CoreCalendarGetCalendarDayViewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarDayViewRequest(day int32, month int32, year int32) *CoreCalendarGetCalendarDayViewRequest {
	this := CoreCalendarGetCalendarDayViewRequest{}
	var categoryid int32 = null
	this.Categoryid = &categoryid
	var courseid int32 = 1
	this.Courseid = &courseid
	this.Day = day
	this.Month = month
	this.Year = year
	return &this
}

// NewCoreCalendarGetCalendarDayViewRequestWithDefaults instantiates a new CoreCalendarGetCalendarDayViewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarDayViewRequestWithDefaults() *CoreCalendarGetCalendarDayViewRequest {
	this := CoreCalendarGetCalendarDayViewRequest{}
	var categoryid int32 = null
	this.Categoryid = &categoryid
	var courseid int32 = 1
	this.Courseid = &courseid
	var day int32 = null
	this.Day = day
	var month int32 = null
	this.Month = month
	var year int32 = null
	this.Year = year
	return &this
}

// GetCategoryid returns the Categoryid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarDayViewRequest) GetCategoryid() int32 {
	if o == nil || IsNil(o.Categoryid) {
		var ret int32
		return ret
	}
	return *o.Categoryid
}

// GetCategoryidOk returns a tuple with the Categoryid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayViewRequest) GetCategoryidOk() (*int32, bool) {
	if o == nil || IsNil(o.Categoryid) {
		return nil, false
	}
	return o.Categoryid, true
}

// HasCategoryid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarDayViewRequest) HasCategoryid() bool {
	if o != nil && !IsNil(o.Categoryid) {
		return true
	}

	return false
}

// SetCategoryid gets a reference to the given int32 and assigns it to the Categoryid field.
func (o *CoreCalendarGetCalendarDayViewRequest) SetCategoryid(v int32) {
	o.Categoryid = &v
}

// GetCourseid returns the Courseid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarDayViewRequest) GetCourseid() int32 {
	if o == nil || IsNil(o.Courseid) {
		var ret int32
		return ret
	}
	return *o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayViewRequest) GetCourseidOk() (*int32, bool) {
	if o == nil || IsNil(o.Courseid) {
		return nil, false
	}
	return o.Courseid, true
}

// HasCourseid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarDayViewRequest) HasCourseid() bool {
	if o != nil && !IsNil(o.Courseid) {
		return true
	}

	return false
}

// SetCourseid gets a reference to the given int32 and assigns it to the Courseid field.
func (o *CoreCalendarGetCalendarDayViewRequest) SetCourseid(v int32) {
	o.Courseid = &v
}

// GetDay returns the Day field value
func (o *CoreCalendarGetCalendarDayViewRequest) GetDay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayViewRequest) GetDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *CoreCalendarGetCalendarDayViewRequest) SetDay(v int32) {
	o.Day = v
}

// GetMonth returns the Month field value
func (o *CoreCalendarGetCalendarDayViewRequest) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayViewRequest) GetMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *CoreCalendarGetCalendarDayViewRequest) SetMonth(v int32) {
	o.Month = v
}

// GetYear returns the Year field value
func (o *CoreCalendarGetCalendarDayViewRequest) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayViewRequest) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *CoreCalendarGetCalendarDayViewRequest) SetYear(v int32) {
	o.Year = v
}

func (o CoreCalendarGetCalendarDayViewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarDayViewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categoryid) {
		toSerialize["categoryid"] = o.Categoryid
	}
	if !IsNil(o.Courseid) {
		toSerialize["courseid"] = o.Courseid
	}
	toSerialize["day"] = o.Day
	toSerialize["month"] = o.Month
	toSerialize["year"] = o.Year
	return toSerialize, nil
}

func (o *CoreCalendarGetCalendarDayViewRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"day",
		"month",
		"year",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCalendarGetCalendarDayViewRequest := _CoreCalendarGetCalendarDayViewRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCalendarGetCalendarDayViewRequest)

	if err != nil {
		return err
	}

	*o = CoreCalendarGetCalendarDayViewRequest(varCoreCalendarGetCalendarDayViewRequest)

	return err
}

type NullableCoreCalendarGetCalendarDayViewRequest struct {
	value *CoreCalendarGetCalendarDayViewRequest
	isSet bool
}

func (v NullableCoreCalendarGetCalendarDayViewRequest) Get() *CoreCalendarGetCalendarDayViewRequest {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarDayViewRequest) Set(val *CoreCalendarGetCalendarDayViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarDayViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarDayViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarDayViewRequest(val *CoreCalendarGetCalendarDayViewRequest) *NullableCoreCalendarGetCalendarDayViewRequest {
	return &NullableCoreCalendarGetCalendarDayViewRequest{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarDayViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarDayViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


