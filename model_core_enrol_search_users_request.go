/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreEnrolSearchUsersRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreEnrolSearchUsersRequest{}

// CoreEnrolSearchUsersRequest struct for CoreEnrolSearchUsersRequest
type CoreEnrolSearchUsersRequest struct {
	// Context ID
	Contextid *int32 `json:"contextid,omitempty"`
	// course id
	Courseid int32 `json:"courseid"`
	// Page number
	Page int32 `json:"page"`
	// Number per page
	Perpage int32 `json:"perpage"`
	// query
	Search string `json:"search"`
	// find a match anywhere, or only at the beginning
	Searchanywhere bool `json:"searchanywhere"`
}

type _CoreEnrolSearchUsersRequest CoreEnrolSearchUsersRequest

// NewCoreEnrolSearchUsersRequest instantiates a new CoreEnrolSearchUsersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreEnrolSearchUsersRequest(courseid int32, page int32, perpage int32, search string, searchanywhere bool) *CoreEnrolSearchUsersRequest {
	this := CoreEnrolSearchUsersRequest{}
	var contextid int32 = null
	this.Contextid = &contextid
	this.Courseid = courseid
	this.Page = page
	this.Perpage = perpage
	this.Search = search
	this.Searchanywhere = searchanywhere
	return &this
}

// NewCoreEnrolSearchUsersRequestWithDefaults instantiates a new CoreEnrolSearchUsersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreEnrolSearchUsersRequestWithDefaults() *CoreEnrolSearchUsersRequest {
	this := CoreEnrolSearchUsersRequest{}
	var contextid int32 = null
	this.Contextid = &contextid
	return &this
}

// GetContextid returns the Contextid field value if set, zero value otherwise.
func (o *CoreEnrolSearchUsersRequest) GetContextid() int32 {
	if o == nil || IsNil(o.Contextid) {
		var ret int32
		return ret
	}
	return *o.Contextid
}

// GetContextidOk returns a tuple with the Contextid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreEnrolSearchUsersRequest) GetContextidOk() (*int32, bool) {
	if o == nil || IsNil(o.Contextid) {
		return nil, false
	}
	return o.Contextid, true
}

// HasContextid returns a boolean if a field has been set.
func (o *CoreEnrolSearchUsersRequest) HasContextid() bool {
	if o != nil && !IsNil(o.Contextid) {
		return true
	}

	return false
}

// SetContextid gets a reference to the given int32 and assigns it to the Contextid field.
func (o *CoreEnrolSearchUsersRequest) SetContextid(v int32) {
	o.Contextid = &v
}

// GetCourseid returns the Courseid field value
func (o *CoreEnrolSearchUsersRequest) GetCourseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolSearchUsersRequest) GetCourseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Courseid, true
}

// SetCourseid sets field value
func (o *CoreEnrolSearchUsersRequest) SetCourseid(v int32) {
	o.Courseid = v
}

// GetPage returns the Page field value
func (o *CoreEnrolSearchUsersRequest) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolSearchUsersRequest) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *CoreEnrolSearchUsersRequest) SetPage(v int32) {
	o.Page = v
}

// GetPerpage returns the Perpage field value
func (o *CoreEnrolSearchUsersRequest) GetPerpage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Perpage
}

// GetPerpageOk returns a tuple with the Perpage field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolSearchUsersRequest) GetPerpageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Perpage, true
}

// SetPerpage sets field value
func (o *CoreEnrolSearchUsersRequest) SetPerpage(v int32) {
	o.Perpage = v
}

// GetSearch returns the Search field value
func (o *CoreEnrolSearchUsersRequest) GetSearch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Search
}

// GetSearchOk returns a tuple with the Search field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolSearchUsersRequest) GetSearchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Search, true
}

// SetSearch sets field value
func (o *CoreEnrolSearchUsersRequest) SetSearch(v string) {
	o.Search = v
}

// GetSearchanywhere returns the Searchanywhere field value
func (o *CoreEnrolSearchUsersRequest) GetSearchanywhere() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Searchanywhere
}

// GetSearchanywhereOk returns a tuple with the Searchanywhere field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolSearchUsersRequest) GetSearchanywhereOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Searchanywhere, true
}

// SetSearchanywhere sets field value
func (o *CoreEnrolSearchUsersRequest) SetSearchanywhere(v bool) {
	o.Searchanywhere = v
}

func (o CoreEnrolSearchUsersRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreEnrolSearchUsersRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contextid) {
		toSerialize["contextid"] = o.Contextid
	}
	toSerialize["courseid"] = o.Courseid
	toSerialize["page"] = o.Page
	toSerialize["perpage"] = o.Perpage
	toSerialize["search"] = o.Search
	toSerialize["searchanywhere"] = o.Searchanywhere
	return toSerialize, nil
}

func (o *CoreEnrolSearchUsersRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"courseid",
		"page",
		"perpage",
		"search",
		"searchanywhere",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreEnrolSearchUsersRequest := _CoreEnrolSearchUsersRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreEnrolSearchUsersRequest)

	if err != nil {
		return err
	}

	*o = CoreEnrolSearchUsersRequest(varCoreEnrolSearchUsersRequest)

	return err
}

type NullableCoreEnrolSearchUsersRequest struct {
	value *CoreEnrolSearchUsersRequest
	isSet bool
}

func (v NullableCoreEnrolSearchUsersRequest) Get() *CoreEnrolSearchUsersRequest {
	return v.value
}

func (v *NullableCoreEnrolSearchUsersRequest) Set(val *CoreEnrolSearchUsersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreEnrolSearchUsersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreEnrolSearchUsersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreEnrolSearchUsersRequest(val *CoreEnrolSearchUsersRequest) *NullableCoreEnrolSearchUsersRequest {
	return &NullableCoreEnrolSearchUsersRequest{value: val, isSet: true}
}

func (v NullableCoreEnrolSearchUsersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreEnrolSearchUsersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


