/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuthEmailSignupUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthEmailSignupUserRequest{}

// AuthEmailSignupUserRequest struct for AuthEmailSignupUserRequest
type AuthEmailSignupUserRequest struct {
	// Home city of the user
	City *string `json:"city,omitempty"`
	// Home country code
	Country *string `json:"country,omitempty"`
	Customprofilefields []AuthEmailSignupUserRequestCustomprofilefieldsInner `json:"customprofilefields,omitempty"`
	// A valid and unique email address
	Email string `json:"email"`
	// The first name(s) of the user
	Firstname string `json:"firstname"`
	// The family name of the user
	Lastname string `json:"lastname"`
	// Plain text password
	Password string `json:"password"`
	// Recaptcha challenge hash
	Recaptchachallengehash *string `json:"recaptchachallengehash,omitempty"`
	// Recaptcha response
	Recaptcharesponse *string `json:"recaptcharesponse,omitempty"`
	// Redirect the user to this site url after confirmation.
	Redirect *string `json:"redirect,omitempty"`
	// Username
	Username string `json:"username"`
}

type _AuthEmailSignupUserRequest AuthEmailSignupUserRequest

// NewAuthEmailSignupUserRequest instantiates a new AuthEmailSignupUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthEmailSignupUserRequest(email string, firstname string, lastname string, password string, username string) *AuthEmailSignupUserRequest {
	this := AuthEmailSignupUserRequest{}
	var city string = ""
	this.City = &city
	var country string = ""
	this.Country = &country
	this.Email = email
	this.Firstname = firstname
	this.Lastname = lastname
	this.Password = password
	var recaptchachallengehash string = ""
	this.Recaptchachallengehash = &recaptchachallengehash
	var recaptcharesponse string = ""
	this.Recaptcharesponse = &recaptcharesponse
	var redirect string = ""
	this.Redirect = &redirect
	this.Username = username
	return &this
}

// NewAuthEmailSignupUserRequestWithDefaults instantiates a new AuthEmailSignupUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthEmailSignupUserRequestWithDefaults() *AuthEmailSignupUserRequest {
	this := AuthEmailSignupUserRequest{}
	var city string = ""
	this.City = &city
	var country string = ""
	this.Country = &country
	var email string = "null"
	this.Email = email
	var firstname string = "null"
	this.Firstname = firstname
	var lastname string = "null"
	this.Lastname = lastname
	var password string = "null"
	this.Password = password
	var recaptchachallengehash string = ""
	this.Recaptchachallengehash = &recaptchachallengehash
	var recaptcharesponse string = ""
	this.Recaptcharesponse = &recaptcharesponse
	var redirect string = ""
	this.Redirect = &redirect
	var username string = "null"
	this.Username = username
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AuthEmailSignupUserRequest) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AuthEmailSignupUserRequest) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AuthEmailSignupUserRequest) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AuthEmailSignupUserRequest) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AuthEmailSignupUserRequest) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AuthEmailSignupUserRequest) SetCountry(v string) {
	o.Country = &v
}

// GetCustomprofilefields returns the Customprofilefields field value if set, zero value otherwise.
func (o *AuthEmailSignupUserRequest) GetCustomprofilefields() []AuthEmailSignupUserRequestCustomprofilefieldsInner {
	if o == nil || IsNil(o.Customprofilefields) {
		var ret []AuthEmailSignupUserRequestCustomprofilefieldsInner
		return ret
	}
	return o.Customprofilefields
}

// GetCustomprofilefieldsOk returns a tuple with the Customprofilefields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetCustomprofilefieldsOk() ([]AuthEmailSignupUserRequestCustomprofilefieldsInner, bool) {
	if o == nil || IsNil(o.Customprofilefields) {
		return nil, false
	}
	return o.Customprofilefields, true
}

// HasCustomprofilefields returns a boolean if a field has been set.
func (o *AuthEmailSignupUserRequest) HasCustomprofilefields() bool {
	if o != nil && !IsNil(o.Customprofilefields) {
		return true
	}

	return false
}

// SetCustomprofilefields gets a reference to the given []AuthEmailSignupUserRequestCustomprofilefieldsInner and assigns it to the Customprofilefields field.
func (o *AuthEmailSignupUserRequest) SetCustomprofilefields(v []AuthEmailSignupUserRequestCustomprofilefieldsInner) {
	o.Customprofilefields = v
}

// GetEmail returns the Email field value
func (o *AuthEmailSignupUserRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AuthEmailSignupUserRequest) SetEmail(v string) {
	o.Email = v
}

// GetFirstname returns the Firstname field value
func (o *AuthEmailSignupUserRequest) GetFirstname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetFirstnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Firstname, true
}

// SetFirstname sets field value
func (o *AuthEmailSignupUserRequest) SetFirstname(v string) {
	o.Firstname = v
}

// GetLastname returns the Lastname field value
func (o *AuthEmailSignupUserRequest) GetLastname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetLastnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lastname, true
}

// SetLastname sets field value
func (o *AuthEmailSignupUserRequest) SetLastname(v string) {
	o.Lastname = v
}

// GetPassword returns the Password field value
func (o *AuthEmailSignupUserRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AuthEmailSignupUserRequest) SetPassword(v string) {
	o.Password = v
}

// GetRecaptchachallengehash returns the Recaptchachallengehash field value if set, zero value otherwise.
func (o *AuthEmailSignupUserRequest) GetRecaptchachallengehash() string {
	if o == nil || IsNil(o.Recaptchachallengehash) {
		var ret string
		return ret
	}
	return *o.Recaptchachallengehash
}

// GetRecaptchachallengehashOk returns a tuple with the Recaptchachallengehash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetRecaptchachallengehashOk() (*string, bool) {
	if o == nil || IsNil(o.Recaptchachallengehash) {
		return nil, false
	}
	return o.Recaptchachallengehash, true
}

// HasRecaptchachallengehash returns a boolean if a field has been set.
func (o *AuthEmailSignupUserRequest) HasRecaptchachallengehash() bool {
	if o != nil && !IsNil(o.Recaptchachallengehash) {
		return true
	}

	return false
}

// SetRecaptchachallengehash gets a reference to the given string and assigns it to the Recaptchachallengehash field.
func (o *AuthEmailSignupUserRequest) SetRecaptchachallengehash(v string) {
	o.Recaptchachallengehash = &v
}

// GetRecaptcharesponse returns the Recaptcharesponse field value if set, zero value otherwise.
func (o *AuthEmailSignupUserRequest) GetRecaptcharesponse() string {
	if o == nil || IsNil(o.Recaptcharesponse) {
		var ret string
		return ret
	}
	return *o.Recaptcharesponse
}

// GetRecaptcharesponseOk returns a tuple with the Recaptcharesponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetRecaptcharesponseOk() (*string, bool) {
	if o == nil || IsNil(o.Recaptcharesponse) {
		return nil, false
	}
	return o.Recaptcharesponse, true
}

// HasRecaptcharesponse returns a boolean if a field has been set.
func (o *AuthEmailSignupUserRequest) HasRecaptcharesponse() bool {
	if o != nil && !IsNil(o.Recaptcharesponse) {
		return true
	}

	return false
}

// SetRecaptcharesponse gets a reference to the given string and assigns it to the Recaptcharesponse field.
func (o *AuthEmailSignupUserRequest) SetRecaptcharesponse(v string) {
	o.Recaptcharesponse = &v
}

// GetRedirect returns the Redirect field value if set, zero value otherwise.
func (o *AuthEmailSignupUserRequest) GetRedirect() string {
	if o == nil || IsNil(o.Redirect) {
		var ret string
		return ret
	}
	return *o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetRedirectOk() (*string, bool) {
	if o == nil || IsNil(o.Redirect) {
		return nil, false
	}
	return o.Redirect, true
}

// HasRedirect returns a boolean if a field has been set.
func (o *AuthEmailSignupUserRequest) HasRedirect() bool {
	if o != nil && !IsNil(o.Redirect) {
		return true
	}

	return false
}

// SetRedirect gets a reference to the given string and assigns it to the Redirect field.
func (o *AuthEmailSignupUserRequest) SetRedirect(v string) {
	o.Redirect = &v
}

// GetUsername returns the Username field value
func (o *AuthEmailSignupUserRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AuthEmailSignupUserRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AuthEmailSignupUserRequest) SetUsername(v string) {
	o.Username = v
}

func (o AuthEmailSignupUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthEmailSignupUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Customprofilefields) {
		toSerialize["customprofilefields"] = o.Customprofilefields
	}
	toSerialize["email"] = o.Email
	toSerialize["firstname"] = o.Firstname
	toSerialize["lastname"] = o.Lastname
	toSerialize["password"] = o.Password
	if !IsNil(o.Recaptchachallengehash) {
		toSerialize["recaptchachallengehash"] = o.Recaptchachallengehash
	}
	if !IsNil(o.Recaptcharesponse) {
		toSerialize["recaptcharesponse"] = o.Recaptcharesponse
	}
	if !IsNil(o.Redirect) {
		toSerialize["redirect"] = o.Redirect
	}
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *AuthEmailSignupUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"firstname",
		"lastname",
		"password",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthEmailSignupUserRequest := _AuthEmailSignupUserRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthEmailSignupUserRequest)

	if err != nil {
		return err
	}

	*o = AuthEmailSignupUserRequest(varAuthEmailSignupUserRequest)

	return err
}

type NullableAuthEmailSignupUserRequest struct {
	value *AuthEmailSignupUserRequest
	isSet bool
}

func (v NullableAuthEmailSignupUserRequest) Get() *AuthEmailSignupUserRequest {
	return v.value
}

func (v *NullableAuthEmailSignupUserRequest) Set(val *AuthEmailSignupUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthEmailSignupUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthEmailSignupUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthEmailSignupUserRequest(val *AuthEmailSignupUserRequest) *NullableAuthEmailSignupUserRequest {
	return &NullableAuthEmailSignupUserRequest{value: val, isSet: true}
}

func (v NullableAuthEmailSignupUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthEmailSignupUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


