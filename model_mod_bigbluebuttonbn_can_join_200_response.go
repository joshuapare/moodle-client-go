/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModBigbluebuttonbnCanJoin200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModBigbluebuttonbnCanJoin200Response{}

// ModBigbluebuttonbnCanJoin200Response struct for ModBigbluebuttonbnCanJoin200Response
type ModBigbluebuttonbnCanJoin200Response struct {
	// Can join session
	CanJoin bool `json:"can_join"`
	// course module id
	Cmid int32 `json:"cmid"`
}

type _ModBigbluebuttonbnCanJoin200Response ModBigbluebuttonbnCanJoin200Response

// NewModBigbluebuttonbnCanJoin200Response instantiates a new ModBigbluebuttonbnCanJoin200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModBigbluebuttonbnCanJoin200Response(canJoin bool, cmid int32) *ModBigbluebuttonbnCanJoin200Response {
	this := ModBigbluebuttonbnCanJoin200Response{}
	this.CanJoin = canJoin
	this.Cmid = cmid
	return &this
}

// NewModBigbluebuttonbnCanJoin200ResponseWithDefaults instantiates a new ModBigbluebuttonbnCanJoin200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModBigbluebuttonbnCanJoin200ResponseWithDefaults() *ModBigbluebuttonbnCanJoin200Response {
	this := ModBigbluebuttonbnCanJoin200Response{}
	var canJoin bool = null
	this.CanJoin = canJoin
	return &this
}

// GetCanJoin returns the CanJoin field value
func (o *ModBigbluebuttonbnCanJoin200Response) GetCanJoin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanJoin
}

// GetCanJoinOk returns a tuple with the CanJoin field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnCanJoin200Response) GetCanJoinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanJoin, true
}

// SetCanJoin sets field value
func (o *ModBigbluebuttonbnCanJoin200Response) SetCanJoin(v bool) {
	o.CanJoin = v
}

// GetCmid returns the Cmid field value
func (o *ModBigbluebuttonbnCanJoin200Response) GetCmid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cmid
}

// GetCmidOk returns a tuple with the Cmid field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnCanJoin200Response) GetCmidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cmid, true
}

// SetCmid sets field value
func (o *ModBigbluebuttonbnCanJoin200Response) SetCmid(v int32) {
	o.Cmid = v
}

func (o ModBigbluebuttonbnCanJoin200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModBigbluebuttonbnCanJoin200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_join"] = o.CanJoin
	toSerialize["cmid"] = o.Cmid
	return toSerialize, nil
}

func (o *ModBigbluebuttonbnCanJoin200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"can_join",
		"cmid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModBigbluebuttonbnCanJoin200Response := _ModBigbluebuttonbnCanJoin200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModBigbluebuttonbnCanJoin200Response)

	if err != nil {
		return err
	}

	*o = ModBigbluebuttonbnCanJoin200Response(varModBigbluebuttonbnCanJoin200Response)

	return err
}

type NullableModBigbluebuttonbnCanJoin200Response struct {
	value *ModBigbluebuttonbnCanJoin200Response
	isSet bool
}

func (v NullableModBigbluebuttonbnCanJoin200Response) Get() *ModBigbluebuttonbnCanJoin200Response {
	return v.value
}

func (v *NullableModBigbluebuttonbnCanJoin200Response) Set(val *ModBigbluebuttonbnCanJoin200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableModBigbluebuttonbnCanJoin200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableModBigbluebuttonbnCanJoin200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModBigbluebuttonbnCanJoin200Response(val *ModBigbluebuttonbnCanJoin200Response) *NullableModBigbluebuttonbnCanJoin200Response {
	return &NullableModBigbluebuttonbnCanJoin200Response{value: val, isSet: true}
}

func (v NullableModBigbluebuttonbnCanJoin200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModBigbluebuttonbnCanJoin200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


