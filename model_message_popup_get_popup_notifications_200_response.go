/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessagePopupGetPopupNotifications200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagePopupGetPopupNotifications200Response{}

// MessagePopupGetPopupNotifications200Response struct for MessagePopupGetPopupNotifications200Response
type MessagePopupGetPopupNotifications200Response struct {
	Notifications []MessagePopupGetPopupNotifications200ResponseNotificationsInner `json:"notifications"`
	// the number of unread message for the given user
	Unreadcount int32 `json:"unreadcount"`
}

type _MessagePopupGetPopupNotifications200Response MessagePopupGetPopupNotifications200Response

// NewMessagePopupGetPopupNotifications200Response instantiates a new MessagePopupGetPopupNotifications200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagePopupGetPopupNotifications200Response(notifications []MessagePopupGetPopupNotifications200ResponseNotificationsInner, unreadcount int32) *MessagePopupGetPopupNotifications200Response {
	this := MessagePopupGetPopupNotifications200Response{}
	this.Notifications = notifications
	this.Unreadcount = unreadcount
	return &this
}

// NewMessagePopupGetPopupNotifications200ResponseWithDefaults instantiates a new MessagePopupGetPopupNotifications200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagePopupGetPopupNotifications200ResponseWithDefaults() *MessagePopupGetPopupNotifications200Response {
	this := MessagePopupGetPopupNotifications200Response{}
	var unreadcount int32 = null
	this.Unreadcount = unreadcount
	return &this
}

// GetNotifications returns the Notifications field value
func (o *MessagePopupGetPopupNotifications200Response) GetNotifications() []MessagePopupGetPopupNotifications200ResponseNotificationsInner {
	if o == nil {
		var ret []MessagePopupGetPopupNotifications200ResponseNotificationsInner
		return ret
	}

	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value
// and a boolean to check if the value has been set.
func (o *MessagePopupGetPopupNotifications200Response) GetNotificationsOk() ([]MessagePopupGetPopupNotifications200ResponseNotificationsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notifications, true
}

// SetNotifications sets field value
func (o *MessagePopupGetPopupNotifications200Response) SetNotifications(v []MessagePopupGetPopupNotifications200ResponseNotificationsInner) {
	o.Notifications = v
}

// GetUnreadcount returns the Unreadcount field value
func (o *MessagePopupGetPopupNotifications200Response) GetUnreadcount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Unreadcount
}

// GetUnreadcountOk returns a tuple with the Unreadcount field value
// and a boolean to check if the value has been set.
func (o *MessagePopupGetPopupNotifications200Response) GetUnreadcountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unreadcount, true
}

// SetUnreadcount sets field value
func (o *MessagePopupGetPopupNotifications200Response) SetUnreadcount(v int32) {
	o.Unreadcount = v
}

func (o MessagePopupGetPopupNotifications200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagePopupGetPopupNotifications200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notifications"] = o.Notifications
	toSerialize["unreadcount"] = o.Unreadcount
	return toSerialize, nil
}

func (o *MessagePopupGetPopupNotifications200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notifications",
		"unreadcount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessagePopupGetPopupNotifications200Response := _MessagePopupGetPopupNotifications200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessagePopupGetPopupNotifications200Response)

	if err != nil {
		return err
	}

	*o = MessagePopupGetPopupNotifications200Response(varMessagePopupGetPopupNotifications200Response)

	return err
}

type NullableMessagePopupGetPopupNotifications200Response struct {
	value *MessagePopupGetPopupNotifications200Response
	isSet bool
}

func (v NullableMessagePopupGetPopupNotifications200Response) Get() *MessagePopupGetPopupNotifications200Response {
	return v.value
}

func (v *NullableMessagePopupGetPopupNotifications200Response) Set(val *MessagePopupGetPopupNotifications200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagePopupGetPopupNotifications200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagePopupGetPopupNotifications200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagePopupGetPopupNotifications200Response(val *MessagePopupGetPopupNotifications200Response) *NullableMessagePopupGetPopupNotifications200Response {
	return &NullableMessagePopupGetPopupNotifications200Response{value: val, isSet: true}
}

func (v NullableMessagePopupGetPopupNotifications200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagePopupGetPopupNotifications200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


