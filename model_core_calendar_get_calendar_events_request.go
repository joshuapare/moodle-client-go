/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreCalendarGetCalendarEventsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarEventsRequest{}

// CoreCalendarGetCalendarEventsRequest struct for CoreCalendarGetCalendarEventsRequest
type CoreCalendarGetCalendarEventsRequest struct {
	Events *CoreCalendarGetCalendarEventsRequestEvents `json:"events,omitempty"`
	Options *CoreCalendarGetCalendarEventsRequestOptions `json:"options,omitempty"`
}

// NewCoreCalendarGetCalendarEventsRequest instantiates a new CoreCalendarGetCalendarEventsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarEventsRequest() *CoreCalendarGetCalendarEventsRequest {
	this := CoreCalendarGetCalendarEventsRequest{}
	return &this
}

// NewCoreCalendarGetCalendarEventsRequestWithDefaults instantiates a new CoreCalendarGetCalendarEventsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarEventsRequestWithDefaults() *CoreCalendarGetCalendarEventsRequest {
	this := CoreCalendarGetCalendarEventsRequest{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventsRequest) GetEvents() CoreCalendarGetCalendarEventsRequestEvents {
	if o == nil || IsNil(o.Events) {
		var ret CoreCalendarGetCalendarEventsRequestEvents
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventsRequest) GetEventsOk() (*CoreCalendarGetCalendarEventsRequestEvents, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventsRequest) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given CoreCalendarGetCalendarEventsRequestEvents and assigns it to the Events field.
func (o *CoreCalendarGetCalendarEventsRequest) SetEvents(v CoreCalendarGetCalendarEventsRequestEvents) {
	o.Events = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventsRequest) GetOptions() CoreCalendarGetCalendarEventsRequestOptions {
	if o == nil || IsNil(o.Options) {
		var ret CoreCalendarGetCalendarEventsRequestOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventsRequest) GetOptionsOk() (*CoreCalendarGetCalendarEventsRequestOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventsRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given CoreCalendarGetCalendarEventsRequestOptions and assigns it to the Options field.
func (o *CoreCalendarGetCalendarEventsRequest) SetOptions(v CoreCalendarGetCalendarEventsRequestOptions) {
	o.Options = &v
}

func (o CoreCalendarGetCalendarEventsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarEventsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableCoreCalendarGetCalendarEventsRequest struct {
	value *CoreCalendarGetCalendarEventsRequest
	isSet bool
}

func (v NullableCoreCalendarGetCalendarEventsRequest) Get() *CoreCalendarGetCalendarEventsRequest {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarEventsRequest) Set(val *CoreCalendarGetCalendarEventsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarEventsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarEventsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarEventsRequest(val *CoreCalendarGetCalendarEventsRequest) *NullableCoreCalendarGetCalendarEventsRequest {
	return &NullableCoreCalendarGetCalendarEventsRequest{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarEventsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarEventsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


