/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreSearchGetTopResultsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreSearchGetTopResultsRequest{}

// CoreSearchGetTopResultsRequest struct for CoreSearchGetTopResultsRequest
type CoreSearchGetTopResultsRequest struct {
	Filters *CoreSearchGetTopResultsRequestFilters `json:"filters,omitempty"`
	// the search query
	Query string `json:"query"`
}

type _CoreSearchGetTopResultsRequest CoreSearchGetTopResultsRequest

// NewCoreSearchGetTopResultsRequest instantiates a new CoreSearchGetTopResultsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreSearchGetTopResultsRequest(query string) *CoreSearchGetTopResultsRequest {
	this := CoreSearchGetTopResultsRequest{}
	this.Query = query
	return &this
}

// NewCoreSearchGetTopResultsRequestWithDefaults instantiates a new CoreSearchGetTopResultsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreSearchGetTopResultsRequestWithDefaults() *CoreSearchGetTopResultsRequest {
	this := CoreSearchGetTopResultsRequest{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequest) GetFilters() CoreSearchGetTopResultsRequestFilters {
	if o == nil || IsNil(o.Filters) {
		var ret CoreSearchGetTopResultsRequestFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequest) GetFiltersOk() (*CoreSearchGetTopResultsRequestFilters, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given CoreSearchGetTopResultsRequestFilters and assigns it to the Filters field.
func (o *CoreSearchGetTopResultsRequest) SetFilters(v CoreSearchGetTopResultsRequestFilters) {
	o.Filters = &v
}

// GetQuery returns the Query field value
func (o *CoreSearchGetTopResultsRequest) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequest) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *CoreSearchGetTopResultsRequest) SetQuery(v string) {
	o.Query = v
}

func (o CoreSearchGetTopResultsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreSearchGetTopResultsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	toSerialize["query"] = o.Query
	return toSerialize, nil
}

func (o *CoreSearchGetTopResultsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreSearchGetTopResultsRequest := _CoreSearchGetTopResultsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreSearchGetTopResultsRequest)

	if err != nil {
		return err
	}

	*o = CoreSearchGetTopResultsRequest(varCoreSearchGetTopResultsRequest)

	return err
}

type NullableCoreSearchGetTopResultsRequest struct {
	value *CoreSearchGetTopResultsRequest
	isSet bool
}

func (v NullableCoreSearchGetTopResultsRequest) Get() *CoreSearchGetTopResultsRequest {
	return v.value
}

func (v *NullableCoreSearchGetTopResultsRequest) Set(val *CoreSearchGetTopResultsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreSearchGetTopResultsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreSearchGetTopResultsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreSearchGetTopResultsRequest(val *CoreSearchGetTopResultsRequest) *NullableCoreSearchGetTopResultsRequest {
	return &NullableCoreSearchGetTopResultsRequest{value: val, isSet: true}
}

func (v NullableCoreSearchGetTopResultsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreSearchGetTopResultsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


