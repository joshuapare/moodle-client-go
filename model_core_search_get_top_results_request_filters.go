/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreSearchGetTopResultsRequestFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreSearchGetTopResultsRequestFilters{}

// CoreSearchGetTopResultsRequestFilters struct for CoreSearchGetTopResultsRequestFilters
type CoreSearchGetTopResultsRequestFilters struct {
	Areaids []map[string]interface{} `json:"areaids,omitempty"`
	// category to filter areas
	Cat *string `json:"cat,omitempty"`
	Contextids []map[string]interface{} `json:"contextids,omitempty"`
	Courseids []map[string]interface{} `json:"courseids,omitempty"`
	Groupids []map[string]interface{} `json:"groupids,omitempty"`
	// only results from my courses
	Mycoursesonly *bool `json:"mycoursesonly,omitempty"`
	// how to order
	Order *string `json:"order,omitempty"`
	// docs modified before this date
	Timeend *int32 `json:"timeend,omitempty"`
	// docs modified after this date
	Timestart *int32 `json:"timestart,omitempty"`
	// result title
	Title *string `json:"title,omitempty"`
	Userids []map[string]interface{} `json:"userids,omitempty"`
}

// NewCoreSearchGetTopResultsRequestFilters instantiates a new CoreSearchGetTopResultsRequestFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreSearchGetTopResultsRequestFilters() *CoreSearchGetTopResultsRequestFilters {
	this := CoreSearchGetTopResultsRequestFilters{}
	var cat string = ""
	this.Cat = &cat
	var mycoursesonly bool = false
	this.Mycoursesonly = &mycoursesonly
	var order string = ""
	this.Order = &order
	var timeend int32 = 0
	this.Timeend = &timeend
	var timestart int32 = 0
	this.Timestart = &timestart
	return &this
}

// NewCoreSearchGetTopResultsRequestFiltersWithDefaults instantiates a new CoreSearchGetTopResultsRequestFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreSearchGetTopResultsRequestFiltersWithDefaults() *CoreSearchGetTopResultsRequestFilters {
	this := CoreSearchGetTopResultsRequestFilters{}
	var cat string = ""
	this.Cat = &cat
	var mycoursesonly bool = false
	this.Mycoursesonly = &mycoursesonly
	var order string = ""
	this.Order = &order
	var timeend int32 = 0
	this.Timeend = &timeend
	var timestart int32 = 0
	this.Timestart = &timestart
	return &this
}

// GetAreaids returns the Areaids field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetAreaids() []map[string]interface{} {
	if o == nil || IsNil(o.Areaids) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Areaids
}

// GetAreaidsOk returns a tuple with the Areaids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetAreaidsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Areaids) {
		return nil, false
	}
	return o.Areaids, true
}

// HasAreaids returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasAreaids() bool {
	if o != nil && !IsNil(o.Areaids) {
		return true
	}

	return false
}

// SetAreaids gets a reference to the given []map[string]interface{} and assigns it to the Areaids field.
func (o *CoreSearchGetTopResultsRequestFilters) SetAreaids(v []map[string]interface{}) {
	o.Areaids = v
}

// GetCat returns the Cat field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetCat() string {
	if o == nil || IsNil(o.Cat) {
		var ret string
		return ret
	}
	return *o.Cat
}

// GetCatOk returns a tuple with the Cat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetCatOk() (*string, bool) {
	if o == nil || IsNil(o.Cat) {
		return nil, false
	}
	return o.Cat, true
}

// HasCat returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasCat() bool {
	if o != nil && !IsNil(o.Cat) {
		return true
	}

	return false
}

// SetCat gets a reference to the given string and assigns it to the Cat field.
func (o *CoreSearchGetTopResultsRequestFilters) SetCat(v string) {
	o.Cat = &v
}

// GetContextids returns the Contextids field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetContextids() []map[string]interface{} {
	if o == nil || IsNil(o.Contextids) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Contextids
}

// GetContextidsOk returns a tuple with the Contextids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetContextidsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Contextids) {
		return nil, false
	}
	return o.Contextids, true
}

// HasContextids returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasContextids() bool {
	if o != nil && !IsNil(o.Contextids) {
		return true
	}

	return false
}

// SetContextids gets a reference to the given []map[string]interface{} and assigns it to the Contextids field.
func (o *CoreSearchGetTopResultsRequestFilters) SetContextids(v []map[string]interface{}) {
	o.Contextids = v
}

// GetCourseids returns the Courseids field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetCourseids() []map[string]interface{} {
	if o == nil || IsNil(o.Courseids) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Courseids
}

// GetCourseidsOk returns a tuple with the Courseids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetCourseidsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Courseids) {
		return nil, false
	}
	return o.Courseids, true
}

// HasCourseids returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasCourseids() bool {
	if o != nil && !IsNil(o.Courseids) {
		return true
	}

	return false
}

// SetCourseids gets a reference to the given []map[string]interface{} and assigns it to the Courseids field.
func (o *CoreSearchGetTopResultsRequestFilters) SetCourseids(v []map[string]interface{}) {
	o.Courseids = v
}

// GetGroupids returns the Groupids field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetGroupids() []map[string]interface{} {
	if o == nil || IsNil(o.Groupids) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Groupids
}

// GetGroupidsOk returns a tuple with the Groupids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetGroupidsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Groupids) {
		return nil, false
	}
	return o.Groupids, true
}

// HasGroupids returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasGroupids() bool {
	if o != nil && !IsNil(o.Groupids) {
		return true
	}

	return false
}

// SetGroupids gets a reference to the given []map[string]interface{} and assigns it to the Groupids field.
func (o *CoreSearchGetTopResultsRequestFilters) SetGroupids(v []map[string]interface{}) {
	o.Groupids = v
}

// GetMycoursesonly returns the Mycoursesonly field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetMycoursesonly() bool {
	if o == nil || IsNil(o.Mycoursesonly) {
		var ret bool
		return ret
	}
	return *o.Mycoursesonly
}

// GetMycoursesonlyOk returns a tuple with the Mycoursesonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetMycoursesonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Mycoursesonly) {
		return nil, false
	}
	return o.Mycoursesonly, true
}

// HasMycoursesonly returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasMycoursesonly() bool {
	if o != nil && !IsNil(o.Mycoursesonly) {
		return true
	}

	return false
}

// SetMycoursesonly gets a reference to the given bool and assigns it to the Mycoursesonly field.
func (o *CoreSearchGetTopResultsRequestFilters) SetMycoursesonly(v bool) {
	o.Mycoursesonly = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *CoreSearchGetTopResultsRequestFilters) SetOrder(v string) {
	o.Order = &v
}

// GetTimeend returns the Timeend field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetTimeend() int32 {
	if o == nil || IsNil(o.Timeend) {
		var ret int32
		return ret
	}
	return *o.Timeend
}

// GetTimeendOk returns a tuple with the Timeend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetTimeendOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeend) {
		return nil, false
	}
	return o.Timeend, true
}

// HasTimeend returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasTimeend() bool {
	if o != nil && !IsNil(o.Timeend) {
		return true
	}

	return false
}

// SetTimeend gets a reference to the given int32 and assigns it to the Timeend field.
func (o *CoreSearchGetTopResultsRequestFilters) SetTimeend(v int32) {
	o.Timeend = &v
}

// GetTimestart returns the Timestart field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetTimestart() int32 {
	if o == nil || IsNil(o.Timestart) {
		var ret int32
		return ret
	}
	return *o.Timestart
}

// GetTimestartOk returns a tuple with the Timestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetTimestartOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestart) {
		return nil, false
	}
	return o.Timestart, true
}

// HasTimestart returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasTimestart() bool {
	if o != nil && !IsNil(o.Timestart) {
		return true
	}

	return false
}

// SetTimestart gets a reference to the given int32 and assigns it to the Timestart field.
func (o *CoreSearchGetTopResultsRequestFilters) SetTimestart(v int32) {
	o.Timestart = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CoreSearchGetTopResultsRequestFilters) SetTitle(v string) {
	o.Title = &v
}

// GetUserids returns the Userids field value if set, zero value otherwise.
func (o *CoreSearchGetTopResultsRequestFilters) GetUserids() []map[string]interface{} {
	if o == nil || IsNil(o.Userids) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Userids
}

// GetUseridsOk returns a tuple with the Userids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchGetTopResultsRequestFilters) GetUseridsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Userids) {
		return nil, false
	}
	return o.Userids, true
}

// HasUserids returns a boolean if a field has been set.
func (o *CoreSearchGetTopResultsRequestFilters) HasUserids() bool {
	if o != nil && !IsNil(o.Userids) {
		return true
	}

	return false
}

// SetUserids gets a reference to the given []map[string]interface{} and assigns it to the Userids field.
func (o *CoreSearchGetTopResultsRequestFilters) SetUserids(v []map[string]interface{}) {
	o.Userids = v
}

func (o CoreSearchGetTopResultsRequestFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreSearchGetTopResultsRequestFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Areaids) {
		toSerialize["areaids"] = o.Areaids
	}
	if !IsNil(o.Cat) {
		toSerialize["cat"] = o.Cat
	}
	if !IsNil(o.Contextids) {
		toSerialize["contextids"] = o.Contextids
	}
	if !IsNil(o.Courseids) {
		toSerialize["courseids"] = o.Courseids
	}
	if !IsNil(o.Groupids) {
		toSerialize["groupids"] = o.Groupids
	}
	if !IsNil(o.Mycoursesonly) {
		toSerialize["mycoursesonly"] = o.Mycoursesonly
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Timeend) {
		toSerialize["timeend"] = o.Timeend
	}
	if !IsNil(o.Timestart) {
		toSerialize["timestart"] = o.Timestart
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Userids) {
		toSerialize["userids"] = o.Userids
	}
	return toSerialize, nil
}

type NullableCoreSearchGetTopResultsRequestFilters struct {
	value *CoreSearchGetTopResultsRequestFilters
	isSet bool
}

func (v NullableCoreSearchGetTopResultsRequestFilters) Get() *CoreSearchGetTopResultsRequestFilters {
	return v.value
}

func (v *NullableCoreSearchGetTopResultsRequestFilters) Set(val *CoreSearchGetTopResultsRequestFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreSearchGetTopResultsRequestFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreSearchGetTopResultsRequestFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreSearchGetTopResultsRequestFilters(val *CoreSearchGetTopResultsRequestFilters) *NullableCoreSearchGetTopResultsRequestFilters {
	return &NullableCoreSearchGetTopResultsRequestFilters{value: val, isSet: true}
}

func (v NullableCoreSearchGetTopResultsRequestFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreSearchGetTopResultsRequestFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


