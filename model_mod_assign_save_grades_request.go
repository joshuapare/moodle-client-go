/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModAssignSaveGradesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModAssignSaveGradesRequest{}

// ModAssignSaveGradesRequest struct for ModAssignSaveGradesRequest
type ModAssignSaveGradesRequest struct {
	// If true, this grade will be applied to all members of the group (for group assignments).
	Applytoall bool `json:"applytoall"`
	// The assignment id to operate on
	Assignmentid int32 `json:"assignmentid"`
	Grades []ModAssignSaveGradesRequestGradesInner `json:"grades"`
}

type _ModAssignSaveGradesRequest ModAssignSaveGradesRequest

// NewModAssignSaveGradesRequest instantiates a new ModAssignSaveGradesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModAssignSaveGradesRequest(applytoall bool, assignmentid int32, grades []ModAssignSaveGradesRequestGradesInner) *ModAssignSaveGradesRequest {
	this := ModAssignSaveGradesRequest{}
	this.Applytoall = applytoall
	this.Assignmentid = assignmentid
	this.Grades = grades
	return &this
}

// NewModAssignSaveGradesRequestWithDefaults instantiates a new ModAssignSaveGradesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModAssignSaveGradesRequestWithDefaults() *ModAssignSaveGradesRequest {
	this := ModAssignSaveGradesRequest{}
	return &this
}

// GetApplytoall returns the Applytoall field value
func (o *ModAssignSaveGradesRequest) GetApplytoall() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Applytoall
}

// GetApplytoallOk returns a tuple with the Applytoall field value
// and a boolean to check if the value has been set.
func (o *ModAssignSaveGradesRequest) GetApplytoallOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Applytoall, true
}

// SetApplytoall sets field value
func (o *ModAssignSaveGradesRequest) SetApplytoall(v bool) {
	o.Applytoall = v
}

// GetAssignmentid returns the Assignmentid field value
func (o *ModAssignSaveGradesRequest) GetAssignmentid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Assignmentid
}

// GetAssignmentidOk returns a tuple with the Assignmentid field value
// and a boolean to check if the value has been set.
func (o *ModAssignSaveGradesRequest) GetAssignmentidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assignmentid, true
}

// SetAssignmentid sets field value
func (o *ModAssignSaveGradesRequest) SetAssignmentid(v int32) {
	o.Assignmentid = v
}

// GetGrades returns the Grades field value
func (o *ModAssignSaveGradesRequest) GetGrades() []ModAssignSaveGradesRequestGradesInner {
	if o == nil {
		var ret []ModAssignSaveGradesRequestGradesInner
		return ret
	}

	return o.Grades
}

// GetGradesOk returns a tuple with the Grades field value
// and a boolean to check if the value has been set.
func (o *ModAssignSaveGradesRequest) GetGradesOk() ([]ModAssignSaveGradesRequestGradesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Grades, true
}

// SetGrades sets field value
func (o *ModAssignSaveGradesRequest) SetGrades(v []ModAssignSaveGradesRequestGradesInner) {
	o.Grades = v
}

func (o ModAssignSaveGradesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModAssignSaveGradesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applytoall"] = o.Applytoall
	toSerialize["assignmentid"] = o.Assignmentid
	toSerialize["grades"] = o.Grades
	return toSerialize, nil
}

func (o *ModAssignSaveGradesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applytoall",
		"assignmentid",
		"grades",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModAssignSaveGradesRequest := _ModAssignSaveGradesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModAssignSaveGradesRequest)

	if err != nil {
		return err
	}

	*o = ModAssignSaveGradesRequest(varModAssignSaveGradesRequest)

	return err
}

type NullableModAssignSaveGradesRequest struct {
	value *ModAssignSaveGradesRequest
	isSet bool
}

func (v NullableModAssignSaveGradesRequest) Get() *ModAssignSaveGradesRequest {
	return v.value
}

func (v *NullableModAssignSaveGradesRequest) Set(val *ModAssignSaveGradesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModAssignSaveGradesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModAssignSaveGradesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModAssignSaveGradesRequest(val *ModAssignSaveGradesRequest) *NullableModAssignSaveGradesRequest {
	return &NullableModAssignSaveGradesRequest{value: val, isSet: true}
}

func (v NullableModAssignSaveGradesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModAssignSaveGradesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


