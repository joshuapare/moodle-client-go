/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreEnrolGetPotentialUsersRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreEnrolGetPotentialUsersRequest{}

// CoreEnrolGetPotentialUsersRequest struct for CoreEnrolGetPotentialUsersRequest
type CoreEnrolGetPotentialUsersRequest struct {
	// course id
	Courseid int32 `json:"courseid"`
	// enrolment id
	Enrolid int32 `json:"enrolid"`
	// Page number
	Page int32 `json:"page"`
	// Number per page
	Perpage int32 `json:"perpage"`
	// query
	Search string `json:"search"`
	// find a match anywhere, or only at the beginning
	Searchanywhere bool `json:"searchanywhere"`
}

type _CoreEnrolGetPotentialUsersRequest CoreEnrolGetPotentialUsersRequest

// NewCoreEnrolGetPotentialUsersRequest instantiates a new CoreEnrolGetPotentialUsersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreEnrolGetPotentialUsersRequest(courseid int32, enrolid int32, page int32, perpage int32, search string, searchanywhere bool) *CoreEnrolGetPotentialUsersRequest {
	this := CoreEnrolGetPotentialUsersRequest{}
	this.Courseid = courseid
	this.Enrolid = enrolid
	this.Page = page
	this.Perpage = perpage
	this.Search = search
	this.Searchanywhere = searchanywhere
	return &this
}

// NewCoreEnrolGetPotentialUsersRequestWithDefaults instantiates a new CoreEnrolGetPotentialUsersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreEnrolGetPotentialUsersRequestWithDefaults() *CoreEnrolGetPotentialUsersRequest {
	this := CoreEnrolGetPotentialUsersRequest{}
	var enrolid int32 = null
	this.Enrolid = enrolid
	var page int32 = null
	this.Page = page
	var perpage int32 = null
	this.Perpage = perpage
	var search string = "null"
	this.Search = search
	var searchanywhere bool = null
	this.Searchanywhere = searchanywhere
	return &this
}

// GetCourseid returns the Courseid field value
func (o *CoreEnrolGetPotentialUsersRequest) GetCourseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolGetPotentialUsersRequest) GetCourseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Courseid, true
}

// SetCourseid sets field value
func (o *CoreEnrolGetPotentialUsersRequest) SetCourseid(v int32) {
	o.Courseid = v
}

// GetEnrolid returns the Enrolid field value
func (o *CoreEnrolGetPotentialUsersRequest) GetEnrolid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Enrolid
}

// GetEnrolidOk returns a tuple with the Enrolid field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolGetPotentialUsersRequest) GetEnrolidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enrolid, true
}

// SetEnrolid sets field value
func (o *CoreEnrolGetPotentialUsersRequest) SetEnrolid(v int32) {
	o.Enrolid = v
}

// GetPage returns the Page field value
func (o *CoreEnrolGetPotentialUsersRequest) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolGetPotentialUsersRequest) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *CoreEnrolGetPotentialUsersRequest) SetPage(v int32) {
	o.Page = v
}

// GetPerpage returns the Perpage field value
func (o *CoreEnrolGetPotentialUsersRequest) GetPerpage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Perpage
}

// GetPerpageOk returns a tuple with the Perpage field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolGetPotentialUsersRequest) GetPerpageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Perpage, true
}

// SetPerpage sets field value
func (o *CoreEnrolGetPotentialUsersRequest) SetPerpage(v int32) {
	o.Perpage = v
}

// GetSearch returns the Search field value
func (o *CoreEnrolGetPotentialUsersRequest) GetSearch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Search
}

// GetSearchOk returns a tuple with the Search field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolGetPotentialUsersRequest) GetSearchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Search, true
}

// SetSearch sets field value
func (o *CoreEnrolGetPotentialUsersRequest) SetSearch(v string) {
	o.Search = v
}

// GetSearchanywhere returns the Searchanywhere field value
func (o *CoreEnrolGetPotentialUsersRequest) GetSearchanywhere() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Searchanywhere
}

// GetSearchanywhereOk returns a tuple with the Searchanywhere field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolGetPotentialUsersRequest) GetSearchanywhereOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Searchanywhere, true
}

// SetSearchanywhere sets field value
func (o *CoreEnrolGetPotentialUsersRequest) SetSearchanywhere(v bool) {
	o.Searchanywhere = v
}

func (o CoreEnrolGetPotentialUsersRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreEnrolGetPotentialUsersRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["courseid"] = o.Courseid
	toSerialize["enrolid"] = o.Enrolid
	toSerialize["page"] = o.Page
	toSerialize["perpage"] = o.Perpage
	toSerialize["search"] = o.Search
	toSerialize["searchanywhere"] = o.Searchanywhere
	return toSerialize, nil
}

func (o *CoreEnrolGetPotentialUsersRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"courseid",
		"enrolid",
		"page",
		"perpage",
		"search",
		"searchanywhere",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreEnrolGetPotentialUsersRequest := _CoreEnrolGetPotentialUsersRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreEnrolGetPotentialUsersRequest)

	if err != nil {
		return err
	}

	*o = CoreEnrolGetPotentialUsersRequest(varCoreEnrolGetPotentialUsersRequest)

	return err
}

type NullableCoreEnrolGetPotentialUsersRequest struct {
	value *CoreEnrolGetPotentialUsersRequest
	isSet bool
}

func (v NullableCoreEnrolGetPotentialUsersRequest) Get() *CoreEnrolGetPotentialUsersRequest {
	return v.value
}

func (v *NullableCoreEnrolGetPotentialUsersRequest) Set(val *CoreEnrolGetPotentialUsersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreEnrolGetPotentialUsersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreEnrolGetPotentialUsersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreEnrolGetPotentialUsersRequest(val *CoreEnrolGetPotentialUsersRequest) *NullableCoreEnrolGetPotentialUsersRequest {
	return &NullableCoreEnrolGetPotentialUsersRequest{value: val, isSet: true}
}

func (v NullableCoreEnrolGetPotentialUsersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreEnrolGetPotentialUsersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


