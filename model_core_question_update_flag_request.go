/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreQuestionUpdateFlagRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreQuestionUpdateFlagRequest{}

// CoreQuestionUpdateFlagRequest struct for CoreQuestionUpdateFlagRequest
type CoreQuestionUpdateFlagRequest struct {
	// computed checksum with the last three arguments and                              the users username
	Checksum string `json:"checksum"`
	// the new state of the flag. true = flagged
	Newstate bool `json:"newstate"`
	// the question_attempt id
	Qaid int32 `json:"qaid"`
	// the question usage id.
	Qubaid int32 `json:"qubaid"`
	// the question id
	Questionid int32 `json:"questionid"`
	// the slot number within the usage
	Slot int32 `json:"slot"`
}

type _CoreQuestionUpdateFlagRequest CoreQuestionUpdateFlagRequest

// NewCoreQuestionUpdateFlagRequest instantiates a new CoreQuestionUpdateFlagRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreQuestionUpdateFlagRequest(checksum string, newstate bool, qaid int32, qubaid int32, questionid int32, slot int32) *CoreQuestionUpdateFlagRequest {
	this := CoreQuestionUpdateFlagRequest{}
	this.Checksum = checksum
	this.Newstate = newstate
	this.Qaid = qaid
	this.Qubaid = qubaid
	this.Questionid = questionid
	this.Slot = slot
	return &this
}

// NewCoreQuestionUpdateFlagRequestWithDefaults instantiates a new CoreQuestionUpdateFlagRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreQuestionUpdateFlagRequestWithDefaults() *CoreQuestionUpdateFlagRequest {
	this := CoreQuestionUpdateFlagRequest{}
	var checksum string = "null"
	this.Checksum = checksum
	var newstate bool = null
	this.Newstate = newstate
	var qaid int32 = null
	this.Qaid = qaid
	var qubaid int32 = null
	this.Qubaid = qubaid
	var questionid int32 = null
	this.Questionid = questionid
	var slot int32 = null
	this.Slot = slot
	return &this
}

// GetChecksum returns the Checksum field value
func (o *CoreQuestionUpdateFlagRequest) GetChecksum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionUpdateFlagRequest) GetChecksumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Checksum, true
}

// SetChecksum sets field value
func (o *CoreQuestionUpdateFlagRequest) SetChecksum(v string) {
	o.Checksum = v
}

// GetNewstate returns the Newstate field value
func (o *CoreQuestionUpdateFlagRequest) GetNewstate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Newstate
}

// GetNewstateOk returns a tuple with the Newstate field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionUpdateFlagRequest) GetNewstateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Newstate, true
}

// SetNewstate sets field value
func (o *CoreQuestionUpdateFlagRequest) SetNewstate(v bool) {
	o.Newstate = v
}

// GetQaid returns the Qaid field value
func (o *CoreQuestionUpdateFlagRequest) GetQaid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Qaid
}

// GetQaidOk returns a tuple with the Qaid field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionUpdateFlagRequest) GetQaidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qaid, true
}

// SetQaid sets field value
func (o *CoreQuestionUpdateFlagRequest) SetQaid(v int32) {
	o.Qaid = v
}

// GetQubaid returns the Qubaid field value
func (o *CoreQuestionUpdateFlagRequest) GetQubaid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Qubaid
}

// GetQubaidOk returns a tuple with the Qubaid field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionUpdateFlagRequest) GetQubaidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qubaid, true
}

// SetQubaid sets field value
func (o *CoreQuestionUpdateFlagRequest) SetQubaid(v int32) {
	o.Qubaid = v
}

// GetQuestionid returns the Questionid field value
func (o *CoreQuestionUpdateFlagRequest) GetQuestionid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Questionid
}

// GetQuestionidOk returns a tuple with the Questionid field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionUpdateFlagRequest) GetQuestionidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Questionid, true
}

// SetQuestionid sets field value
func (o *CoreQuestionUpdateFlagRequest) SetQuestionid(v int32) {
	o.Questionid = v
}

// GetSlot returns the Slot field value
func (o *CoreQuestionUpdateFlagRequest) GetSlot() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Slot
}

// GetSlotOk returns a tuple with the Slot field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionUpdateFlagRequest) GetSlotOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slot, true
}

// SetSlot sets field value
func (o *CoreQuestionUpdateFlagRequest) SetSlot(v int32) {
	o.Slot = v
}

func (o CoreQuestionUpdateFlagRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreQuestionUpdateFlagRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["checksum"] = o.Checksum
	toSerialize["newstate"] = o.Newstate
	toSerialize["qaid"] = o.Qaid
	toSerialize["qubaid"] = o.Qubaid
	toSerialize["questionid"] = o.Questionid
	toSerialize["slot"] = o.Slot
	return toSerialize, nil
}

func (o *CoreQuestionUpdateFlagRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"checksum",
		"newstate",
		"qaid",
		"qubaid",
		"questionid",
		"slot",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreQuestionUpdateFlagRequest := _CoreQuestionUpdateFlagRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreQuestionUpdateFlagRequest)

	if err != nil {
		return err
	}

	*o = CoreQuestionUpdateFlagRequest(varCoreQuestionUpdateFlagRequest)

	return err
}

type NullableCoreQuestionUpdateFlagRequest struct {
	value *CoreQuestionUpdateFlagRequest
	isSet bool
}

func (v NullableCoreQuestionUpdateFlagRequest) Get() *CoreQuestionUpdateFlagRequest {
	return v.value
}

func (v *NullableCoreQuestionUpdateFlagRequest) Set(val *CoreQuestionUpdateFlagRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreQuestionUpdateFlagRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreQuestionUpdateFlagRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreQuestionUpdateFlagRequest(val *CoreQuestionUpdateFlagRequest) *NullableCoreQuestionUpdateFlagRequest {
	return &NullableCoreQuestionUpdateFlagRequest{value: val, isSet: true}
}

func (v NullableCoreQuestionUpdateFlagRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreQuestionUpdateFlagRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


