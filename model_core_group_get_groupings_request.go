/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreGroupGetGroupingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreGroupGetGroupingsRequest{}

// CoreGroupGetGroupingsRequest struct for CoreGroupGetGroupingsRequest
type CoreGroupGetGroupingsRequest struct {
	Groupingids []map[string]interface{} `json:"groupingids"`
	// return associated groups
	Returngroups *bool `json:"returngroups,omitempty"`
}

type _CoreGroupGetGroupingsRequest CoreGroupGetGroupingsRequest

// NewCoreGroupGetGroupingsRequest instantiates a new CoreGroupGetGroupingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreGroupGetGroupingsRequest(groupingids []map[string]interface{}) *CoreGroupGetGroupingsRequest {
	this := CoreGroupGetGroupingsRequest{}
	this.Groupingids = groupingids
	var returngroups bool = 0
	this.Returngroups = &returngroups
	return &this
}

// NewCoreGroupGetGroupingsRequestWithDefaults instantiates a new CoreGroupGetGroupingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreGroupGetGroupingsRequestWithDefaults() *CoreGroupGetGroupingsRequest {
	this := CoreGroupGetGroupingsRequest{}
	var returngroups bool = 0
	this.Returngroups = &returngroups
	return &this
}

// GetGroupingids returns the Groupingids field value
func (o *CoreGroupGetGroupingsRequest) GetGroupingids() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Groupingids
}

// GetGroupingidsOk returns a tuple with the Groupingids field value
// and a boolean to check if the value has been set.
func (o *CoreGroupGetGroupingsRequest) GetGroupingidsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groupingids, true
}

// SetGroupingids sets field value
func (o *CoreGroupGetGroupingsRequest) SetGroupingids(v []map[string]interface{}) {
	o.Groupingids = v
}

// GetReturngroups returns the Returngroups field value if set, zero value otherwise.
func (o *CoreGroupGetGroupingsRequest) GetReturngroups() bool {
	if o == nil || IsNil(o.Returngroups) {
		var ret bool
		return ret
	}
	return *o.Returngroups
}

// GetReturngroupsOk returns a tuple with the Returngroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreGroupGetGroupingsRequest) GetReturngroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.Returngroups) {
		return nil, false
	}
	return o.Returngroups, true
}

// HasReturngroups returns a boolean if a field has been set.
func (o *CoreGroupGetGroupingsRequest) HasReturngroups() bool {
	if o != nil && !IsNil(o.Returngroups) {
		return true
	}

	return false
}

// SetReturngroups gets a reference to the given bool and assigns it to the Returngroups field.
func (o *CoreGroupGetGroupingsRequest) SetReturngroups(v bool) {
	o.Returngroups = &v
}

func (o CoreGroupGetGroupingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreGroupGetGroupingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupingids"] = o.Groupingids
	if !IsNil(o.Returngroups) {
		toSerialize["returngroups"] = o.Returngroups
	}
	return toSerialize, nil
}

func (o *CoreGroupGetGroupingsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupingids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreGroupGetGroupingsRequest := _CoreGroupGetGroupingsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreGroupGetGroupingsRequest)

	if err != nil {
		return err
	}

	*o = CoreGroupGetGroupingsRequest(varCoreGroupGetGroupingsRequest)

	return err
}

type NullableCoreGroupGetGroupingsRequest struct {
	value *CoreGroupGetGroupingsRequest
	isSet bool
}

func (v NullableCoreGroupGetGroupingsRequest) Get() *CoreGroupGetGroupingsRequest {
	return v.value
}

func (v *NullableCoreGroupGetGroupingsRequest) Set(val *CoreGroupGetGroupingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreGroupGetGroupingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreGroupGetGroupingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreGroupGetGroupingsRequest(val *CoreGroupGetGroupingsRequest) *NullableCoreGroupGetGroupingsRequest {
	return &NullableCoreGroupGetGroupingsRequest{value: val, isSet: true}
}

func (v NullableCoreGroupGetGroupingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreGroupGetGroupingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


