/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreChangeEditmodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreChangeEditmodeRequest{}

// CoreChangeEditmodeRequest struct for CoreChangeEditmodeRequest
type CoreChangeEditmodeRequest struct {
	// Page context id
	Context int32 `json:"context"`
	// Set edit mode to
	Setmode bool `json:"setmode"`
}

type _CoreChangeEditmodeRequest CoreChangeEditmodeRequest

// NewCoreChangeEditmodeRequest instantiates a new CoreChangeEditmodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreChangeEditmodeRequest(context int32, setmode bool) *CoreChangeEditmodeRequest {
	this := CoreChangeEditmodeRequest{}
	this.Context = context
	this.Setmode = setmode
	return &this
}

// NewCoreChangeEditmodeRequestWithDefaults instantiates a new CoreChangeEditmodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreChangeEditmodeRequestWithDefaults() *CoreChangeEditmodeRequest {
	this := CoreChangeEditmodeRequest{}
	var context int32 = null
	this.Context = context
	var setmode bool = null
	this.Setmode = setmode
	return &this
}

// GetContext returns the Context field value
func (o *CoreChangeEditmodeRequest) GetContext() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *CoreChangeEditmodeRequest) GetContextOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *CoreChangeEditmodeRequest) SetContext(v int32) {
	o.Context = v
}

// GetSetmode returns the Setmode field value
func (o *CoreChangeEditmodeRequest) GetSetmode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Setmode
}

// GetSetmodeOk returns a tuple with the Setmode field value
// and a boolean to check if the value has been set.
func (o *CoreChangeEditmodeRequest) GetSetmodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Setmode, true
}

// SetSetmode sets field value
func (o *CoreChangeEditmodeRequest) SetSetmode(v bool) {
	o.Setmode = v
}

func (o CoreChangeEditmodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreChangeEditmodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["setmode"] = o.Setmode
	return toSerialize, nil
}

func (o *CoreChangeEditmodeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"setmode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreChangeEditmodeRequest := _CoreChangeEditmodeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreChangeEditmodeRequest)

	if err != nil {
		return err
	}

	*o = CoreChangeEditmodeRequest(varCoreChangeEditmodeRequest)

	return err
}

type NullableCoreChangeEditmodeRequest struct {
	value *CoreChangeEditmodeRequest
	isSet bool
}

func (v NullableCoreChangeEditmodeRequest) Get() *CoreChangeEditmodeRequest {
	return v.value
}

func (v *NullableCoreChangeEditmodeRequest) Set(val *CoreChangeEditmodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreChangeEditmodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreChangeEditmodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreChangeEditmodeRequest(val *CoreChangeEditmodeRequest) *NullableCoreChangeEditmodeRequest {
	return &NullableCoreChangeEditmodeRequest{value: val, isSet: true}
}

func (v NullableCoreChangeEditmodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreChangeEditmodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


