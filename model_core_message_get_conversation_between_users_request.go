/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreMessageGetConversationBetweenUsersRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreMessageGetConversationBetweenUsersRequest{}

// CoreMessageGetConversationBetweenUsersRequest struct for CoreMessageGetConversationBetweenUsersRequest
type CoreMessageGetConversationBetweenUsersRequest struct {
	// Include contact requests in the members
	Includecontactrequests bool `json:"includecontactrequests"`
	// Include privacy info in the members
	Includeprivacyinfo bool `json:"includeprivacyinfo"`
	// Limit for number of members
	Memberlimit *int32 `json:"memberlimit,omitempty"`
	// Offset for member list
	Memberoffset *int32 `json:"memberoffset,omitempty"`
	// Limit for number of messages
	Messagelimit *int32 `json:"messagelimit,omitempty"`
	// Offset for messages list
	Messageoffset *int32 `json:"messageoffset,omitempty"`
	// Order messages by newest first
	Newestmessagesfirst *bool `json:"newestmessagesfirst,omitempty"`
	// The other user id
	Otheruserid int32 `json:"otheruserid"`
	// The id of the user who we are viewing conversations for
	Userid int32 `json:"userid"`
}

type _CoreMessageGetConversationBetweenUsersRequest CoreMessageGetConversationBetweenUsersRequest

// NewCoreMessageGetConversationBetweenUsersRequest instantiates a new CoreMessageGetConversationBetweenUsersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreMessageGetConversationBetweenUsersRequest(includecontactrequests bool, includeprivacyinfo bool, otheruserid int32, userid int32) *CoreMessageGetConversationBetweenUsersRequest {
	this := CoreMessageGetConversationBetweenUsersRequest{}
	this.Includecontactrequests = includecontactrequests
	this.Includeprivacyinfo = includeprivacyinfo
	var memberlimit int32 = 0
	this.Memberlimit = &memberlimit
	var memberoffset int32 = 0
	this.Memberoffset = &memberoffset
	var messagelimit int32 = 100
	this.Messagelimit = &messagelimit
	var messageoffset int32 = 0
	this.Messageoffset = &messageoffset
	var newestmessagesfirst bool = true
	this.Newestmessagesfirst = &newestmessagesfirst
	this.Otheruserid = otheruserid
	this.Userid = userid
	return &this
}

// NewCoreMessageGetConversationBetweenUsersRequestWithDefaults instantiates a new CoreMessageGetConversationBetweenUsersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreMessageGetConversationBetweenUsersRequestWithDefaults() *CoreMessageGetConversationBetweenUsersRequest {
	this := CoreMessageGetConversationBetweenUsersRequest{}
	var memberlimit int32 = 0
	this.Memberlimit = &memberlimit
	var memberoffset int32 = 0
	this.Memberoffset = &memberoffset
	var messagelimit int32 = 100
	this.Messagelimit = &messagelimit
	var messageoffset int32 = 0
	this.Messageoffset = &messageoffset
	var newestmessagesfirst bool = true
	this.Newestmessagesfirst = &newestmessagesfirst
	var otheruserid int32 = null
	this.Otheruserid = otheruserid
	return &this
}

// GetIncludecontactrequests returns the Includecontactrequests field value
func (o *CoreMessageGetConversationBetweenUsersRequest) GetIncludecontactrequests() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Includecontactrequests
}

// GetIncludecontactrequestsOk returns a tuple with the Includecontactrequests field value
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetIncludecontactrequestsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Includecontactrequests, true
}

// SetIncludecontactrequests sets field value
func (o *CoreMessageGetConversationBetweenUsersRequest) SetIncludecontactrequests(v bool) {
	o.Includecontactrequests = v
}

// GetIncludeprivacyinfo returns the Includeprivacyinfo field value
func (o *CoreMessageGetConversationBetweenUsersRequest) GetIncludeprivacyinfo() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Includeprivacyinfo
}

// GetIncludeprivacyinfoOk returns a tuple with the Includeprivacyinfo field value
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetIncludeprivacyinfoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Includeprivacyinfo, true
}

// SetIncludeprivacyinfo sets field value
func (o *CoreMessageGetConversationBetweenUsersRequest) SetIncludeprivacyinfo(v bool) {
	o.Includeprivacyinfo = v
}

// GetMemberlimit returns the Memberlimit field value if set, zero value otherwise.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetMemberlimit() int32 {
	if o == nil || IsNil(o.Memberlimit) {
		var ret int32
		return ret
	}
	return *o.Memberlimit
}

// GetMemberlimitOk returns a tuple with the Memberlimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetMemberlimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Memberlimit) {
		return nil, false
	}
	return o.Memberlimit, true
}

// HasMemberlimit returns a boolean if a field has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) HasMemberlimit() bool {
	if o != nil && !IsNil(o.Memberlimit) {
		return true
	}

	return false
}

// SetMemberlimit gets a reference to the given int32 and assigns it to the Memberlimit field.
func (o *CoreMessageGetConversationBetweenUsersRequest) SetMemberlimit(v int32) {
	o.Memberlimit = &v
}

// GetMemberoffset returns the Memberoffset field value if set, zero value otherwise.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetMemberoffset() int32 {
	if o == nil || IsNil(o.Memberoffset) {
		var ret int32
		return ret
	}
	return *o.Memberoffset
}

// GetMemberoffsetOk returns a tuple with the Memberoffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetMemberoffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Memberoffset) {
		return nil, false
	}
	return o.Memberoffset, true
}

// HasMemberoffset returns a boolean if a field has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) HasMemberoffset() bool {
	if o != nil && !IsNil(o.Memberoffset) {
		return true
	}

	return false
}

// SetMemberoffset gets a reference to the given int32 and assigns it to the Memberoffset field.
func (o *CoreMessageGetConversationBetweenUsersRequest) SetMemberoffset(v int32) {
	o.Memberoffset = &v
}

// GetMessagelimit returns the Messagelimit field value if set, zero value otherwise.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetMessagelimit() int32 {
	if o == nil || IsNil(o.Messagelimit) {
		var ret int32
		return ret
	}
	return *o.Messagelimit
}

// GetMessagelimitOk returns a tuple with the Messagelimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetMessagelimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Messagelimit) {
		return nil, false
	}
	return o.Messagelimit, true
}

// HasMessagelimit returns a boolean if a field has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) HasMessagelimit() bool {
	if o != nil && !IsNil(o.Messagelimit) {
		return true
	}

	return false
}

// SetMessagelimit gets a reference to the given int32 and assigns it to the Messagelimit field.
func (o *CoreMessageGetConversationBetweenUsersRequest) SetMessagelimit(v int32) {
	o.Messagelimit = &v
}

// GetMessageoffset returns the Messageoffset field value if set, zero value otherwise.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetMessageoffset() int32 {
	if o == nil || IsNil(o.Messageoffset) {
		var ret int32
		return ret
	}
	return *o.Messageoffset
}

// GetMessageoffsetOk returns a tuple with the Messageoffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetMessageoffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Messageoffset) {
		return nil, false
	}
	return o.Messageoffset, true
}

// HasMessageoffset returns a boolean if a field has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) HasMessageoffset() bool {
	if o != nil && !IsNil(o.Messageoffset) {
		return true
	}

	return false
}

// SetMessageoffset gets a reference to the given int32 and assigns it to the Messageoffset field.
func (o *CoreMessageGetConversationBetweenUsersRequest) SetMessageoffset(v int32) {
	o.Messageoffset = &v
}

// GetNewestmessagesfirst returns the Newestmessagesfirst field value if set, zero value otherwise.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetNewestmessagesfirst() bool {
	if o == nil || IsNil(o.Newestmessagesfirst) {
		var ret bool
		return ret
	}
	return *o.Newestmessagesfirst
}

// GetNewestmessagesfirstOk returns a tuple with the Newestmessagesfirst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetNewestmessagesfirstOk() (*bool, bool) {
	if o == nil || IsNil(o.Newestmessagesfirst) {
		return nil, false
	}
	return o.Newestmessagesfirst, true
}

// HasNewestmessagesfirst returns a boolean if a field has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) HasNewestmessagesfirst() bool {
	if o != nil && !IsNil(o.Newestmessagesfirst) {
		return true
	}

	return false
}

// SetNewestmessagesfirst gets a reference to the given bool and assigns it to the Newestmessagesfirst field.
func (o *CoreMessageGetConversationBetweenUsersRequest) SetNewestmessagesfirst(v bool) {
	o.Newestmessagesfirst = &v
}

// GetOtheruserid returns the Otheruserid field value
func (o *CoreMessageGetConversationBetweenUsersRequest) GetOtheruserid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Otheruserid
}

// GetOtheruseridOk returns a tuple with the Otheruserid field value
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetOtheruseridOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Otheruserid, true
}

// SetOtheruserid sets field value
func (o *CoreMessageGetConversationBetweenUsersRequest) SetOtheruserid(v int32) {
	o.Otheruserid = v
}

// GetUserid returns the Userid field value
func (o *CoreMessageGetConversationBetweenUsersRequest) GetUserid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Userid
}

// GetUseridOk returns a tuple with the Userid field value
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationBetweenUsersRequest) GetUseridOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Userid, true
}

// SetUserid sets field value
func (o *CoreMessageGetConversationBetweenUsersRequest) SetUserid(v int32) {
	o.Userid = v
}

func (o CoreMessageGetConversationBetweenUsersRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreMessageGetConversationBetweenUsersRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["includecontactrequests"] = o.Includecontactrequests
	toSerialize["includeprivacyinfo"] = o.Includeprivacyinfo
	if !IsNil(o.Memberlimit) {
		toSerialize["memberlimit"] = o.Memberlimit
	}
	if !IsNil(o.Memberoffset) {
		toSerialize["memberoffset"] = o.Memberoffset
	}
	if !IsNil(o.Messagelimit) {
		toSerialize["messagelimit"] = o.Messagelimit
	}
	if !IsNil(o.Messageoffset) {
		toSerialize["messageoffset"] = o.Messageoffset
	}
	if !IsNil(o.Newestmessagesfirst) {
		toSerialize["newestmessagesfirst"] = o.Newestmessagesfirst
	}
	toSerialize["otheruserid"] = o.Otheruserid
	toSerialize["userid"] = o.Userid
	return toSerialize, nil
}

func (o *CoreMessageGetConversationBetweenUsersRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"includecontactrequests",
		"includeprivacyinfo",
		"otheruserid",
		"userid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreMessageGetConversationBetweenUsersRequest := _CoreMessageGetConversationBetweenUsersRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreMessageGetConversationBetweenUsersRequest)

	if err != nil {
		return err
	}

	*o = CoreMessageGetConversationBetweenUsersRequest(varCoreMessageGetConversationBetweenUsersRequest)

	return err
}

type NullableCoreMessageGetConversationBetweenUsersRequest struct {
	value *CoreMessageGetConversationBetweenUsersRequest
	isSet bool
}

func (v NullableCoreMessageGetConversationBetweenUsersRequest) Get() *CoreMessageGetConversationBetweenUsersRequest {
	return v.value
}

func (v *NullableCoreMessageGetConversationBetweenUsersRequest) Set(val *CoreMessageGetConversationBetweenUsersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreMessageGetConversationBetweenUsersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreMessageGetConversationBetweenUsersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreMessageGetConversationBetweenUsersRequest(val *CoreMessageGetConversationBetweenUsersRequest) *NullableCoreMessageGetConversationBetweenUsersRequest {
	return &NullableCoreMessageGetConversationBetweenUsersRequest{value: val, isSet: true}
}

func (v NullableCoreMessageGetConversationBetweenUsersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreMessageGetConversationBetweenUsersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


