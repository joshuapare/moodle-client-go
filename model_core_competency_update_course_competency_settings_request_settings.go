/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCompetencyUpdateCourseCompetencySettingsRequestSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCompetencyUpdateCourseCompetencySettingsRequestSettings{}

// CoreCompetencyUpdateCourseCompetencySettingsRequestSettings struct for CoreCompetencyUpdateCourseCompetencySettingsRequestSettings
type CoreCompetencyUpdateCourseCompetencySettingsRequestSettings struct {
	// New value of the setting
	Pushratingstouserplans bool `json:"pushratingstouserplans"`
}

type _CoreCompetencyUpdateCourseCompetencySettingsRequestSettings CoreCompetencyUpdateCourseCompetencySettingsRequestSettings

// NewCoreCompetencyUpdateCourseCompetencySettingsRequestSettings instantiates a new CoreCompetencyUpdateCourseCompetencySettingsRequestSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCompetencyUpdateCourseCompetencySettingsRequestSettings(pushratingstouserplans bool) *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings {
	this := CoreCompetencyUpdateCourseCompetencySettingsRequestSettings{}
	this.Pushratingstouserplans = pushratingstouserplans
	return &this
}

// NewCoreCompetencyUpdateCourseCompetencySettingsRequestSettingsWithDefaults instantiates a new CoreCompetencyUpdateCourseCompetencySettingsRequestSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCompetencyUpdateCourseCompetencySettingsRequestSettingsWithDefaults() *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings {
	this := CoreCompetencyUpdateCourseCompetencySettingsRequestSettings{}
	var pushratingstouserplans bool = null
	this.Pushratingstouserplans = pushratingstouserplans
	return &this
}

// GetPushratingstouserplans returns the Pushratingstouserplans field value
func (o *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings) GetPushratingstouserplans() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pushratingstouserplans
}

// GetPushratingstouserplansOk returns a tuple with the Pushratingstouserplans field value
// and a boolean to check if the value has been set.
func (o *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings) GetPushratingstouserplansOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pushratingstouserplans, true
}

// SetPushratingstouserplans sets field value
func (o *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings) SetPushratingstouserplans(v bool) {
	o.Pushratingstouserplans = v
}

func (o CoreCompetencyUpdateCourseCompetencySettingsRequestSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCompetencyUpdateCourseCompetencySettingsRequestSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pushratingstouserplans"] = o.Pushratingstouserplans
	return toSerialize, nil
}

func (o *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pushratingstouserplans",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCompetencyUpdateCourseCompetencySettingsRequestSettings := _CoreCompetencyUpdateCourseCompetencySettingsRequestSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCompetencyUpdateCourseCompetencySettingsRequestSettings)

	if err != nil {
		return err
	}

	*o = CoreCompetencyUpdateCourseCompetencySettingsRequestSettings(varCoreCompetencyUpdateCourseCompetencySettingsRequestSettings)

	return err
}

type NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings struct {
	value *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings
	isSet bool
}

func (v NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings) Get() *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings {
	return v.value
}

func (v *NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings) Set(val *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings(val *CoreCompetencyUpdateCourseCompetencySettingsRequestSettings) *NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings {
	return &NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings{value: val, isSet: true}
}

func (v NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCompetencyUpdateCourseCompetencySettingsRequestSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


