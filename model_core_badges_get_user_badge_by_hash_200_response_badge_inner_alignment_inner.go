/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner{}

// CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner struct for CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner
type CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner struct {
	// Badge id
	Badgeid *int32 `json:"badgeid,omitempty"`
	// Alignment id
	Id *int32 `json:"id,omitempty"`
	// Target code
	TargetCode *string `json:"targetCode,omitempty"`
	// Target description
	TargetDescription *string `json:"targetDescription,omitempty"`
	// Target framework
	TargetFramework *string `json:"targetFramework,omitempty"`
	// Target name
	TargetName *string `json:"targetName,omitempty"`
	// Target URL
	TargetUrl *string `json:"targetUrl,omitempty"`
}

// NewCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner instantiates a new CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner() *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner {
	this := CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner{}
	var badgeid int32 = null
	this.Badgeid = &badgeid
	var id int32 = null
	this.Id = &id
	var targetCode string = "null"
	this.TargetCode = &targetCode
	var targetDescription string = "null"
	this.TargetDescription = &targetDescription
	var targetFramework string = "null"
	this.TargetFramework = &targetFramework
	var targetName string = "null"
	this.TargetName = &targetName
	var targetUrl string = "null"
	this.TargetUrl = &targetUrl
	return &this
}

// NewCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInnerWithDefaults instantiates a new CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInnerWithDefaults() *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner {
	this := CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner{}
	var badgeid int32 = null
	this.Badgeid = &badgeid
	var id int32 = null
	this.Id = &id
	var targetCode string = "null"
	this.TargetCode = &targetCode
	var targetDescription string = "null"
	this.TargetDescription = &targetDescription
	var targetFramework string = "null"
	this.TargetFramework = &targetFramework
	var targetName string = "null"
	this.TargetName = &targetName
	var targetUrl string = "null"
	this.TargetUrl = &targetUrl
	return &this
}

// GetBadgeid returns the Badgeid field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetBadgeid() int32 {
	if o == nil || IsNil(o.Badgeid) {
		var ret int32
		return ret
	}
	return *o.Badgeid
}

// GetBadgeidOk returns a tuple with the Badgeid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetBadgeidOk() (*int32, bool) {
	if o == nil || IsNil(o.Badgeid) {
		return nil, false
	}
	return o.Badgeid, true
}

// HasBadgeid returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) HasBadgeid() bool {
	if o != nil && !IsNil(o.Badgeid) {
		return true
	}

	return false
}

// SetBadgeid gets a reference to the given int32 and assigns it to the Badgeid field.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) SetBadgeid(v int32) {
	o.Badgeid = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) SetId(v int32) {
	o.Id = &v
}

// GetTargetCode returns the TargetCode field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetCode() string {
	if o == nil || IsNil(o.TargetCode) {
		var ret string
		return ret
	}
	return *o.TargetCode
}

// GetTargetCodeOk returns a tuple with the TargetCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetCode) {
		return nil, false
	}
	return o.TargetCode, true
}

// HasTargetCode returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) HasTargetCode() bool {
	if o != nil && !IsNil(o.TargetCode) {
		return true
	}

	return false
}

// SetTargetCode gets a reference to the given string and assigns it to the TargetCode field.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) SetTargetCode(v string) {
	o.TargetCode = &v
}

// GetTargetDescription returns the TargetDescription field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetDescription() string {
	if o == nil || IsNil(o.TargetDescription) {
		var ret string
		return ret
	}
	return *o.TargetDescription
}

// GetTargetDescriptionOk returns a tuple with the TargetDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TargetDescription) {
		return nil, false
	}
	return o.TargetDescription, true
}

// HasTargetDescription returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) HasTargetDescription() bool {
	if o != nil && !IsNil(o.TargetDescription) {
		return true
	}

	return false
}

// SetTargetDescription gets a reference to the given string and assigns it to the TargetDescription field.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) SetTargetDescription(v string) {
	o.TargetDescription = &v
}

// GetTargetFramework returns the TargetFramework field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetFramework() string {
	if o == nil || IsNil(o.TargetFramework) {
		var ret string
		return ret
	}
	return *o.TargetFramework
}

// GetTargetFrameworkOk returns a tuple with the TargetFramework field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetFrameworkOk() (*string, bool) {
	if o == nil || IsNil(o.TargetFramework) {
		return nil, false
	}
	return o.TargetFramework, true
}

// HasTargetFramework returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) HasTargetFramework() bool {
	if o != nil && !IsNil(o.TargetFramework) {
		return true
	}

	return false
}

// SetTargetFramework gets a reference to the given string and assigns it to the TargetFramework field.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) SetTargetFramework(v string) {
	o.TargetFramework = &v
}

// GetTargetName returns the TargetName field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetName() string {
	if o == nil || IsNil(o.TargetName) {
		var ret string
		return ret
	}
	return *o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetName) {
		return nil, false
	}
	return o.TargetName, true
}

// HasTargetName returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) HasTargetName() bool {
	if o != nil && !IsNil(o.TargetName) {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given string and assigns it to the TargetName field.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) SetTargetName(v string) {
	o.TargetName = &v
}

// GetTargetUrl returns the TargetUrl field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetUrl() string {
	if o == nil || IsNil(o.TargetUrl) {
		var ret string
		return ret
	}
	return *o.TargetUrl
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) GetTargetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TargetUrl) {
		return nil, false
	}
	return o.TargetUrl, true
}

// HasTargetUrl returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) HasTargetUrl() bool {
	if o != nil && !IsNil(o.TargetUrl) {
		return true
	}

	return false
}

// SetTargetUrl gets a reference to the given string and assigns it to the TargetUrl field.
func (o *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) SetTargetUrl(v string) {
	o.TargetUrl = &v
}

func (o CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Badgeid) {
		toSerialize["badgeid"] = o.Badgeid
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TargetCode) {
		toSerialize["targetCode"] = o.TargetCode
	}
	if !IsNil(o.TargetDescription) {
		toSerialize["targetDescription"] = o.TargetDescription
	}
	if !IsNil(o.TargetFramework) {
		toSerialize["targetFramework"] = o.TargetFramework
	}
	if !IsNil(o.TargetName) {
		toSerialize["targetName"] = o.TargetName
	}
	if !IsNil(o.TargetUrl) {
		toSerialize["targetUrl"] = o.TargetUrl
	}
	return toSerialize, nil
}

type NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner struct {
	value *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner
	isSet bool
}

func (v NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) Get() *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner {
	return v.value
}

func (v *NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) Set(val *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner(val *CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) *NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner {
	return &NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner{value: val, isSet: true}
}

func (v NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


