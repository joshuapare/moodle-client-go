/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency{}

// ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency struct for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency
type ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency struct {
	Competency CoreCompetencyCreateCompetency200Response `json:"competency"`
	Comppath ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath `json:"comppath"`
	Framework CoreCompetencyDuplicateCompetencyFramework200Response `json:"framework"`
	// hascourses
	Hascourses bool `json:"hascourses"`
	// hasrelatedcompetencies
	Hasrelatedcompetencies bool `json:"hasrelatedcompetencies"`
	Linkedcourses []CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner `json:"linkedcourses"`
	// pluginbaseurl
	Pluginbaseurl string `json:"pluginbaseurl"`
	Relatedcompetencies []CoreCompetencyReadUserEvidence200ResponseCompetenciesInner `json:"relatedcompetencies"`
	// scaleconfiguration
	Scaleconfiguration string `json:"scaleconfiguration"`
	// scaleid
	Scaleid int32 `json:"scaleid"`
	// taxonomyterm
	Taxonomyterm string `json:"taxonomyterm"`
}

type _ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency

// NewReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency instantiates a new ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency(competency CoreCompetencyCreateCompetency200Response, comppath ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath, framework CoreCompetencyDuplicateCompetencyFramework200Response, hascourses bool, hasrelatedcompetencies bool, linkedcourses []CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner, pluginbaseurl string, relatedcompetencies []CoreCompetencyReadUserEvidence200ResponseCompetenciesInner, scaleconfiguration string, scaleid int32, taxonomyterm string) *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency {
	this := ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency{}
	this.Competency = competency
	this.Comppath = comppath
	this.Framework = framework
	this.Hascourses = hascourses
	this.Hasrelatedcompetencies = hasrelatedcompetencies
	this.Linkedcourses = linkedcourses
	this.Pluginbaseurl = pluginbaseurl
	this.Relatedcompetencies = relatedcompetencies
	this.Scaleconfiguration = scaleconfiguration
	this.Scaleid = scaleid
	this.Taxonomyterm = taxonomyterm
	return &this
}

// NewReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyWithDefaults instantiates a new ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyWithDefaults() *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency {
	this := ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency{}
	var hascourses bool = null
	this.Hascourses = hascourses
	var hasrelatedcompetencies bool = null
	this.Hasrelatedcompetencies = hasrelatedcompetencies
	var taxonomyterm string = "null"
	this.Taxonomyterm = taxonomyterm
	return &this
}

// GetCompetency returns the Competency field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetCompetency() CoreCompetencyCreateCompetency200Response {
	if o == nil {
		var ret CoreCompetencyCreateCompetency200Response
		return ret
	}

	return o.Competency
}

// GetCompetencyOk returns a tuple with the Competency field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetCompetencyOk() (*CoreCompetencyCreateCompetency200Response, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Competency, true
}

// SetCompetency sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetCompetency(v CoreCompetencyCreateCompetency200Response) {
	o.Competency = v
}

// GetComppath returns the Comppath field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetComppath() ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath {
	if o == nil {
		var ret ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath
		return ret
	}

	return o.Comppath
}

// GetComppathOk returns a tuple with the Comppath field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetComppathOk() (*ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comppath, true
}

// SetComppath sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetComppath(v ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath) {
	o.Comppath = v
}

// GetFramework returns the Framework field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetFramework() CoreCompetencyDuplicateCompetencyFramework200Response {
	if o == nil {
		var ret CoreCompetencyDuplicateCompetencyFramework200Response
		return ret
	}

	return o.Framework
}

// GetFrameworkOk returns a tuple with the Framework field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetFrameworkOk() (*CoreCompetencyDuplicateCompetencyFramework200Response, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Framework, true
}

// SetFramework sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetFramework(v CoreCompetencyDuplicateCompetencyFramework200Response) {
	o.Framework = v
}

// GetHascourses returns the Hascourses field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetHascourses() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hascourses
}

// GetHascoursesOk returns a tuple with the Hascourses field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetHascoursesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hascourses, true
}

// SetHascourses sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetHascourses(v bool) {
	o.Hascourses = v
}

// GetHasrelatedcompetencies returns the Hasrelatedcompetencies field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetHasrelatedcompetencies() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hasrelatedcompetencies
}

// GetHasrelatedcompetenciesOk returns a tuple with the Hasrelatedcompetencies field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetHasrelatedcompetenciesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hasrelatedcompetencies, true
}

// SetHasrelatedcompetencies sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetHasrelatedcompetencies(v bool) {
	o.Hasrelatedcompetencies = v
}

// GetLinkedcourses returns the Linkedcourses field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetLinkedcourses() []CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner {
	if o == nil {
		var ret []CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner
		return ret
	}

	return o.Linkedcourses
}

// GetLinkedcoursesOk returns a tuple with the Linkedcourses field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetLinkedcoursesOk() ([]CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Linkedcourses, true
}

// SetLinkedcourses sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetLinkedcourses(v []CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner) {
	o.Linkedcourses = v
}

// GetPluginbaseurl returns the Pluginbaseurl field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetPluginbaseurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pluginbaseurl
}

// GetPluginbaseurlOk returns a tuple with the Pluginbaseurl field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetPluginbaseurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pluginbaseurl, true
}

// SetPluginbaseurl sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetPluginbaseurl(v string) {
	o.Pluginbaseurl = v
}

// GetRelatedcompetencies returns the Relatedcompetencies field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetRelatedcompetencies() []CoreCompetencyReadUserEvidence200ResponseCompetenciesInner {
	if o == nil {
		var ret []CoreCompetencyReadUserEvidence200ResponseCompetenciesInner
		return ret
	}

	return o.Relatedcompetencies
}

// GetRelatedcompetenciesOk returns a tuple with the Relatedcompetencies field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetRelatedcompetenciesOk() ([]CoreCompetencyReadUserEvidence200ResponseCompetenciesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Relatedcompetencies, true
}

// SetRelatedcompetencies sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetRelatedcompetencies(v []CoreCompetencyReadUserEvidence200ResponseCompetenciesInner) {
	o.Relatedcompetencies = v
}

// GetScaleconfiguration returns the Scaleconfiguration field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetScaleconfiguration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scaleconfiguration
}

// GetScaleconfigurationOk returns a tuple with the Scaleconfiguration field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetScaleconfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scaleconfiguration, true
}

// SetScaleconfiguration sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetScaleconfiguration(v string) {
	o.Scaleconfiguration = v
}

// GetScaleid returns the Scaleid field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetScaleid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Scaleid
}

// GetScaleidOk returns a tuple with the Scaleid field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetScaleidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scaleid, true
}

// SetScaleid sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetScaleid(v int32) {
	o.Scaleid = v
}

// GetTaxonomyterm returns the Taxonomyterm field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetTaxonomyterm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Taxonomyterm
}

// GetTaxonomytermOk returns a tuple with the Taxonomyterm field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) GetTaxonomytermOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Taxonomyterm, true
}

// SetTaxonomyterm sets field value
func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) SetTaxonomyterm(v string) {
	o.Taxonomyterm = v
}

func (o ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["competency"] = o.Competency
	toSerialize["comppath"] = o.Comppath
	toSerialize["framework"] = o.Framework
	toSerialize["hascourses"] = o.Hascourses
	toSerialize["hasrelatedcompetencies"] = o.Hasrelatedcompetencies
	toSerialize["linkedcourses"] = o.Linkedcourses
	toSerialize["pluginbaseurl"] = o.Pluginbaseurl
	toSerialize["relatedcompetencies"] = o.Relatedcompetencies
	toSerialize["scaleconfiguration"] = o.Scaleconfiguration
	toSerialize["scaleid"] = o.Scaleid
	toSerialize["taxonomyterm"] = o.Taxonomyterm
	return toSerialize, nil
}

func (o *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"competency",
		"comppath",
		"framework",
		"hascourses",
		"hasrelatedcompetencies",
		"linkedcourses",
		"pluginbaseurl",
		"relatedcompetencies",
		"scaleconfiguration",
		"scaleid",
		"taxonomyterm",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency := _ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency)

	if err != nil {
		return err
	}

	*o = ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency(varReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency)

	return err
}

type NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency struct {
	value *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency
	isSet bool
}

func (v NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) Get() *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency {
	return v.value
}

func (v *NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) Set(val *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) {
	v.value = val
	v.isSet = true
}

func (v NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) IsSet() bool {
	return v.isSet
}

func (v *NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency(val *ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) *NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency {
	return &NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency{value: val, isSet: true}
}

func (v NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


