/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreFormDynamicForm200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreFormDynamicForm200Response{}

// CoreFormDynamicForm200Response struct for CoreFormDynamicForm200Response
type CoreFormDynamicForm200Response struct {
	// JSON-encoded return data from form processing method
	Data *string `json:"data,omitempty"`
	// HTML fragment of the form
	Html *string `json:"html,omitempty"`
	// JavaScript fragment of the form
	Javascript *string `json:"javascript,omitempty"`
	// If form was submitted and validated
	Submitted bool `json:"submitted"`
}

type _CoreFormDynamicForm200Response CoreFormDynamicForm200Response

// NewCoreFormDynamicForm200Response instantiates a new CoreFormDynamicForm200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreFormDynamicForm200Response(submitted bool) *CoreFormDynamicForm200Response {
	this := CoreFormDynamicForm200Response{}
	var data string = "null"
	this.Data = &data
	var html string = "null"
	this.Html = &html
	var javascript string = "null"
	this.Javascript = &javascript
	this.Submitted = submitted
	return &this
}

// NewCoreFormDynamicForm200ResponseWithDefaults instantiates a new CoreFormDynamicForm200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreFormDynamicForm200ResponseWithDefaults() *CoreFormDynamicForm200Response {
	this := CoreFormDynamicForm200Response{}
	var data string = "null"
	this.Data = &data
	var html string = "null"
	this.Html = &html
	var javascript string = "null"
	this.Javascript = &javascript
	var submitted bool = null
	this.Submitted = submitted
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CoreFormDynamicForm200Response) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreFormDynamicForm200Response) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CoreFormDynamicForm200Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *CoreFormDynamicForm200Response) SetData(v string) {
	o.Data = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *CoreFormDynamicForm200Response) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreFormDynamicForm200Response) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *CoreFormDynamicForm200Response) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *CoreFormDynamicForm200Response) SetHtml(v string) {
	o.Html = &v
}

// GetJavascript returns the Javascript field value if set, zero value otherwise.
func (o *CoreFormDynamicForm200Response) GetJavascript() string {
	if o == nil || IsNil(o.Javascript) {
		var ret string
		return ret
	}
	return *o.Javascript
}

// GetJavascriptOk returns a tuple with the Javascript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreFormDynamicForm200Response) GetJavascriptOk() (*string, bool) {
	if o == nil || IsNil(o.Javascript) {
		return nil, false
	}
	return o.Javascript, true
}

// HasJavascript returns a boolean if a field has been set.
func (o *CoreFormDynamicForm200Response) HasJavascript() bool {
	if o != nil && !IsNil(o.Javascript) {
		return true
	}

	return false
}

// SetJavascript gets a reference to the given string and assigns it to the Javascript field.
func (o *CoreFormDynamicForm200Response) SetJavascript(v string) {
	o.Javascript = &v
}

// GetSubmitted returns the Submitted field value
func (o *CoreFormDynamicForm200Response) GetSubmitted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Submitted
}

// GetSubmittedOk returns a tuple with the Submitted field value
// and a boolean to check if the value has been set.
func (o *CoreFormDynamicForm200Response) GetSubmittedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Submitted, true
}

// SetSubmitted sets field value
func (o *CoreFormDynamicForm200Response) SetSubmitted(v bool) {
	o.Submitted = v
}

func (o CoreFormDynamicForm200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreFormDynamicForm200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}
	if !IsNil(o.Javascript) {
		toSerialize["javascript"] = o.Javascript
	}
	toSerialize["submitted"] = o.Submitted
	return toSerialize, nil
}

func (o *CoreFormDynamicForm200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"submitted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreFormDynamicForm200Response := _CoreFormDynamicForm200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreFormDynamicForm200Response)

	if err != nil {
		return err
	}

	*o = CoreFormDynamicForm200Response(varCoreFormDynamicForm200Response)

	return err
}

type NullableCoreFormDynamicForm200Response struct {
	value *CoreFormDynamicForm200Response
	isSet bool
}

func (v NullableCoreFormDynamicForm200Response) Get() *CoreFormDynamicForm200Response {
	return v.value
}

func (v *NullableCoreFormDynamicForm200Response) Set(val *CoreFormDynamicForm200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreFormDynamicForm200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreFormDynamicForm200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreFormDynamicForm200Response(val *CoreFormDynamicForm200Response) *NullableCoreFormDynamicForm200Response {
	return &NullableCoreFormDynamicForm200Response{value: val, isSet: true}
}

func (v NullableCoreFormDynamicForm200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreFormDynamicForm200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


