/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCalendarGetCalendarMonthlyView200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarMonthlyView200Response{}

// CoreCalendarGetCalendarMonthlyView200Response struct for CoreCalendarGetCalendarMonthlyView200Response
type CoreCalendarGetCalendarMonthlyView200Response struct {
	// calendarinstanceid
	Calendarinstanceid int32 `json:"calendarinstanceid"`
	// categoryid
	Categoryid *int32 `json:"categoryid,omitempty"`
	// courseid
	Courseid int32 `json:"courseid"`
	Date CoreCalendarGetCalendarDayView200ResponseNextperiod `json:"date"`
	Daynames []CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner `json:"daynames"`
	// defaulteventcontext
	Defaulteventcontext int32 `json:"defaulteventcontext"`
	// filter_selector
	FilterSelector *string `json:"filter_selector,omitempty"`
	// includenavigation
	Includenavigation bool `json:"includenavigation"`
	// initialeventsloaded
	Initialeventsloaded bool `json:"initialeventsloaded"`
	// larrow
	Larrow string `json:"larrow"`
	Nextperiod CoreCalendarGetCalendarDayView200ResponseNextperiod `json:"nextperiod"`
	// nextperiodlink
	Nextperiodlink string `json:"nextperiodlink"`
	// nextperiodname
	Nextperiodname string `json:"nextperiodname"`
	// periodname
	Periodname string `json:"periodname"`
	Previousperiod CoreCalendarGetCalendarDayView200ResponseNextperiod `json:"previousperiod"`
	// previousperiodlink
	Previousperiodlink string `json:"previousperiodlink"`
	// previousperiodname
	Previousperiodname string `json:"previousperiodname"`
	// rarrow
	Rarrow string `json:"rarrow"`
	// showviewselector
	Showviewselector bool `json:"showviewselector"`
	// url
	Url string `json:"url"`
	// view
	View string `json:"view"`
	// viewinginblock
	Viewinginblock bool `json:"viewinginblock"`
	// viewingmonth
	Viewingmonth bool `json:"viewingmonth"`
	Weeks []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner `json:"weeks"`
}

type _CoreCalendarGetCalendarMonthlyView200Response CoreCalendarGetCalendarMonthlyView200Response

// NewCoreCalendarGetCalendarMonthlyView200Response instantiates a new CoreCalendarGetCalendarMonthlyView200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarMonthlyView200Response(calendarinstanceid int32, courseid int32, date CoreCalendarGetCalendarDayView200ResponseNextperiod, daynames []CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner, defaulteventcontext int32, includenavigation bool, initialeventsloaded bool, larrow string, nextperiod CoreCalendarGetCalendarDayView200ResponseNextperiod, nextperiodlink string, nextperiodname string, periodname string, previousperiod CoreCalendarGetCalendarDayView200ResponseNextperiod, previousperiodlink string, previousperiodname string, rarrow string, showviewselector bool, url string, view string, viewinginblock bool, viewingmonth bool, weeks []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner) *CoreCalendarGetCalendarMonthlyView200Response {
	this := CoreCalendarGetCalendarMonthlyView200Response{}
	this.Calendarinstanceid = calendarinstanceid
	var categoryid int32 = 0
	this.Categoryid = &categoryid
	this.Courseid = courseid
	this.Date = date
	this.Daynames = daynames
	this.Defaulteventcontext = defaulteventcontext
	this.Includenavigation = includenavigation
	this.Initialeventsloaded = initialeventsloaded
	this.Larrow = larrow
	this.Nextperiod = nextperiod
	this.Nextperiodlink = nextperiodlink
	this.Nextperiodname = nextperiodname
	this.Periodname = periodname
	this.Previousperiod = previousperiod
	this.Previousperiodlink = previousperiodlink
	this.Previousperiodname = previousperiodname
	this.Rarrow = rarrow
	this.Showviewselector = showviewselector
	this.Url = url
	this.View = view
	this.Viewinginblock = viewinginblock
	this.Viewingmonth = viewingmonth
	this.Weeks = weeks
	return &this
}

// NewCoreCalendarGetCalendarMonthlyView200ResponseWithDefaults instantiates a new CoreCalendarGetCalendarMonthlyView200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarMonthlyView200ResponseWithDefaults() *CoreCalendarGetCalendarMonthlyView200Response {
	this := CoreCalendarGetCalendarMonthlyView200Response{}
	var calendarinstanceid int32 = 0
	this.Calendarinstanceid = calendarinstanceid
	var categoryid int32 = 0
	this.Categoryid = &categoryid
	var defaulteventcontext int32 = 0
	this.Defaulteventcontext = defaulteventcontext
	var includenavigation bool = true
	this.Includenavigation = includenavigation
	var initialeventsloaded bool = true
	this.Initialeventsloaded = initialeventsloaded
	var showviewselector bool = true
	this.Showviewselector = showviewselector
	var view string = "null"
	this.View = view
	var viewinginblock bool = false
	this.Viewinginblock = viewinginblock
	var viewingmonth bool = true
	this.Viewingmonth = viewingmonth
	return &this
}

// GetCalendarinstanceid returns the Calendarinstanceid field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetCalendarinstanceid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Calendarinstanceid
}

// GetCalendarinstanceidOk returns a tuple with the Calendarinstanceid field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetCalendarinstanceidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Calendarinstanceid, true
}

// SetCalendarinstanceid sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetCalendarinstanceid(v int32) {
	o.Calendarinstanceid = v
}

// GetCategoryid returns the Categoryid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetCategoryid() int32 {
	if o == nil || IsNil(o.Categoryid) {
		var ret int32
		return ret
	}
	return *o.Categoryid
}

// GetCategoryidOk returns a tuple with the Categoryid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetCategoryidOk() (*int32, bool) {
	if o == nil || IsNil(o.Categoryid) {
		return nil, false
	}
	return o.Categoryid, true
}

// HasCategoryid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) HasCategoryid() bool {
	if o != nil && !IsNil(o.Categoryid) {
		return true
	}

	return false
}

// SetCategoryid gets a reference to the given int32 and assigns it to the Categoryid field.
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetCategoryid(v int32) {
	o.Categoryid = &v
}

// GetCourseid returns the Courseid field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetCourseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetCourseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Courseid, true
}

// SetCourseid sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetCourseid(v int32) {
	o.Courseid = v
}

// GetDate returns the Date field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetDate() CoreCalendarGetCalendarDayView200ResponseNextperiod {
	if o == nil {
		var ret CoreCalendarGetCalendarDayView200ResponseNextperiod
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetDateOk() (*CoreCalendarGetCalendarDayView200ResponseNextperiod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetDate(v CoreCalendarGetCalendarDayView200ResponseNextperiod) {
	o.Date = v
}

// GetDaynames returns the Daynames field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetDaynames() []CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner {
	if o == nil {
		var ret []CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner
		return ret
	}

	return o.Daynames
}

// GetDaynamesOk returns a tuple with the Daynames field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetDaynamesOk() ([]CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Daynames, true
}

// SetDaynames sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetDaynames(v []CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner) {
	o.Daynames = v
}

// GetDefaulteventcontext returns the Defaulteventcontext field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetDefaulteventcontext() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Defaulteventcontext
}

// GetDefaulteventcontextOk returns a tuple with the Defaulteventcontext field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetDefaulteventcontextOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Defaulteventcontext, true
}

// SetDefaulteventcontext sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetDefaulteventcontext(v int32) {
	o.Defaulteventcontext = v
}

// GetFilterSelector returns the FilterSelector field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetFilterSelector() string {
	if o == nil || IsNil(o.FilterSelector) {
		var ret string
		return ret
	}
	return *o.FilterSelector
}

// GetFilterSelectorOk returns a tuple with the FilterSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetFilterSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.FilterSelector) {
		return nil, false
	}
	return o.FilterSelector, true
}

// HasFilterSelector returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) HasFilterSelector() bool {
	if o != nil && !IsNil(o.FilterSelector) {
		return true
	}

	return false
}

// SetFilterSelector gets a reference to the given string and assigns it to the FilterSelector field.
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetFilterSelector(v string) {
	o.FilterSelector = &v
}

// GetIncludenavigation returns the Includenavigation field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetIncludenavigation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Includenavigation
}

// GetIncludenavigationOk returns a tuple with the Includenavigation field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetIncludenavigationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Includenavigation, true
}

// SetIncludenavigation sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetIncludenavigation(v bool) {
	o.Includenavigation = v
}

// GetInitialeventsloaded returns the Initialeventsloaded field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetInitialeventsloaded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Initialeventsloaded
}

// GetInitialeventsloadedOk returns a tuple with the Initialeventsloaded field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetInitialeventsloadedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initialeventsloaded, true
}

// SetInitialeventsloaded sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetInitialeventsloaded(v bool) {
	o.Initialeventsloaded = v
}

// GetLarrow returns the Larrow field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetLarrow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Larrow
}

// GetLarrowOk returns a tuple with the Larrow field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetLarrowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Larrow, true
}

// SetLarrow sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetLarrow(v string) {
	o.Larrow = v
}

// GetNextperiod returns the Nextperiod field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetNextperiod() CoreCalendarGetCalendarDayView200ResponseNextperiod {
	if o == nil {
		var ret CoreCalendarGetCalendarDayView200ResponseNextperiod
		return ret
	}

	return o.Nextperiod
}

// GetNextperiodOk returns a tuple with the Nextperiod field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetNextperiodOk() (*CoreCalendarGetCalendarDayView200ResponseNextperiod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nextperiod, true
}

// SetNextperiod sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetNextperiod(v CoreCalendarGetCalendarDayView200ResponseNextperiod) {
	o.Nextperiod = v
}

// GetNextperiodlink returns the Nextperiodlink field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetNextperiodlink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nextperiodlink
}

// GetNextperiodlinkOk returns a tuple with the Nextperiodlink field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetNextperiodlinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nextperiodlink, true
}

// SetNextperiodlink sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetNextperiodlink(v string) {
	o.Nextperiodlink = v
}

// GetNextperiodname returns the Nextperiodname field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetNextperiodname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nextperiodname
}

// GetNextperiodnameOk returns a tuple with the Nextperiodname field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetNextperiodnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nextperiodname, true
}

// SetNextperiodname sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetNextperiodname(v string) {
	o.Nextperiodname = v
}

// GetPeriodname returns the Periodname field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetPeriodname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Periodname
}

// GetPeriodnameOk returns a tuple with the Periodname field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetPeriodnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Periodname, true
}

// SetPeriodname sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetPeriodname(v string) {
	o.Periodname = v
}

// GetPreviousperiod returns the Previousperiod field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetPreviousperiod() CoreCalendarGetCalendarDayView200ResponseNextperiod {
	if o == nil {
		var ret CoreCalendarGetCalendarDayView200ResponseNextperiod
		return ret
	}

	return o.Previousperiod
}

// GetPreviousperiodOk returns a tuple with the Previousperiod field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetPreviousperiodOk() (*CoreCalendarGetCalendarDayView200ResponseNextperiod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Previousperiod, true
}

// SetPreviousperiod sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetPreviousperiod(v CoreCalendarGetCalendarDayView200ResponseNextperiod) {
	o.Previousperiod = v
}

// GetPreviousperiodlink returns the Previousperiodlink field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetPreviousperiodlink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Previousperiodlink
}

// GetPreviousperiodlinkOk returns a tuple with the Previousperiodlink field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetPreviousperiodlinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Previousperiodlink, true
}

// SetPreviousperiodlink sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetPreviousperiodlink(v string) {
	o.Previousperiodlink = v
}

// GetPreviousperiodname returns the Previousperiodname field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetPreviousperiodname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Previousperiodname
}

// GetPreviousperiodnameOk returns a tuple with the Previousperiodname field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetPreviousperiodnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Previousperiodname, true
}

// SetPreviousperiodname sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetPreviousperiodname(v string) {
	o.Previousperiodname = v
}

// GetRarrow returns the Rarrow field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetRarrow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rarrow
}

// GetRarrowOk returns a tuple with the Rarrow field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetRarrowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rarrow, true
}

// SetRarrow sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetRarrow(v string) {
	o.Rarrow = v
}

// GetShowviewselector returns the Showviewselector field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetShowviewselector() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Showviewselector
}

// GetShowviewselectorOk returns a tuple with the Showviewselector field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetShowviewselectorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Showviewselector, true
}

// SetShowviewselector sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetShowviewselector(v bool) {
	o.Showviewselector = v
}

// GetUrl returns the Url field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetUrl(v string) {
	o.Url = v
}

// GetView returns the View field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetView() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.View
}

// GetViewOk returns a tuple with the View field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetViewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.View, true
}

// SetView sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetView(v string) {
	o.View = v
}

// GetViewinginblock returns the Viewinginblock field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetViewinginblock() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Viewinginblock
}

// GetViewinginblockOk returns a tuple with the Viewinginblock field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetViewinginblockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Viewinginblock, true
}

// SetViewinginblock sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetViewinginblock(v bool) {
	o.Viewinginblock = v
}

// GetViewingmonth returns the Viewingmonth field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetViewingmonth() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Viewingmonth
}

// GetViewingmonthOk returns a tuple with the Viewingmonth field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetViewingmonthOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Viewingmonth, true
}

// SetViewingmonth sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetViewingmonth(v bool) {
	o.Viewingmonth = v
}

// GetWeeks returns the Weeks field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetWeeks() []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner {
	if o == nil {
		var ret []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner
		return ret
	}

	return o.Weeks
}

// GetWeeksOk returns a tuple with the Weeks field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200Response) GetWeeksOk() ([]CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weeks, true
}

// SetWeeks sets field value
func (o *CoreCalendarGetCalendarMonthlyView200Response) SetWeeks(v []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner) {
	o.Weeks = v
}

func (o CoreCalendarGetCalendarMonthlyView200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarMonthlyView200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["calendarinstanceid"] = o.Calendarinstanceid
	if !IsNil(o.Categoryid) {
		toSerialize["categoryid"] = o.Categoryid
	}
	toSerialize["courseid"] = o.Courseid
	toSerialize["date"] = o.Date
	toSerialize["daynames"] = o.Daynames
	toSerialize["defaulteventcontext"] = o.Defaulteventcontext
	if !IsNil(o.FilterSelector) {
		toSerialize["filter_selector"] = o.FilterSelector
	}
	toSerialize["includenavigation"] = o.Includenavigation
	toSerialize["initialeventsloaded"] = o.Initialeventsloaded
	toSerialize["larrow"] = o.Larrow
	toSerialize["nextperiod"] = o.Nextperiod
	toSerialize["nextperiodlink"] = o.Nextperiodlink
	toSerialize["nextperiodname"] = o.Nextperiodname
	toSerialize["periodname"] = o.Periodname
	toSerialize["previousperiod"] = o.Previousperiod
	toSerialize["previousperiodlink"] = o.Previousperiodlink
	toSerialize["previousperiodname"] = o.Previousperiodname
	toSerialize["rarrow"] = o.Rarrow
	toSerialize["showviewselector"] = o.Showviewselector
	toSerialize["url"] = o.Url
	toSerialize["view"] = o.View
	toSerialize["viewinginblock"] = o.Viewinginblock
	toSerialize["viewingmonth"] = o.Viewingmonth
	toSerialize["weeks"] = o.Weeks
	return toSerialize, nil
}

func (o *CoreCalendarGetCalendarMonthlyView200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"calendarinstanceid",
		"courseid",
		"date",
		"daynames",
		"defaulteventcontext",
		"includenavigation",
		"initialeventsloaded",
		"larrow",
		"nextperiod",
		"nextperiodlink",
		"nextperiodname",
		"periodname",
		"previousperiod",
		"previousperiodlink",
		"previousperiodname",
		"rarrow",
		"showviewselector",
		"url",
		"view",
		"viewinginblock",
		"viewingmonth",
		"weeks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCalendarGetCalendarMonthlyView200Response := _CoreCalendarGetCalendarMonthlyView200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCalendarGetCalendarMonthlyView200Response)

	if err != nil {
		return err
	}

	*o = CoreCalendarGetCalendarMonthlyView200Response(varCoreCalendarGetCalendarMonthlyView200Response)

	return err
}

type NullableCoreCalendarGetCalendarMonthlyView200Response struct {
	value *CoreCalendarGetCalendarMonthlyView200Response
	isSet bool
}

func (v NullableCoreCalendarGetCalendarMonthlyView200Response) Get() *CoreCalendarGetCalendarMonthlyView200Response {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarMonthlyView200Response) Set(val *CoreCalendarGetCalendarMonthlyView200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarMonthlyView200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarMonthlyView200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarMonthlyView200Response(val *CoreCalendarGetCalendarMonthlyView200Response) *NullableCoreCalendarGetCalendarMonthlyView200Response {
	return &NullableCoreCalendarGetCalendarMonthlyView200Response{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarMonthlyView200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarMonthlyView200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


