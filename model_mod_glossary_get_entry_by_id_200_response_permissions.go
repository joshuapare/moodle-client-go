/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModGlossaryGetEntryById200ResponsePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModGlossaryGetEntryById200ResponsePermissions{}

// ModGlossaryGetEntryById200ResponsePermissions struct for ModGlossaryGetEntryById200ResponsePermissions
type ModGlossaryGetEntryById200ResponsePermissions struct {
	// Whether the user can delete the entry.
	Candelete bool `json:"candelete"`
	// Whether the user can update the entry.
	Canupdate bool `json:"canupdate"`
}

type _ModGlossaryGetEntryById200ResponsePermissions ModGlossaryGetEntryById200ResponsePermissions

// NewModGlossaryGetEntryById200ResponsePermissions instantiates a new ModGlossaryGetEntryById200ResponsePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModGlossaryGetEntryById200ResponsePermissions(candelete bool, canupdate bool) *ModGlossaryGetEntryById200ResponsePermissions {
	this := ModGlossaryGetEntryById200ResponsePermissions{}
	this.Candelete = candelete
	this.Canupdate = canupdate
	return &this
}

// NewModGlossaryGetEntryById200ResponsePermissionsWithDefaults instantiates a new ModGlossaryGetEntryById200ResponsePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModGlossaryGetEntryById200ResponsePermissionsWithDefaults() *ModGlossaryGetEntryById200ResponsePermissions {
	this := ModGlossaryGetEntryById200ResponsePermissions{}
	var candelete bool = null
	this.Candelete = candelete
	var canupdate bool = null
	this.Canupdate = canupdate
	return &this
}

// GetCandelete returns the Candelete field value
func (o *ModGlossaryGetEntryById200ResponsePermissions) GetCandelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Candelete
}

// GetCandeleteOk returns a tuple with the Candelete field value
// and a boolean to check if the value has been set.
func (o *ModGlossaryGetEntryById200ResponsePermissions) GetCandeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Candelete, true
}

// SetCandelete sets field value
func (o *ModGlossaryGetEntryById200ResponsePermissions) SetCandelete(v bool) {
	o.Candelete = v
}

// GetCanupdate returns the Canupdate field value
func (o *ModGlossaryGetEntryById200ResponsePermissions) GetCanupdate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Canupdate
}

// GetCanupdateOk returns a tuple with the Canupdate field value
// and a boolean to check if the value has been set.
func (o *ModGlossaryGetEntryById200ResponsePermissions) GetCanupdateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Canupdate, true
}

// SetCanupdate sets field value
func (o *ModGlossaryGetEntryById200ResponsePermissions) SetCanupdate(v bool) {
	o.Canupdate = v
}

func (o ModGlossaryGetEntryById200ResponsePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModGlossaryGetEntryById200ResponsePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["candelete"] = o.Candelete
	toSerialize["canupdate"] = o.Canupdate
	return toSerialize, nil
}

func (o *ModGlossaryGetEntryById200ResponsePermissions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"candelete",
		"canupdate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModGlossaryGetEntryById200ResponsePermissions := _ModGlossaryGetEntryById200ResponsePermissions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModGlossaryGetEntryById200ResponsePermissions)

	if err != nil {
		return err
	}

	*o = ModGlossaryGetEntryById200ResponsePermissions(varModGlossaryGetEntryById200ResponsePermissions)

	return err
}

type NullableModGlossaryGetEntryById200ResponsePermissions struct {
	value *ModGlossaryGetEntryById200ResponsePermissions
	isSet bool
}

func (v NullableModGlossaryGetEntryById200ResponsePermissions) Get() *ModGlossaryGetEntryById200ResponsePermissions {
	return v.value
}

func (v *NullableModGlossaryGetEntryById200ResponsePermissions) Set(val *ModGlossaryGetEntryById200ResponsePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableModGlossaryGetEntryById200ResponsePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableModGlossaryGetEntryById200ResponsePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModGlossaryGetEntryById200ResponsePermissions(val *ModGlossaryGetEntryById200ResponsePermissions) *NullableModGlossaryGetEntryById200ResponsePermissions {
	return &NullableModGlossaryGetEntryById200ResponsePermissions{value: val, isSet: true}
}

func (v NullableModGlossaryGetEntryById200ResponsePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModGlossaryGetEntryById200ResponsePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


