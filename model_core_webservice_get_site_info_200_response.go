/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreWebserviceGetSiteInfo200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreWebserviceGetSiteInfo200Response{}

// CoreWebserviceGetSiteInfo200Response struct for CoreWebserviceGetSiteInfo200Response
type CoreWebserviceGetSiteInfo200Response struct {
	Advancedfeatures []CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner `json:"advancedfeatures,omitempty"`
	// 1 if users are allowed to download files, 0 if not
	Downloadfiles *int32 `json:"downloadfiles,omitempty"`
	// first name
	Firstname string `json:"firstname"`
	// user full name
	Fullname string `json:"fullname"`
	Functions []CoreWebserviceGetSiteInfo200ResponseFunctionsInner `json:"functions"`
	// Current language.
	Lang string `json:"lang"`
	// last name
	Lastname string `json:"lastname"`
	// Number of concurrent sessions allowed
	Limitconcurrentlogins *int32 `json:"limitconcurrentlogins,omitempty"`
	// Mobile custom CSS theme
	Mobilecssurl *string `json:"mobilecssurl,omitempty"`
	// Moodle release number
	Release *string `json:"release,omitempty"`
	// Calendar type set in the site.
	Sitecalendartype *string `json:"sitecalendartype,omitempty"`
	// Site course ID
	Siteid *int32 `json:"siteid,omitempty"`
	// site name
	Sitename string `json:"sitename"`
	// site url
	Siteurl string `json:"siteurl"`
	// Current theme for the user.
	Theme *string `json:"theme,omitempty"`
	// 1 if users are allowed to upload files, 0 if not
	Uploadfiles *int32 `json:"uploadfiles,omitempty"`
	// Calendar typed used by the user.
	Usercalendartype *string `json:"usercalendartype,omitempty"`
	// true if the user can manage his own files
	Usercanmanageownfiles *bool `json:"usercanmanageownfiles,omitempty"`
	// the default home page for the user: 0 for the site home, 1 for dashboard
	Userhomepage *int32 `json:"userhomepage,omitempty"`
	// user id
	Userid int32 `json:"userid"`
	// Whether the user is a site admin or not.
	Userissiteadmin *bool `json:"userissiteadmin,omitempty"`
	// user max upload file size (bytes). -1 means the user can ignore the upload file size
	Usermaxuploadfilesize *int32 `json:"usermaxuploadfilesize,omitempty"`
	// username
	Username string `json:"username"`
	// the user profile picture.                     Warning: this url is the public URL that only works when forcelogin is set to NO and guestaccess is set to YES.                     In order to retrieve user profile pictures independently of the Moodle config, replace \"pluginfile.php\" by                     \"webservice/pluginfile.php?token=WSTOKEN&file=\"                     Of course the user can only see profile picture depending                     on his/her permissions. Moreover it is recommended to use HTTPS too.
	Userpictureurl string `json:"userpictureurl"`
	// Private user access key for fetching files.
	Userprivateaccesskey *string `json:"userprivateaccesskey,omitempty"`
	// user quota (bytes). 0 means user can ignore the quota
	Userquota *int32 `json:"userquota,omitempty"`
	// Number of active sessions for current user.                     Only returned when limitconcurrentlogins is used.
	Usersessionscount *int32 `json:"usersessionscount,omitempty"`
	// Moodle version number
	Version *string `json:"version,omitempty"`
}

type _CoreWebserviceGetSiteInfo200Response CoreWebserviceGetSiteInfo200Response

// NewCoreWebserviceGetSiteInfo200Response instantiates a new CoreWebserviceGetSiteInfo200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreWebserviceGetSiteInfo200Response(firstname string, fullname string, functions []CoreWebserviceGetSiteInfo200ResponseFunctionsInner, lang string, lastname string, sitename string, siteurl string, userid int32, username string, userpictureurl string) *CoreWebserviceGetSiteInfo200Response {
	this := CoreWebserviceGetSiteInfo200Response{}
	var downloadfiles int32 = null
	this.Downloadfiles = &downloadfiles
	this.Firstname = firstname
	this.Fullname = fullname
	this.Functions = functions
	this.Lang = lang
	this.Lastname = lastname
	var limitconcurrentlogins int32 = null
	this.Limitconcurrentlogins = &limitconcurrentlogins
	var mobilecssurl string = "null"
	this.Mobilecssurl = &mobilecssurl
	var release string = "null"
	this.Release = &release
	var sitecalendartype string = "null"
	this.Sitecalendartype = &sitecalendartype
	var siteid int32 = null
	this.Siteid = &siteid
	this.Sitename = sitename
	this.Siteurl = siteurl
	var theme string = "null"
	this.Theme = &theme
	var uploadfiles int32 = null
	this.Uploadfiles = &uploadfiles
	var usercalendartype string = "null"
	this.Usercalendartype = &usercalendartype
	var usercanmanageownfiles bool = null
	this.Usercanmanageownfiles = &usercanmanageownfiles
	var userhomepage int32 = null
	this.Userhomepage = &userhomepage
	this.Userid = userid
	var userissiteadmin bool = null
	this.Userissiteadmin = &userissiteadmin
	var usermaxuploadfilesize int32 = null
	this.Usermaxuploadfilesize = &usermaxuploadfilesize
	this.Username = username
	this.Userpictureurl = userpictureurl
	var userprivateaccesskey string = "null"
	this.Userprivateaccesskey = &userprivateaccesskey
	var userquota int32 = null
	this.Userquota = &userquota
	var usersessionscount int32 = null
	this.Usersessionscount = &usersessionscount
	var version string = "null"
	this.Version = &version
	return &this
}

// NewCoreWebserviceGetSiteInfo200ResponseWithDefaults instantiates a new CoreWebserviceGetSiteInfo200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreWebserviceGetSiteInfo200ResponseWithDefaults() *CoreWebserviceGetSiteInfo200Response {
	this := CoreWebserviceGetSiteInfo200Response{}
	var downloadfiles int32 = null
	this.Downloadfiles = &downloadfiles
	var firstname string = "null"
	this.Firstname = firstname
	var fullname string = "null"
	this.Fullname = fullname
	var lang string = "null"
	this.Lang = lang
	var lastname string = "null"
	this.Lastname = lastname
	var limitconcurrentlogins int32 = null
	this.Limitconcurrentlogins = &limitconcurrentlogins
	var mobilecssurl string = "null"
	this.Mobilecssurl = &mobilecssurl
	var release string = "null"
	this.Release = &release
	var sitecalendartype string = "null"
	this.Sitecalendartype = &sitecalendartype
	var siteid int32 = null
	this.Siteid = &siteid
	var sitename string = "null"
	this.Sitename = sitename
	var siteurl string = "null"
	this.Siteurl = siteurl
	var theme string = "null"
	this.Theme = &theme
	var uploadfiles int32 = null
	this.Uploadfiles = &uploadfiles
	var usercalendartype string = "null"
	this.Usercalendartype = &usercalendartype
	var usercanmanageownfiles bool = null
	this.Usercanmanageownfiles = &usercanmanageownfiles
	var userhomepage int32 = null
	this.Userhomepage = &userhomepage
	var userissiteadmin bool = null
	this.Userissiteadmin = &userissiteadmin
	var usermaxuploadfilesize int32 = null
	this.Usermaxuploadfilesize = &usermaxuploadfilesize
	var username string = "null"
	this.Username = username
	var userpictureurl string = "null"
	this.Userpictureurl = userpictureurl
	var userprivateaccesskey string = "null"
	this.Userprivateaccesskey = &userprivateaccesskey
	var userquota int32 = null
	this.Userquota = &userquota
	var usersessionscount int32 = null
	this.Usersessionscount = &usersessionscount
	var version string = "null"
	this.Version = &version
	return &this
}

// GetAdvancedfeatures returns the Advancedfeatures field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetAdvancedfeatures() []CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner {
	if o == nil || IsNil(o.Advancedfeatures) {
		var ret []CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner
		return ret
	}
	return o.Advancedfeatures
}

// GetAdvancedfeaturesOk returns a tuple with the Advancedfeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetAdvancedfeaturesOk() ([]CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner, bool) {
	if o == nil || IsNil(o.Advancedfeatures) {
		return nil, false
	}
	return o.Advancedfeatures, true
}

// HasAdvancedfeatures returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasAdvancedfeatures() bool {
	if o != nil && !IsNil(o.Advancedfeatures) {
		return true
	}

	return false
}

// SetAdvancedfeatures gets a reference to the given []CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner and assigns it to the Advancedfeatures field.
func (o *CoreWebserviceGetSiteInfo200Response) SetAdvancedfeatures(v []CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner) {
	o.Advancedfeatures = v
}

// GetDownloadfiles returns the Downloadfiles field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetDownloadfiles() int32 {
	if o == nil || IsNil(o.Downloadfiles) {
		var ret int32
		return ret
	}
	return *o.Downloadfiles
}

// GetDownloadfilesOk returns a tuple with the Downloadfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetDownloadfilesOk() (*int32, bool) {
	if o == nil || IsNil(o.Downloadfiles) {
		return nil, false
	}
	return o.Downloadfiles, true
}

// HasDownloadfiles returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasDownloadfiles() bool {
	if o != nil && !IsNil(o.Downloadfiles) {
		return true
	}

	return false
}

// SetDownloadfiles gets a reference to the given int32 and assigns it to the Downloadfiles field.
func (o *CoreWebserviceGetSiteInfo200Response) SetDownloadfiles(v int32) {
	o.Downloadfiles = &v
}

// GetFirstname returns the Firstname field value
func (o *CoreWebserviceGetSiteInfo200Response) GetFirstname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetFirstnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Firstname, true
}

// SetFirstname sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetFirstname(v string) {
	o.Firstname = v
}

// GetFullname returns the Fullname field value
func (o *CoreWebserviceGetSiteInfo200Response) GetFullname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fullname
}

// GetFullnameOk returns a tuple with the Fullname field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetFullnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fullname, true
}

// SetFullname sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetFullname(v string) {
	o.Fullname = v
}

// GetFunctions returns the Functions field value
func (o *CoreWebserviceGetSiteInfo200Response) GetFunctions() []CoreWebserviceGetSiteInfo200ResponseFunctionsInner {
	if o == nil {
		var ret []CoreWebserviceGetSiteInfo200ResponseFunctionsInner
		return ret
	}

	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetFunctionsOk() ([]CoreWebserviceGetSiteInfo200ResponseFunctionsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Functions, true
}

// SetFunctions sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetFunctions(v []CoreWebserviceGetSiteInfo200ResponseFunctionsInner) {
	o.Functions = v
}

// GetLang returns the Lang field value
func (o *CoreWebserviceGetSiteInfo200Response) GetLang() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lang
}

// GetLangOk returns a tuple with the Lang field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetLangOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lang, true
}

// SetLang sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetLang(v string) {
	o.Lang = v
}

// GetLastname returns the Lastname field value
func (o *CoreWebserviceGetSiteInfo200Response) GetLastname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetLastnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lastname, true
}

// SetLastname sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetLastname(v string) {
	o.Lastname = v
}

// GetLimitconcurrentlogins returns the Limitconcurrentlogins field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetLimitconcurrentlogins() int32 {
	if o == nil || IsNil(o.Limitconcurrentlogins) {
		var ret int32
		return ret
	}
	return *o.Limitconcurrentlogins
}

// GetLimitconcurrentloginsOk returns a tuple with the Limitconcurrentlogins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetLimitconcurrentloginsOk() (*int32, bool) {
	if o == nil || IsNil(o.Limitconcurrentlogins) {
		return nil, false
	}
	return o.Limitconcurrentlogins, true
}

// HasLimitconcurrentlogins returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasLimitconcurrentlogins() bool {
	if o != nil && !IsNil(o.Limitconcurrentlogins) {
		return true
	}

	return false
}

// SetLimitconcurrentlogins gets a reference to the given int32 and assigns it to the Limitconcurrentlogins field.
func (o *CoreWebserviceGetSiteInfo200Response) SetLimitconcurrentlogins(v int32) {
	o.Limitconcurrentlogins = &v
}

// GetMobilecssurl returns the Mobilecssurl field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetMobilecssurl() string {
	if o == nil || IsNil(o.Mobilecssurl) {
		var ret string
		return ret
	}
	return *o.Mobilecssurl
}

// GetMobilecssurlOk returns a tuple with the Mobilecssurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetMobilecssurlOk() (*string, bool) {
	if o == nil || IsNil(o.Mobilecssurl) {
		return nil, false
	}
	return o.Mobilecssurl, true
}

// HasMobilecssurl returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasMobilecssurl() bool {
	if o != nil && !IsNil(o.Mobilecssurl) {
		return true
	}

	return false
}

// SetMobilecssurl gets a reference to the given string and assigns it to the Mobilecssurl field.
func (o *CoreWebserviceGetSiteInfo200Response) SetMobilecssurl(v string) {
	o.Mobilecssurl = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetRelease() string {
	if o == nil || IsNil(o.Release) {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *CoreWebserviceGetSiteInfo200Response) SetRelease(v string) {
	o.Release = &v
}

// GetSitecalendartype returns the Sitecalendartype field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetSitecalendartype() string {
	if o == nil || IsNil(o.Sitecalendartype) {
		var ret string
		return ret
	}
	return *o.Sitecalendartype
}

// GetSitecalendartypeOk returns a tuple with the Sitecalendartype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetSitecalendartypeOk() (*string, bool) {
	if o == nil || IsNil(o.Sitecalendartype) {
		return nil, false
	}
	return o.Sitecalendartype, true
}

// HasSitecalendartype returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasSitecalendartype() bool {
	if o != nil && !IsNil(o.Sitecalendartype) {
		return true
	}

	return false
}

// SetSitecalendartype gets a reference to the given string and assigns it to the Sitecalendartype field.
func (o *CoreWebserviceGetSiteInfo200Response) SetSitecalendartype(v string) {
	o.Sitecalendartype = &v
}

// GetSiteid returns the Siteid field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetSiteid() int32 {
	if o == nil || IsNil(o.Siteid) {
		var ret int32
		return ret
	}
	return *o.Siteid
}

// GetSiteidOk returns a tuple with the Siteid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetSiteidOk() (*int32, bool) {
	if o == nil || IsNil(o.Siteid) {
		return nil, false
	}
	return o.Siteid, true
}

// HasSiteid returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasSiteid() bool {
	if o != nil && !IsNil(o.Siteid) {
		return true
	}

	return false
}

// SetSiteid gets a reference to the given int32 and assigns it to the Siteid field.
func (o *CoreWebserviceGetSiteInfo200Response) SetSiteid(v int32) {
	o.Siteid = &v
}

// GetSitename returns the Sitename field value
func (o *CoreWebserviceGetSiteInfo200Response) GetSitename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sitename
}

// GetSitenameOk returns a tuple with the Sitename field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetSitenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sitename, true
}

// SetSitename sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetSitename(v string) {
	o.Sitename = v
}

// GetSiteurl returns the Siteurl field value
func (o *CoreWebserviceGetSiteInfo200Response) GetSiteurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Siteurl
}

// GetSiteurlOk returns a tuple with the Siteurl field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetSiteurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Siteurl, true
}

// SetSiteurl sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetSiteurl(v string) {
	o.Siteurl = v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetTheme() string {
	if o == nil || IsNil(o.Theme) {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetThemeOk() (*string, bool) {
	if o == nil || IsNil(o.Theme) {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasTheme() bool {
	if o != nil && !IsNil(o.Theme) {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *CoreWebserviceGetSiteInfo200Response) SetTheme(v string) {
	o.Theme = &v
}

// GetUploadfiles returns the Uploadfiles field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUploadfiles() int32 {
	if o == nil || IsNil(o.Uploadfiles) {
		var ret int32
		return ret
	}
	return *o.Uploadfiles
}

// GetUploadfilesOk returns a tuple with the Uploadfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUploadfilesOk() (*int32, bool) {
	if o == nil || IsNil(o.Uploadfiles) {
		return nil, false
	}
	return o.Uploadfiles, true
}

// HasUploadfiles returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUploadfiles() bool {
	if o != nil && !IsNil(o.Uploadfiles) {
		return true
	}

	return false
}

// SetUploadfiles gets a reference to the given int32 and assigns it to the Uploadfiles field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUploadfiles(v int32) {
	o.Uploadfiles = &v
}

// GetUsercalendartype returns the Usercalendartype field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsercalendartype() string {
	if o == nil || IsNil(o.Usercalendartype) {
		var ret string
		return ret
	}
	return *o.Usercalendartype
}

// GetUsercalendartypeOk returns a tuple with the Usercalendartype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsercalendartypeOk() (*string, bool) {
	if o == nil || IsNil(o.Usercalendartype) {
		return nil, false
	}
	return o.Usercalendartype, true
}

// HasUsercalendartype returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUsercalendartype() bool {
	if o != nil && !IsNil(o.Usercalendartype) {
		return true
	}

	return false
}

// SetUsercalendartype gets a reference to the given string and assigns it to the Usercalendartype field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUsercalendartype(v string) {
	o.Usercalendartype = &v
}

// GetUsercanmanageownfiles returns the Usercanmanageownfiles field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsercanmanageownfiles() bool {
	if o == nil || IsNil(o.Usercanmanageownfiles) {
		var ret bool
		return ret
	}
	return *o.Usercanmanageownfiles
}

// GetUsercanmanageownfilesOk returns a tuple with the Usercanmanageownfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsercanmanageownfilesOk() (*bool, bool) {
	if o == nil || IsNil(o.Usercanmanageownfiles) {
		return nil, false
	}
	return o.Usercanmanageownfiles, true
}

// HasUsercanmanageownfiles returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUsercanmanageownfiles() bool {
	if o != nil && !IsNil(o.Usercanmanageownfiles) {
		return true
	}

	return false
}

// SetUsercanmanageownfiles gets a reference to the given bool and assigns it to the Usercanmanageownfiles field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUsercanmanageownfiles(v bool) {
	o.Usercanmanageownfiles = &v
}

// GetUserhomepage returns the Userhomepage field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserhomepage() int32 {
	if o == nil || IsNil(o.Userhomepage) {
		var ret int32
		return ret
	}
	return *o.Userhomepage
}

// GetUserhomepageOk returns a tuple with the Userhomepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserhomepageOk() (*int32, bool) {
	if o == nil || IsNil(o.Userhomepage) {
		return nil, false
	}
	return o.Userhomepage, true
}

// HasUserhomepage returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUserhomepage() bool {
	if o != nil && !IsNil(o.Userhomepage) {
		return true
	}

	return false
}

// SetUserhomepage gets a reference to the given int32 and assigns it to the Userhomepage field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUserhomepage(v int32) {
	o.Userhomepage = &v
}

// GetUserid returns the Userid field value
func (o *CoreWebserviceGetSiteInfo200Response) GetUserid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Userid
}

// GetUseridOk returns a tuple with the Userid field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUseridOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Userid, true
}

// SetUserid sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetUserid(v int32) {
	o.Userid = v
}

// GetUserissiteadmin returns the Userissiteadmin field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserissiteadmin() bool {
	if o == nil || IsNil(o.Userissiteadmin) {
		var ret bool
		return ret
	}
	return *o.Userissiteadmin
}

// GetUserissiteadminOk returns a tuple with the Userissiteadmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserissiteadminOk() (*bool, bool) {
	if o == nil || IsNil(o.Userissiteadmin) {
		return nil, false
	}
	return o.Userissiteadmin, true
}

// HasUserissiteadmin returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUserissiteadmin() bool {
	if o != nil && !IsNil(o.Userissiteadmin) {
		return true
	}

	return false
}

// SetUserissiteadmin gets a reference to the given bool and assigns it to the Userissiteadmin field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUserissiteadmin(v bool) {
	o.Userissiteadmin = &v
}

// GetUsermaxuploadfilesize returns the Usermaxuploadfilesize field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsermaxuploadfilesize() int32 {
	if o == nil || IsNil(o.Usermaxuploadfilesize) {
		var ret int32
		return ret
	}
	return *o.Usermaxuploadfilesize
}

// GetUsermaxuploadfilesizeOk returns a tuple with the Usermaxuploadfilesize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsermaxuploadfilesizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Usermaxuploadfilesize) {
		return nil, false
	}
	return o.Usermaxuploadfilesize, true
}

// HasUsermaxuploadfilesize returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUsermaxuploadfilesize() bool {
	if o != nil && !IsNil(o.Usermaxuploadfilesize) {
		return true
	}

	return false
}

// SetUsermaxuploadfilesize gets a reference to the given int32 and assigns it to the Usermaxuploadfilesize field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUsermaxuploadfilesize(v int32) {
	o.Usermaxuploadfilesize = &v
}

// GetUsername returns the Username field value
func (o *CoreWebserviceGetSiteInfo200Response) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetUsername(v string) {
	o.Username = v
}

// GetUserpictureurl returns the Userpictureurl field value
func (o *CoreWebserviceGetSiteInfo200Response) GetUserpictureurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Userpictureurl
}

// GetUserpictureurlOk returns a tuple with the Userpictureurl field value
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserpictureurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Userpictureurl, true
}

// SetUserpictureurl sets field value
func (o *CoreWebserviceGetSiteInfo200Response) SetUserpictureurl(v string) {
	o.Userpictureurl = v
}

// GetUserprivateaccesskey returns the Userprivateaccesskey field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserprivateaccesskey() string {
	if o == nil || IsNil(o.Userprivateaccesskey) {
		var ret string
		return ret
	}
	return *o.Userprivateaccesskey
}

// GetUserprivateaccesskeyOk returns a tuple with the Userprivateaccesskey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserprivateaccesskeyOk() (*string, bool) {
	if o == nil || IsNil(o.Userprivateaccesskey) {
		return nil, false
	}
	return o.Userprivateaccesskey, true
}

// HasUserprivateaccesskey returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUserprivateaccesskey() bool {
	if o != nil && !IsNil(o.Userprivateaccesskey) {
		return true
	}

	return false
}

// SetUserprivateaccesskey gets a reference to the given string and assigns it to the Userprivateaccesskey field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUserprivateaccesskey(v string) {
	o.Userprivateaccesskey = &v
}

// GetUserquota returns the Userquota field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserquota() int32 {
	if o == nil || IsNil(o.Userquota) {
		var ret int32
		return ret
	}
	return *o.Userquota
}

// GetUserquotaOk returns a tuple with the Userquota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUserquotaOk() (*int32, bool) {
	if o == nil || IsNil(o.Userquota) {
		return nil, false
	}
	return o.Userquota, true
}

// HasUserquota returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUserquota() bool {
	if o != nil && !IsNil(o.Userquota) {
		return true
	}

	return false
}

// SetUserquota gets a reference to the given int32 and assigns it to the Userquota field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUserquota(v int32) {
	o.Userquota = &v
}

// GetUsersessionscount returns the Usersessionscount field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsersessionscount() int32 {
	if o == nil || IsNil(o.Usersessionscount) {
		var ret int32
		return ret
	}
	return *o.Usersessionscount
}

// GetUsersessionscountOk returns a tuple with the Usersessionscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetUsersessionscountOk() (*int32, bool) {
	if o == nil || IsNil(o.Usersessionscount) {
		return nil, false
	}
	return o.Usersessionscount, true
}

// HasUsersessionscount returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasUsersessionscount() bool {
	if o != nil && !IsNil(o.Usersessionscount) {
		return true
	}

	return false
}

// SetUsersessionscount gets a reference to the given int32 and assigns it to the Usersessionscount field.
func (o *CoreWebserviceGetSiteInfo200Response) SetUsersessionscount(v int32) {
	o.Usersessionscount = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CoreWebserviceGetSiteInfo200Response) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreWebserviceGetSiteInfo200Response) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CoreWebserviceGetSiteInfo200Response) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CoreWebserviceGetSiteInfo200Response) SetVersion(v string) {
	o.Version = &v
}

func (o CoreWebserviceGetSiteInfo200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreWebserviceGetSiteInfo200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Advancedfeatures) {
		toSerialize["advancedfeatures"] = o.Advancedfeatures
	}
	if !IsNil(o.Downloadfiles) {
		toSerialize["downloadfiles"] = o.Downloadfiles
	}
	toSerialize["firstname"] = o.Firstname
	toSerialize["fullname"] = o.Fullname
	toSerialize["functions"] = o.Functions
	toSerialize["lang"] = o.Lang
	toSerialize["lastname"] = o.Lastname
	if !IsNil(o.Limitconcurrentlogins) {
		toSerialize["limitconcurrentlogins"] = o.Limitconcurrentlogins
	}
	if !IsNil(o.Mobilecssurl) {
		toSerialize["mobilecssurl"] = o.Mobilecssurl
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.Sitecalendartype) {
		toSerialize["sitecalendartype"] = o.Sitecalendartype
	}
	if !IsNil(o.Siteid) {
		toSerialize["siteid"] = o.Siteid
	}
	toSerialize["sitename"] = o.Sitename
	toSerialize["siteurl"] = o.Siteurl
	if !IsNil(o.Theme) {
		toSerialize["theme"] = o.Theme
	}
	if !IsNil(o.Uploadfiles) {
		toSerialize["uploadfiles"] = o.Uploadfiles
	}
	if !IsNil(o.Usercalendartype) {
		toSerialize["usercalendartype"] = o.Usercalendartype
	}
	if !IsNil(o.Usercanmanageownfiles) {
		toSerialize["usercanmanageownfiles"] = o.Usercanmanageownfiles
	}
	if !IsNil(o.Userhomepage) {
		toSerialize["userhomepage"] = o.Userhomepage
	}
	toSerialize["userid"] = o.Userid
	if !IsNil(o.Userissiteadmin) {
		toSerialize["userissiteadmin"] = o.Userissiteadmin
	}
	if !IsNil(o.Usermaxuploadfilesize) {
		toSerialize["usermaxuploadfilesize"] = o.Usermaxuploadfilesize
	}
	toSerialize["username"] = o.Username
	toSerialize["userpictureurl"] = o.Userpictureurl
	if !IsNil(o.Userprivateaccesskey) {
		toSerialize["userprivateaccesskey"] = o.Userprivateaccesskey
	}
	if !IsNil(o.Userquota) {
		toSerialize["userquota"] = o.Userquota
	}
	if !IsNil(o.Usersessionscount) {
		toSerialize["usersessionscount"] = o.Usersessionscount
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *CoreWebserviceGetSiteInfo200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstname",
		"fullname",
		"functions",
		"lang",
		"lastname",
		"sitename",
		"siteurl",
		"userid",
		"username",
		"userpictureurl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreWebserviceGetSiteInfo200Response := _CoreWebserviceGetSiteInfo200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreWebserviceGetSiteInfo200Response)

	if err != nil {
		return err
	}

	*o = CoreWebserviceGetSiteInfo200Response(varCoreWebserviceGetSiteInfo200Response)

	return err
}

type NullableCoreWebserviceGetSiteInfo200Response struct {
	value *CoreWebserviceGetSiteInfo200Response
	isSet bool
}

func (v NullableCoreWebserviceGetSiteInfo200Response) Get() *CoreWebserviceGetSiteInfo200Response {
	return v.value
}

func (v *NullableCoreWebserviceGetSiteInfo200Response) Set(val *CoreWebserviceGetSiteInfo200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreWebserviceGetSiteInfo200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreWebserviceGetSiteInfo200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreWebserviceGetSiteInfo200Response(val *CoreWebserviceGetSiteInfo200Response) *NullableCoreWebserviceGetSiteInfo200Response {
	return &NullableCoreWebserviceGetSiteInfo200Response{value: val, isSet: true}
}

func (v NullableCoreWebserviceGetSiteInfo200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreWebserviceGetSiteInfo200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


