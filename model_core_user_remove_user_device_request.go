/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreUserRemoveUserDeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreUserRemoveUserDeviceRequest{}

// CoreUserRemoveUserDeviceRequest struct for CoreUserRemoveUserDeviceRequest
type CoreUserRemoveUserDeviceRequest struct {
	// the app id, if empty devices matching the UUID for the user will be removed
	Appid *string `json:"appid,omitempty"`
	// the device UUID
	Uuid string `json:"uuid"`
}

type _CoreUserRemoveUserDeviceRequest CoreUserRemoveUserDeviceRequest

// NewCoreUserRemoveUserDeviceRequest instantiates a new CoreUserRemoveUserDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreUserRemoveUserDeviceRequest(uuid string) *CoreUserRemoveUserDeviceRequest {
	this := CoreUserRemoveUserDeviceRequest{}
	var appid string = ""
	this.Appid = &appid
	this.Uuid = uuid
	return &this
}

// NewCoreUserRemoveUserDeviceRequestWithDefaults instantiates a new CoreUserRemoveUserDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreUserRemoveUserDeviceRequestWithDefaults() *CoreUserRemoveUserDeviceRequest {
	this := CoreUserRemoveUserDeviceRequest{}
	var appid string = ""
	this.Appid = &appid
	return &this
}

// GetAppid returns the Appid field value if set, zero value otherwise.
func (o *CoreUserRemoveUserDeviceRequest) GetAppid() string {
	if o == nil || IsNil(o.Appid) {
		var ret string
		return ret
	}
	return *o.Appid
}

// GetAppidOk returns a tuple with the Appid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreUserRemoveUserDeviceRequest) GetAppidOk() (*string, bool) {
	if o == nil || IsNil(o.Appid) {
		return nil, false
	}
	return o.Appid, true
}

// HasAppid returns a boolean if a field has been set.
func (o *CoreUserRemoveUserDeviceRequest) HasAppid() bool {
	if o != nil && !IsNil(o.Appid) {
		return true
	}

	return false
}

// SetAppid gets a reference to the given string and assigns it to the Appid field.
func (o *CoreUserRemoveUserDeviceRequest) SetAppid(v string) {
	o.Appid = &v
}

// GetUuid returns the Uuid field value
func (o *CoreUserRemoveUserDeviceRequest) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *CoreUserRemoveUserDeviceRequest) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *CoreUserRemoveUserDeviceRequest) SetUuid(v string) {
	o.Uuid = v
}

func (o CoreUserRemoveUserDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreUserRemoveUserDeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Appid) {
		toSerialize["appid"] = o.Appid
	}
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *CoreUserRemoveUserDeviceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreUserRemoveUserDeviceRequest := _CoreUserRemoveUserDeviceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreUserRemoveUserDeviceRequest)

	if err != nil {
		return err
	}

	*o = CoreUserRemoveUserDeviceRequest(varCoreUserRemoveUserDeviceRequest)

	return err
}

type NullableCoreUserRemoveUserDeviceRequest struct {
	value *CoreUserRemoveUserDeviceRequest
	isSet bool
}

func (v NullableCoreUserRemoveUserDeviceRequest) Get() *CoreUserRemoveUserDeviceRequest {
	return v.value
}

func (v *NullableCoreUserRemoveUserDeviceRequest) Set(val *CoreUserRemoveUserDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreUserRemoveUserDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreUserRemoveUserDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreUserRemoveUserDeviceRequest(val *CoreUserRemoveUserDeviceRequest) *NullableCoreUserRemoveUserDeviceRequest {
	return &NullableCoreUserRemoveUserDeviceRequest{value: val, isSet: true}
}

func (v NullableCoreUserRemoveUserDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreUserRemoveUserDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


