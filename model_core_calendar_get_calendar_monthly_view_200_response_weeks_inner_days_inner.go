/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner{}

// CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner struct for CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
type CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner struct {
	Calendareventtypes []map[string]interface{} `json:"calendareventtypes,omitempty"`
	// daytitle
	Daytitle *string `json:"daytitle,omitempty"`
	Events []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner `json:"events,omitempty"`
	// hasevents
	Hasevents *bool `json:"hasevents,omitempty"`
	// haslastdayofevent
	Haslastdayofevent *bool `json:"haslastdayofevent,omitempty"`
	// hours
	Hours *int32 `json:"hours,omitempty"`
	// istoday
	Istoday *bool `json:"istoday,omitempty"`
	// isweekend
	Isweekend *bool `json:"isweekend,omitempty"`
	// mday
	Mday *int32 `json:"mday,omitempty"`
	// minutes
	Minutes *int32 `json:"minutes,omitempty"`
	// neweventtimestamp
	Neweventtimestamp *int32 `json:"neweventtimestamp,omitempty"`
	// nextperiod
	Nextperiod *int32 `json:"nextperiod,omitempty"`
	// popovertitle
	Popovertitle *string `json:"popovertitle,omitempty"`
	// previousperiod
	Previousperiod *int32 `json:"previousperiod,omitempty"`
	// seconds
	Seconds *int32 `json:"seconds,omitempty"`
	// timestamp
	Timestamp *int32 `json:"timestamp,omitempty"`
	// viewdaylink
	Viewdaylink *string `json:"viewdaylink,omitempty"`
	// viewdaylinktitle
	Viewdaylinktitle *string `json:"viewdaylinktitle,omitempty"`
	// wday
	Wday *int32 `json:"wday,omitempty"`
	// yday
	Yday *int32 `json:"yday,omitempty"`
	// year
	Year *int32 `json:"year,omitempty"`
}

// NewCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner instantiates a new CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner() *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
	this := CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner{}
	var daytitle string = "null"
	this.Daytitle = &daytitle
	var hasevents bool = false
	this.Hasevents = &hasevents
	var haslastdayofevent bool = false
	this.Haslastdayofevent = &haslastdayofevent
	var istoday bool = false
	this.Istoday = &istoday
	var isweekend bool = false
	this.Isweekend = &isweekend
	var nextperiod int32 = null
	this.Nextperiod = &nextperiod
	var popovertitle string = ""
	this.Popovertitle = &popovertitle
	var previousperiod int32 = null
	this.Previousperiod = &previousperiod
	var viewdaylink string = "null"
	this.Viewdaylink = &viewdaylink
	var viewdaylinktitle string = "null"
	this.Viewdaylinktitle = &viewdaylinktitle
	return &this
}

// NewCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerWithDefaults instantiates a new CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerWithDefaults() *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
	this := CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner{}
	var daytitle string = "null"
	this.Daytitle = &daytitle
	var hasevents bool = false
	this.Hasevents = &hasevents
	var haslastdayofevent bool = false
	this.Haslastdayofevent = &haslastdayofevent
	var istoday bool = false
	this.Istoday = &istoday
	var isweekend bool = false
	this.Isweekend = &isweekend
	var nextperiod int32 = null
	this.Nextperiod = &nextperiod
	var popovertitle string = ""
	this.Popovertitle = &popovertitle
	var previousperiod int32 = null
	this.Previousperiod = &previousperiod
	var viewdaylink string = "null"
	this.Viewdaylink = &viewdaylink
	var viewdaylinktitle string = "null"
	this.Viewdaylinktitle = &viewdaylinktitle
	return &this
}

// GetCalendareventtypes returns the Calendareventtypes field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetCalendareventtypes() []map[string]interface{} {
	if o == nil || IsNil(o.Calendareventtypes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Calendareventtypes
}

// GetCalendareventtypesOk returns a tuple with the Calendareventtypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetCalendareventtypesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Calendareventtypes) {
		return nil, false
	}
	return o.Calendareventtypes, true
}

// HasCalendareventtypes returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasCalendareventtypes() bool {
	if o != nil && !IsNil(o.Calendareventtypes) {
		return true
	}

	return false
}

// SetCalendareventtypes gets a reference to the given []map[string]interface{} and assigns it to the Calendareventtypes field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetCalendareventtypes(v []map[string]interface{}) {
	o.Calendareventtypes = v
}

// GetDaytitle returns the Daytitle field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetDaytitle() string {
	if o == nil || IsNil(o.Daytitle) {
		var ret string
		return ret
	}
	return *o.Daytitle
}

// GetDaytitleOk returns a tuple with the Daytitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetDaytitleOk() (*string, bool) {
	if o == nil || IsNil(o.Daytitle) {
		return nil, false
	}
	return o.Daytitle, true
}

// HasDaytitle returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasDaytitle() bool {
	if o != nil && !IsNil(o.Daytitle) {
		return true
	}

	return false
}

// SetDaytitle gets a reference to the given string and assigns it to the Daytitle field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetDaytitle(v string) {
	o.Daytitle = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetEvents() []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner {
	if o == nil || IsNil(o.Events) {
		var ret []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetEventsOk() ([]CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner and assigns it to the Events field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetEvents(v []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner) {
	o.Events = v
}

// GetHasevents returns the Hasevents field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetHasevents() bool {
	if o == nil || IsNil(o.Hasevents) {
		var ret bool
		return ret
	}
	return *o.Hasevents
}

// GetHaseventsOk returns a tuple with the Hasevents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetHaseventsOk() (*bool, bool) {
	if o == nil || IsNil(o.Hasevents) {
		return nil, false
	}
	return o.Hasevents, true
}

// HasHasevents returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasHasevents() bool {
	if o != nil && !IsNil(o.Hasevents) {
		return true
	}

	return false
}

// SetHasevents gets a reference to the given bool and assigns it to the Hasevents field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetHasevents(v bool) {
	o.Hasevents = &v
}

// GetHaslastdayofevent returns the Haslastdayofevent field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetHaslastdayofevent() bool {
	if o == nil || IsNil(o.Haslastdayofevent) {
		var ret bool
		return ret
	}
	return *o.Haslastdayofevent
}

// GetHaslastdayofeventOk returns a tuple with the Haslastdayofevent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetHaslastdayofeventOk() (*bool, bool) {
	if o == nil || IsNil(o.Haslastdayofevent) {
		return nil, false
	}
	return o.Haslastdayofevent, true
}

// HasHaslastdayofevent returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasHaslastdayofevent() bool {
	if o != nil && !IsNil(o.Haslastdayofevent) {
		return true
	}

	return false
}

// SetHaslastdayofevent gets a reference to the given bool and assigns it to the Haslastdayofevent field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetHaslastdayofevent(v bool) {
	o.Haslastdayofevent = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetHours() int32 {
	if o == nil || IsNil(o.Hours) {
		var ret int32
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given int32 and assigns it to the Hours field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetHours(v int32) {
	o.Hours = &v
}

// GetIstoday returns the Istoday field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetIstoday() bool {
	if o == nil || IsNil(o.Istoday) {
		var ret bool
		return ret
	}
	return *o.Istoday
}

// GetIstodayOk returns a tuple with the Istoday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetIstodayOk() (*bool, bool) {
	if o == nil || IsNil(o.Istoday) {
		return nil, false
	}
	return o.Istoday, true
}

// HasIstoday returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasIstoday() bool {
	if o != nil && !IsNil(o.Istoday) {
		return true
	}

	return false
}

// SetIstoday gets a reference to the given bool and assigns it to the Istoday field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetIstoday(v bool) {
	o.Istoday = &v
}

// GetIsweekend returns the Isweekend field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetIsweekend() bool {
	if o == nil || IsNil(o.Isweekend) {
		var ret bool
		return ret
	}
	return *o.Isweekend
}

// GetIsweekendOk returns a tuple with the Isweekend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetIsweekendOk() (*bool, bool) {
	if o == nil || IsNil(o.Isweekend) {
		return nil, false
	}
	return o.Isweekend, true
}

// HasIsweekend returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasIsweekend() bool {
	if o != nil && !IsNil(o.Isweekend) {
		return true
	}

	return false
}

// SetIsweekend gets a reference to the given bool and assigns it to the Isweekend field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetIsweekend(v bool) {
	o.Isweekend = &v
}

// GetMday returns the Mday field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetMday() int32 {
	if o == nil || IsNil(o.Mday) {
		var ret int32
		return ret
	}
	return *o.Mday
}

// GetMdayOk returns a tuple with the Mday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetMdayOk() (*int32, bool) {
	if o == nil || IsNil(o.Mday) {
		return nil, false
	}
	return o.Mday, true
}

// HasMday returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasMday() bool {
	if o != nil && !IsNil(o.Mday) {
		return true
	}

	return false
}

// SetMday gets a reference to the given int32 and assigns it to the Mday field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetMday(v int32) {
	o.Mday = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetMinutes() int32 {
	if o == nil || IsNil(o.Minutes) {
		var ret int32
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.Minutes) {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasMinutes() bool {
	if o != nil && !IsNil(o.Minutes) {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given int32 and assigns it to the Minutes field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetMinutes(v int32) {
	o.Minutes = &v
}

// GetNeweventtimestamp returns the Neweventtimestamp field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetNeweventtimestamp() int32 {
	if o == nil || IsNil(o.Neweventtimestamp) {
		var ret int32
		return ret
	}
	return *o.Neweventtimestamp
}

// GetNeweventtimestampOk returns a tuple with the Neweventtimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetNeweventtimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Neweventtimestamp) {
		return nil, false
	}
	return o.Neweventtimestamp, true
}

// HasNeweventtimestamp returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasNeweventtimestamp() bool {
	if o != nil && !IsNil(o.Neweventtimestamp) {
		return true
	}

	return false
}

// SetNeweventtimestamp gets a reference to the given int32 and assigns it to the Neweventtimestamp field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetNeweventtimestamp(v int32) {
	o.Neweventtimestamp = &v
}

// GetNextperiod returns the Nextperiod field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetNextperiod() int32 {
	if o == nil || IsNil(o.Nextperiod) {
		var ret int32
		return ret
	}
	return *o.Nextperiod
}

// GetNextperiodOk returns a tuple with the Nextperiod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetNextperiodOk() (*int32, bool) {
	if o == nil || IsNil(o.Nextperiod) {
		return nil, false
	}
	return o.Nextperiod, true
}

// HasNextperiod returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasNextperiod() bool {
	if o != nil && !IsNil(o.Nextperiod) {
		return true
	}

	return false
}

// SetNextperiod gets a reference to the given int32 and assigns it to the Nextperiod field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetNextperiod(v int32) {
	o.Nextperiod = &v
}

// GetPopovertitle returns the Popovertitle field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetPopovertitle() string {
	if o == nil || IsNil(o.Popovertitle) {
		var ret string
		return ret
	}
	return *o.Popovertitle
}

// GetPopovertitleOk returns a tuple with the Popovertitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetPopovertitleOk() (*string, bool) {
	if o == nil || IsNil(o.Popovertitle) {
		return nil, false
	}
	return o.Popovertitle, true
}

// HasPopovertitle returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasPopovertitle() bool {
	if o != nil && !IsNil(o.Popovertitle) {
		return true
	}

	return false
}

// SetPopovertitle gets a reference to the given string and assigns it to the Popovertitle field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetPopovertitle(v string) {
	o.Popovertitle = &v
}

// GetPreviousperiod returns the Previousperiod field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetPreviousperiod() int32 {
	if o == nil || IsNil(o.Previousperiod) {
		var ret int32
		return ret
	}
	return *o.Previousperiod
}

// GetPreviousperiodOk returns a tuple with the Previousperiod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetPreviousperiodOk() (*int32, bool) {
	if o == nil || IsNil(o.Previousperiod) {
		return nil, false
	}
	return o.Previousperiod, true
}

// HasPreviousperiod returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasPreviousperiod() bool {
	if o != nil && !IsNil(o.Previousperiod) {
		return true
	}

	return false
}

// SetPreviousperiod gets a reference to the given int32 and assigns it to the Previousperiod field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetPreviousperiod(v int32) {
	o.Previousperiod = &v
}

// GetSeconds returns the Seconds field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetSeconds() int32 {
	if o == nil || IsNil(o.Seconds) {
		var ret int32
		return ret
	}
	return *o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.Seconds) {
		return nil, false
	}
	return o.Seconds, true
}

// HasSeconds returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasSeconds() bool {
	if o != nil && !IsNil(o.Seconds) {
		return true
	}

	return false
}

// SetSeconds gets a reference to the given int32 and assigns it to the Seconds field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetSeconds(v int32) {
	o.Seconds = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetViewdaylink returns the Viewdaylink field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetViewdaylink() string {
	if o == nil || IsNil(o.Viewdaylink) {
		var ret string
		return ret
	}
	return *o.Viewdaylink
}

// GetViewdaylinkOk returns a tuple with the Viewdaylink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetViewdaylinkOk() (*string, bool) {
	if o == nil || IsNil(o.Viewdaylink) {
		return nil, false
	}
	return o.Viewdaylink, true
}

// HasViewdaylink returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasViewdaylink() bool {
	if o != nil && !IsNil(o.Viewdaylink) {
		return true
	}

	return false
}

// SetViewdaylink gets a reference to the given string and assigns it to the Viewdaylink field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetViewdaylink(v string) {
	o.Viewdaylink = &v
}

// GetViewdaylinktitle returns the Viewdaylinktitle field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetViewdaylinktitle() string {
	if o == nil || IsNil(o.Viewdaylinktitle) {
		var ret string
		return ret
	}
	return *o.Viewdaylinktitle
}

// GetViewdaylinktitleOk returns a tuple with the Viewdaylinktitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetViewdaylinktitleOk() (*string, bool) {
	if o == nil || IsNil(o.Viewdaylinktitle) {
		return nil, false
	}
	return o.Viewdaylinktitle, true
}

// HasViewdaylinktitle returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasViewdaylinktitle() bool {
	if o != nil && !IsNil(o.Viewdaylinktitle) {
		return true
	}

	return false
}

// SetViewdaylinktitle gets a reference to the given string and assigns it to the Viewdaylinktitle field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetViewdaylinktitle(v string) {
	o.Viewdaylinktitle = &v
}

// GetWday returns the Wday field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetWday() int32 {
	if o == nil || IsNil(o.Wday) {
		var ret int32
		return ret
	}
	return *o.Wday
}

// GetWdayOk returns a tuple with the Wday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetWdayOk() (*int32, bool) {
	if o == nil || IsNil(o.Wday) {
		return nil, false
	}
	return o.Wday, true
}

// HasWday returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasWday() bool {
	if o != nil && !IsNil(o.Wday) {
		return true
	}

	return false
}

// SetWday gets a reference to the given int32 and assigns it to the Wday field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetWday(v int32) {
	o.Wday = &v
}

// GetYday returns the Yday field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetYday() int32 {
	if o == nil || IsNil(o.Yday) {
		var ret int32
		return ret
	}
	return *o.Yday
}

// GetYdayOk returns a tuple with the Yday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetYdayOk() (*int32, bool) {
	if o == nil || IsNil(o.Yday) {
		return nil, false
	}
	return o.Yday, true
}

// HasYday returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasYday() bool {
	if o != nil && !IsNil(o.Yday) {
		return true
	}

	return false
}

// SetYday gets a reference to the given int32 and assigns it to the Yday field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetYday(v int32) {
	o.Yday = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) SetYear(v int32) {
	o.Year = &v
}

func (o CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Calendareventtypes) {
		toSerialize["calendareventtypes"] = o.Calendareventtypes
	}
	if !IsNil(o.Daytitle) {
		toSerialize["daytitle"] = o.Daytitle
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Hasevents) {
		toSerialize["hasevents"] = o.Hasevents
	}
	if !IsNil(o.Haslastdayofevent) {
		toSerialize["haslastdayofevent"] = o.Haslastdayofevent
	}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.Istoday) {
		toSerialize["istoday"] = o.Istoday
	}
	if !IsNil(o.Isweekend) {
		toSerialize["isweekend"] = o.Isweekend
	}
	if !IsNil(o.Mday) {
		toSerialize["mday"] = o.Mday
	}
	if !IsNil(o.Minutes) {
		toSerialize["minutes"] = o.Minutes
	}
	if !IsNil(o.Neweventtimestamp) {
		toSerialize["neweventtimestamp"] = o.Neweventtimestamp
	}
	if !IsNil(o.Nextperiod) {
		toSerialize["nextperiod"] = o.Nextperiod
	}
	if !IsNil(o.Popovertitle) {
		toSerialize["popovertitle"] = o.Popovertitle
	}
	if !IsNil(o.Previousperiod) {
		toSerialize["previousperiod"] = o.Previousperiod
	}
	if !IsNil(o.Seconds) {
		toSerialize["seconds"] = o.Seconds
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Viewdaylink) {
		toSerialize["viewdaylink"] = o.Viewdaylink
	}
	if !IsNil(o.Viewdaylinktitle) {
		toSerialize["viewdaylinktitle"] = o.Viewdaylinktitle
	}
	if !IsNil(o.Wday) {
		toSerialize["wday"] = o.Wday
	}
	if !IsNil(o.Yday) {
		toSerialize["yday"] = o.Yday
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	return toSerialize, nil
}

type NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner struct {
	value *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
	isSet bool
}

func (v NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) Get() *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) Set(val *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner(val *CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) *NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
	return &NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


