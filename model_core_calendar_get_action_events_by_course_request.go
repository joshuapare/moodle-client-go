/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCalendarGetActionEventsByCourseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetActionEventsByCourseRequest{}

// CoreCalendarGetActionEventsByCourseRequest struct for CoreCalendarGetActionEventsByCourseRequest
type CoreCalendarGetActionEventsByCourseRequest struct {
	// The last seen event id
	Aftereventid *int32 `json:"aftereventid,omitempty"`
	// Course id
	Courseid int32 `json:"courseid"`
	// Limit number
	Limitnum *int32 `json:"limitnum,omitempty"`
	// The value a user wishes to search against
	Searchvalue *string `json:"searchvalue,omitempty"`
	// Time sort from
	Timesortfrom *int32 `json:"timesortfrom,omitempty"`
	// Time sort to
	Timesortto *int32 `json:"timesortto,omitempty"`
}

type _CoreCalendarGetActionEventsByCourseRequest CoreCalendarGetActionEventsByCourseRequest

// NewCoreCalendarGetActionEventsByCourseRequest instantiates a new CoreCalendarGetActionEventsByCourseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetActionEventsByCourseRequest(courseid int32) *CoreCalendarGetActionEventsByCourseRequest {
	this := CoreCalendarGetActionEventsByCourseRequest{}
	var aftereventid int32 = 0
	this.Aftereventid = &aftereventid
	this.Courseid = courseid
	var limitnum int32 = 20
	this.Limitnum = &limitnum
	var searchvalue string = "null"
	this.Searchvalue = &searchvalue
	var timesortfrom int32 = null
	this.Timesortfrom = &timesortfrom
	var timesortto int32 = null
	this.Timesortto = &timesortto
	return &this
}

// NewCoreCalendarGetActionEventsByCourseRequestWithDefaults instantiates a new CoreCalendarGetActionEventsByCourseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetActionEventsByCourseRequestWithDefaults() *CoreCalendarGetActionEventsByCourseRequest {
	this := CoreCalendarGetActionEventsByCourseRequest{}
	var aftereventid int32 = 0
	this.Aftereventid = &aftereventid
	var limitnum int32 = 20
	this.Limitnum = &limitnum
	var searchvalue string = "null"
	this.Searchvalue = &searchvalue
	var timesortfrom int32 = null
	this.Timesortfrom = &timesortfrom
	var timesortto int32 = null
	this.Timesortto = &timesortto
	return &this
}

// GetAftereventid returns the Aftereventid field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetAftereventid() int32 {
	if o == nil || IsNil(o.Aftereventid) {
		var ret int32
		return ret
	}
	return *o.Aftereventid
}

// GetAftereventidOk returns a tuple with the Aftereventid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetAftereventidOk() (*int32, bool) {
	if o == nil || IsNil(o.Aftereventid) {
		return nil, false
	}
	return o.Aftereventid, true
}

// HasAftereventid returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) HasAftereventid() bool {
	if o != nil && !IsNil(o.Aftereventid) {
		return true
	}

	return false
}

// SetAftereventid gets a reference to the given int32 and assigns it to the Aftereventid field.
func (o *CoreCalendarGetActionEventsByCourseRequest) SetAftereventid(v int32) {
	o.Aftereventid = &v
}

// GetCourseid returns the Courseid field value
func (o *CoreCalendarGetActionEventsByCourseRequest) GetCourseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetCourseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Courseid, true
}

// SetCourseid sets field value
func (o *CoreCalendarGetActionEventsByCourseRequest) SetCourseid(v int32) {
	o.Courseid = v
}

// GetLimitnum returns the Limitnum field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetLimitnum() int32 {
	if o == nil || IsNil(o.Limitnum) {
		var ret int32
		return ret
	}
	return *o.Limitnum
}

// GetLimitnumOk returns a tuple with the Limitnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetLimitnumOk() (*int32, bool) {
	if o == nil || IsNil(o.Limitnum) {
		return nil, false
	}
	return o.Limitnum, true
}

// HasLimitnum returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) HasLimitnum() bool {
	if o != nil && !IsNil(o.Limitnum) {
		return true
	}

	return false
}

// SetLimitnum gets a reference to the given int32 and assigns it to the Limitnum field.
func (o *CoreCalendarGetActionEventsByCourseRequest) SetLimitnum(v int32) {
	o.Limitnum = &v
}

// GetSearchvalue returns the Searchvalue field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetSearchvalue() string {
	if o == nil || IsNil(o.Searchvalue) {
		var ret string
		return ret
	}
	return *o.Searchvalue
}

// GetSearchvalueOk returns a tuple with the Searchvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetSearchvalueOk() (*string, bool) {
	if o == nil || IsNil(o.Searchvalue) {
		return nil, false
	}
	return o.Searchvalue, true
}

// HasSearchvalue returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) HasSearchvalue() bool {
	if o != nil && !IsNil(o.Searchvalue) {
		return true
	}

	return false
}

// SetSearchvalue gets a reference to the given string and assigns it to the Searchvalue field.
func (o *CoreCalendarGetActionEventsByCourseRequest) SetSearchvalue(v string) {
	o.Searchvalue = &v
}

// GetTimesortfrom returns the Timesortfrom field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetTimesortfrom() int32 {
	if o == nil || IsNil(o.Timesortfrom) {
		var ret int32
		return ret
	}
	return *o.Timesortfrom
}

// GetTimesortfromOk returns a tuple with the Timesortfrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetTimesortfromOk() (*int32, bool) {
	if o == nil || IsNil(o.Timesortfrom) {
		return nil, false
	}
	return o.Timesortfrom, true
}

// HasTimesortfrom returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) HasTimesortfrom() bool {
	if o != nil && !IsNil(o.Timesortfrom) {
		return true
	}

	return false
}

// SetTimesortfrom gets a reference to the given int32 and assigns it to the Timesortfrom field.
func (o *CoreCalendarGetActionEventsByCourseRequest) SetTimesortfrom(v int32) {
	o.Timesortfrom = &v
}

// GetTimesortto returns the Timesortto field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetTimesortto() int32 {
	if o == nil || IsNil(o.Timesortto) {
		var ret int32
		return ret
	}
	return *o.Timesortto
}

// GetTimesorttoOk returns a tuple with the Timesortto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) GetTimesorttoOk() (*int32, bool) {
	if o == nil || IsNil(o.Timesortto) {
		return nil, false
	}
	return o.Timesortto, true
}

// HasTimesortto returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByCourseRequest) HasTimesortto() bool {
	if o != nil && !IsNil(o.Timesortto) {
		return true
	}

	return false
}

// SetTimesortto gets a reference to the given int32 and assigns it to the Timesortto field.
func (o *CoreCalendarGetActionEventsByCourseRequest) SetTimesortto(v int32) {
	o.Timesortto = &v
}

func (o CoreCalendarGetActionEventsByCourseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetActionEventsByCourseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aftereventid) {
		toSerialize["aftereventid"] = o.Aftereventid
	}
	toSerialize["courseid"] = o.Courseid
	if !IsNil(o.Limitnum) {
		toSerialize["limitnum"] = o.Limitnum
	}
	if !IsNil(o.Searchvalue) {
		toSerialize["searchvalue"] = o.Searchvalue
	}
	if !IsNil(o.Timesortfrom) {
		toSerialize["timesortfrom"] = o.Timesortfrom
	}
	if !IsNil(o.Timesortto) {
		toSerialize["timesortto"] = o.Timesortto
	}
	return toSerialize, nil
}

func (o *CoreCalendarGetActionEventsByCourseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"courseid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCalendarGetActionEventsByCourseRequest := _CoreCalendarGetActionEventsByCourseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCalendarGetActionEventsByCourseRequest)

	if err != nil {
		return err
	}

	*o = CoreCalendarGetActionEventsByCourseRequest(varCoreCalendarGetActionEventsByCourseRequest)

	return err
}

type NullableCoreCalendarGetActionEventsByCourseRequest struct {
	value *CoreCalendarGetActionEventsByCourseRequest
	isSet bool
}

func (v NullableCoreCalendarGetActionEventsByCourseRequest) Get() *CoreCalendarGetActionEventsByCourseRequest {
	return v.value
}

func (v *NullableCoreCalendarGetActionEventsByCourseRequest) Set(val *CoreCalendarGetActionEventsByCourseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetActionEventsByCourseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetActionEventsByCourseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetActionEventsByCourseRequest(val *CoreCalendarGetActionEventsByCourseRequest) *NullableCoreCalendarGetActionEventsByCourseRequest {
	return &NullableCoreCalendarGetActionEventsByCourseRequest{value: val, isSet: true}
}

func (v NullableCoreCalendarGetActionEventsByCourseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetActionEventsByCourseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


