/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolLpDataForPlansPage200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolLpDataForPlansPage200Response{}

// ToolLpDataForPlansPage200Response struct for ToolLpDataForPlansPage200Response
type ToolLpDataForPlansPage200Response struct {
	// Can the current user manage the user's plans
	Canmanageuserplans bool `json:"canmanageuserplans"`
	// Can the current user view the user's evidence
	Canreaduserevidence bool `json:"canreaduserevidence"`
	Navigation []map[string]interface{} `json:"navigation"`
	Plans []ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner `json:"plans"`
	// Url to the tool_lp plugin folder on this Moodle site
	Pluginbaseurl string `json:"pluginbaseurl"`
	// The learning plan user id
	Userid int32 `json:"userid"`
}

type _ToolLpDataForPlansPage200Response ToolLpDataForPlansPage200Response

// NewToolLpDataForPlansPage200Response instantiates a new ToolLpDataForPlansPage200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolLpDataForPlansPage200Response(canmanageuserplans bool, canreaduserevidence bool, navigation []map[string]interface{}, plans []ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner, pluginbaseurl string, userid int32) *ToolLpDataForPlansPage200Response {
	this := ToolLpDataForPlansPage200Response{}
	this.Canmanageuserplans = canmanageuserplans
	this.Canreaduserevidence = canreaduserevidence
	this.Navigation = navigation
	this.Plans = plans
	this.Pluginbaseurl = pluginbaseurl
	this.Userid = userid
	return &this
}

// NewToolLpDataForPlansPage200ResponseWithDefaults instantiates a new ToolLpDataForPlansPage200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolLpDataForPlansPage200ResponseWithDefaults() *ToolLpDataForPlansPage200Response {
	this := ToolLpDataForPlansPage200Response{}
	var canmanageuserplans bool = null
	this.Canmanageuserplans = canmanageuserplans
	var canreaduserevidence bool = null
	this.Canreaduserevidence = canreaduserevidence
	var userid int32 = null
	this.Userid = userid
	return &this
}

// GetCanmanageuserplans returns the Canmanageuserplans field value
func (o *ToolLpDataForPlansPage200Response) GetCanmanageuserplans() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Canmanageuserplans
}

// GetCanmanageuserplansOk returns a tuple with the Canmanageuserplans field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlansPage200Response) GetCanmanageuserplansOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Canmanageuserplans, true
}

// SetCanmanageuserplans sets field value
func (o *ToolLpDataForPlansPage200Response) SetCanmanageuserplans(v bool) {
	o.Canmanageuserplans = v
}

// GetCanreaduserevidence returns the Canreaduserevidence field value
func (o *ToolLpDataForPlansPage200Response) GetCanreaduserevidence() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Canreaduserevidence
}

// GetCanreaduserevidenceOk returns a tuple with the Canreaduserevidence field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlansPage200Response) GetCanreaduserevidenceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Canreaduserevidence, true
}

// SetCanreaduserevidence sets field value
func (o *ToolLpDataForPlansPage200Response) SetCanreaduserevidence(v bool) {
	o.Canreaduserevidence = v
}

// GetNavigation returns the Navigation field value
func (o *ToolLpDataForPlansPage200Response) GetNavigation() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Navigation
}

// GetNavigationOk returns a tuple with the Navigation field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlansPage200Response) GetNavigationOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Navigation, true
}

// SetNavigation sets field value
func (o *ToolLpDataForPlansPage200Response) SetNavigation(v []map[string]interface{}) {
	o.Navigation = v
}

// GetPlans returns the Plans field value
func (o *ToolLpDataForPlansPage200Response) GetPlans() []ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner {
	if o == nil {
		var ret []ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlansPage200Response) GetPlansOk() ([]ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plans, true
}

// SetPlans sets field value
func (o *ToolLpDataForPlansPage200Response) SetPlans(v []ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner) {
	o.Plans = v
}

// GetPluginbaseurl returns the Pluginbaseurl field value
func (o *ToolLpDataForPlansPage200Response) GetPluginbaseurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pluginbaseurl
}

// GetPluginbaseurlOk returns a tuple with the Pluginbaseurl field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlansPage200Response) GetPluginbaseurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pluginbaseurl, true
}

// SetPluginbaseurl sets field value
func (o *ToolLpDataForPlansPage200Response) SetPluginbaseurl(v string) {
	o.Pluginbaseurl = v
}

// GetUserid returns the Userid field value
func (o *ToolLpDataForPlansPage200Response) GetUserid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Userid
}

// GetUseridOk returns a tuple with the Userid field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlansPage200Response) GetUseridOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Userid, true
}

// SetUserid sets field value
func (o *ToolLpDataForPlansPage200Response) SetUserid(v int32) {
	o.Userid = v
}

func (o ToolLpDataForPlansPage200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolLpDataForPlansPage200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["canmanageuserplans"] = o.Canmanageuserplans
	toSerialize["canreaduserevidence"] = o.Canreaduserevidence
	toSerialize["navigation"] = o.Navigation
	toSerialize["plans"] = o.Plans
	toSerialize["pluginbaseurl"] = o.Pluginbaseurl
	toSerialize["userid"] = o.Userid
	return toSerialize, nil
}

func (o *ToolLpDataForPlansPage200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"canmanageuserplans",
		"canreaduserevidence",
		"navigation",
		"plans",
		"pluginbaseurl",
		"userid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolLpDataForPlansPage200Response := _ToolLpDataForPlansPage200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolLpDataForPlansPage200Response)

	if err != nil {
		return err
	}

	*o = ToolLpDataForPlansPage200Response(varToolLpDataForPlansPage200Response)

	return err
}

type NullableToolLpDataForPlansPage200Response struct {
	value *ToolLpDataForPlansPage200Response
	isSet bool
}

func (v NullableToolLpDataForPlansPage200Response) Get() *ToolLpDataForPlansPage200Response {
	return v.value
}

func (v *NullableToolLpDataForPlansPage200Response) Set(val *ToolLpDataForPlansPage200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableToolLpDataForPlansPage200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableToolLpDataForPlansPage200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolLpDataForPlansPage200Response(val *ToolLpDataForPlansPage200Response) *NullableToolLpDataForPlansPage200Response {
	return &NullableToolLpDataForPlansPage200Response{value: val, isSet: true}
}

func (v NullableToolLpDataForPlansPage200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolLpDataForPlansPage200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


