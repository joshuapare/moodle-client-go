/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreQuestionGetRandomQuestionSummariesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreQuestionGetRandomQuestionSummariesRequest{}

// CoreQuestionGetRandomQuestionSummariesRequest struct for CoreQuestionGetRandomQuestionSummariesRequest
type CoreQuestionGetRandomQuestionSummariesRequest struct {
	// Category id to find random questions
	Categoryid int32 `json:"categoryid"`
	// Context id that the questions will be rendered in (used for exporting)
	Contextid int32 `json:"contextid"`
	// Include the subcategories in the search
	Includesubcategories bool `json:"includesubcategories"`
	// Maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
	// Number of items to skip from the begging of the result set
	Offset *int32 `json:"offset,omitempty"`
	Tagids []map[string]interface{} `json:"tagids"`
}

type _CoreQuestionGetRandomQuestionSummariesRequest CoreQuestionGetRandomQuestionSummariesRequest

// NewCoreQuestionGetRandomQuestionSummariesRequest instantiates a new CoreQuestionGetRandomQuestionSummariesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreQuestionGetRandomQuestionSummariesRequest(categoryid int32, contextid int32, includesubcategories bool, tagids []map[string]interface{}) *CoreQuestionGetRandomQuestionSummariesRequest {
	this := CoreQuestionGetRandomQuestionSummariesRequest{}
	this.Categoryid = categoryid
	this.Contextid = contextid
	this.Includesubcategories = includesubcategories
	var limit int32 = 0
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	this.Tagids = tagids
	return &this
}

// NewCoreQuestionGetRandomQuestionSummariesRequestWithDefaults instantiates a new CoreQuestionGetRandomQuestionSummariesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreQuestionGetRandomQuestionSummariesRequestWithDefaults() *CoreQuestionGetRandomQuestionSummariesRequest {
	this := CoreQuestionGetRandomQuestionSummariesRequest{}
	var categoryid int32 = null
	this.Categoryid = categoryid
	var contextid int32 = null
	this.Contextid = contextid
	var includesubcategories bool = null
	this.Includesubcategories = includesubcategories
	var limit int32 = 0
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// GetCategoryid returns the Categoryid field value
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetCategoryid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Categoryid
}

// GetCategoryidOk returns a tuple with the Categoryid field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetCategoryidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Categoryid, true
}

// SetCategoryid sets field value
func (o *CoreQuestionGetRandomQuestionSummariesRequest) SetCategoryid(v int32) {
	o.Categoryid = v
}

// GetContextid returns the Contextid field value
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetContextid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Contextid
}

// GetContextidOk returns a tuple with the Contextid field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetContextidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contextid, true
}

// SetContextid sets field value
func (o *CoreQuestionGetRandomQuestionSummariesRequest) SetContextid(v int32) {
	o.Contextid = v
}

// GetIncludesubcategories returns the Includesubcategories field value
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetIncludesubcategories() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Includesubcategories
}

// GetIncludesubcategoriesOk returns a tuple with the Includesubcategories field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetIncludesubcategoriesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Includesubcategories, true
}

// SetIncludesubcategories sets field value
func (o *CoreQuestionGetRandomQuestionSummariesRequest) SetIncludesubcategories(v bool) {
	o.Includesubcategories = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) SetOffset(v int32) {
	o.Offset = &v
}

// GetTagids returns the Tagids field value
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetTagids() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Tagids
}

// GetTagidsOk returns a tuple with the Tagids field value
// and a boolean to check if the value has been set.
func (o *CoreQuestionGetRandomQuestionSummariesRequest) GetTagidsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tagids, true
}

// SetTagids sets field value
func (o *CoreQuestionGetRandomQuestionSummariesRequest) SetTagids(v []map[string]interface{}) {
	o.Tagids = v
}

func (o CoreQuestionGetRandomQuestionSummariesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreQuestionGetRandomQuestionSummariesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["categoryid"] = o.Categoryid
	toSerialize["contextid"] = o.Contextid
	toSerialize["includesubcategories"] = o.Includesubcategories
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	toSerialize["tagids"] = o.Tagids
	return toSerialize, nil
}

func (o *CoreQuestionGetRandomQuestionSummariesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"categoryid",
		"contextid",
		"includesubcategories",
		"tagids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreQuestionGetRandomQuestionSummariesRequest := _CoreQuestionGetRandomQuestionSummariesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreQuestionGetRandomQuestionSummariesRequest)

	if err != nil {
		return err
	}

	*o = CoreQuestionGetRandomQuestionSummariesRequest(varCoreQuestionGetRandomQuestionSummariesRequest)

	return err
}

type NullableCoreQuestionGetRandomQuestionSummariesRequest struct {
	value *CoreQuestionGetRandomQuestionSummariesRequest
	isSet bool
}

func (v NullableCoreQuestionGetRandomQuestionSummariesRequest) Get() *CoreQuestionGetRandomQuestionSummariesRequest {
	return v.value
}

func (v *NullableCoreQuestionGetRandomQuestionSummariesRequest) Set(val *CoreQuestionGetRandomQuestionSummariesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreQuestionGetRandomQuestionSummariesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreQuestionGetRandomQuestionSummariesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreQuestionGetRandomQuestionSummariesRequest(val *CoreQuestionGetRandomQuestionSummariesRequest) *NullableCoreQuestionGetRandomQuestionSummariesRequest {
	return &NullableCoreQuestionGetRandomQuestionSummariesRequest{value: val, isSet: true}
}

func (v NullableCoreQuestionGetRandomQuestionSummariesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreQuestionGetRandomQuestionSummariesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


