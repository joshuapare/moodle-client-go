/*
Moodle Webservice API

Testing BlockIomadCompanyAdminAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package moodleclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/joshuapare/moodle-client-go"
)

func Test_moodleclient_BlockIomadCompanyAdminAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminAllocateLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminAllocateLicenses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminAssignCourses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminAssignCourses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminAssignUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminAssignUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminCapabilityDeleteTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminCapabilityDeleteTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminCheckToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminCheckToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminCreateCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminCreateCompanies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminCreateLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminCreateLicenses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminDeleteLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminDeleteLicenses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminEditCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminEditCompanies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminEditLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminEditLicenses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminEnrolUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminEnrolUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminGetCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminGetCompanies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminGetCompanyCourses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminGetCompanyCourses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminGetCourseInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminGetCourseInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminGetDepartmentUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminGetDepartmentUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminGetDepartments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminGetDepartments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminGetLicenseFromId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminGetLicenseFromId(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminGetLicenseInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminGetLicenseInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminMoveUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminMoveUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminRestrictCapability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminRestrictCapability(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminSyncUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminSyncUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminUnallocateLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminUnallocateLicenses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminUnassignCourses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminUnassignCourses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminUnassignUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminUnassignUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockIomadCompanyAdminAPIService BlockIomadCompanyAdminUpdateCourses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockIomadCompanyAdminAPI.BlockIomadCompanyAdminUpdateCourses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
