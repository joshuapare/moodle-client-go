/*
Moodle Webservice API

Testing ModBigbluebuttonbnAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package moodleclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/joshuapare/moodle-client-go"
)

func Test_moodleclient_ModBigbluebuttonbnAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnCanJoin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnCanJoin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnCompletionValidate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnCompletionValidate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnEndMeeting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnEndMeeting(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnGetBigbluebuttonbnsByCourses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnGetBigbluebuttonbnsByCourses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnGetJoinUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnGetJoinUrl(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnGetRecordings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnGetRecordings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnGetRecordingsToImport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnGetRecordingsToImport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnMeetingInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnMeetingInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnUpdateRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnUpdateRecording(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModBigbluebuttonbnAPIService ModBigbluebuttonbnViewBigbluebuttonbn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ModBigbluebuttonbnAPI.ModBigbluebuttonbnViewBigbluebuttonbn(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
