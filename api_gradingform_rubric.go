/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// GradingformRubricAPIService GradingformRubricAPI service
type GradingformRubricAPIService service

type ApiGradingformRubricGraderGradingpanelFetchRequest struct {
	ctx context.Context
	ApiService *GradingformRubricAPIService
	coreGradesGraderGradingpanelScaleFetchRequest *CoreGradesGraderGradingpanelScaleFetchRequest
}

func (r ApiGradingformRubricGraderGradingpanelFetchRequest) CoreGradesGraderGradingpanelScaleFetchRequest(coreGradesGraderGradingpanelScaleFetchRequest CoreGradesGraderGradingpanelScaleFetchRequest) ApiGradingformRubricGraderGradingpanelFetchRequest {
	r.coreGradesGraderGradingpanelScaleFetchRequest = &coreGradesGraderGradingpanelScaleFetchRequest
	return r
}

func (r ApiGradingformRubricGraderGradingpanelFetchRequest) Execute() (*GradingformRubricGraderGradingpanelFetch200Response, *http.Response, error) {
	return r.ApiService.GradingformRubricGraderGradingpanelFetchExecute(r)
}

/*
GradingformRubricGraderGradingpanelFetch Fetch the data required to display the grader grading panel, creating the grade item if required

Fetch the data required to display the grader grading panel, creating the grade item if required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGradingformRubricGraderGradingpanelFetchRequest
*/
func (a *GradingformRubricAPIService) GradingformRubricGraderGradingpanelFetch(ctx context.Context) ApiGradingformRubricGraderGradingpanelFetchRequest {
	return ApiGradingformRubricGraderGradingpanelFetchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GradingformRubricGraderGradingpanelFetch200Response
func (a *GradingformRubricAPIService) GradingformRubricGraderGradingpanelFetchExecute(r ApiGradingformRubricGraderGradingpanelFetchRequest) (*GradingformRubricGraderGradingpanelFetch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GradingformRubricGraderGradingpanelFetch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GradingformRubricAPIService.GradingformRubricGraderGradingpanelFetch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gradingform_rubric_grader_gradingpanel_fetch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.coreGradesGraderGradingpanelScaleFetchRequest == nil {
		return localVarReturnValue, nil, reportError("coreGradesGraderGradingpanelScaleFetchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.coreGradesGraderGradingpanelScaleFetchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGradingformRubricGraderGradingpanelStoreRequest struct {
	ctx context.Context
	ApiService *GradingformRubricAPIService
	coreGradesGraderGradingpanelScaleStoreRequest *CoreGradesGraderGradingpanelScaleStoreRequest
}

func (r ApiGradingformRubricGraderGradingpanelStoreRequest) CoreGradesGraderGradingpanelScaleStoreRequest(coreGradesGraderGradingpanelScaleStoreRequest CoreGradesGraderGradingpanelScaleStoreRequest) ApiGradingformRubricGraderGradingpanelStoreRequest {
	r.coreGradesGraderGradingpanelScaleStoreRequest = &coreGradesGraderGradingpanelScaleStoreRequest
	return r
}

func (r ApiGradingformRubricGraderGradingpanelStoreRequest) Execute() (*GradingformRubricGraderGradingpanelStore200Response, *http.Response, error) {
	return r.ApiService.GradingformRubricGraderGradingpanelStoreExecute(r)
}

/*
GradingformRubricGraderGradingpanelStore Store the grading data for a user from the grader grading panel.

Store the grading data for a user from the grader grading panel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGradingformRubricGraderGradingpanelStoreRequest
*/
func (a *GradingformRubricAPIService) GradingformRubricGraderGradingpanelStore(ctx context.Context) ApiGradingformRubricGraderGradingpanelStoreRequest {
	return ApiGradingformRubricGraderGradingpanelStoreRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GradingformRubricGraderGradingpanelStore200Response
func (a *GradingformRubricAPIService) GradingformRubricGraderGradingpanelStoreExecute(r ApiGradingformRubricGraderGradingpanelStoreRequest) (*GradingformRubricGraderGradingpanelStore200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GradingformRubricGraderGradingpanelStore200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GradingformRubricAPIService.GradingformRubricGraderGradingpanelStore")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gradingform_rubric_grader_gradingpanel_store"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.coreGradesGraderGradingpanelScaleStoreRequest == nil {
		return localVarReturnValue, nil, reportError("coreGradesGraderGradingpanelScaleStoreRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.coreGradesGraderGradingpanelScaleStoreRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
