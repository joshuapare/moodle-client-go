/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreMessageGetConversationCounts200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreMessageGetConversationCounts200Response{}

// CoreMessageGetConversationCounts200Response struct for CoreMessageGetConversationCounts200Response
type CoreMessageGetConversationCounts200Response struct {
	// Total number of favourite conversations
	Favourites int32 `json:"favourites"`
	Types CoreMessageGetConversationCounts200ResponseTypes `json:"types"`
}

type _CoreMessageGetConversationCounts200Response CoreMessageGetConversationCounts200Response

// NewCoreMessageGetConversationCounts200Response instantiates a new CoreMessageGetConversationCounts200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreMessageGetConversationCounts200Response(favourites int32, types CoreMessageGetConversationCounts200ResponseTypes) *CoreMessageGetConversationCounts200Response {
	this := CoreMessageGetConversationCounts200Response{}
	this.Favourites = favourites
	this.Types = types
	return &this
}

// NewCoreMessageGetConversationCounts200ResponseWithDefaults instantiates a new CoreMessageGetConversationCounts200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreMessageGetConversationCounts200ResponseWithDefaults() *CoreMessageGetConversationCounts200Response {
	this := CoreMessageGetConversationCounts200Response{}
	var favourites int32 = null
	this.Favourites = favourites
	return &this
}

// GetFavourites returns the Favourites field value
func (o *CoreMessageGetConversationCounts200Response) GetFavourites() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Favourites
}

// GetFavouritesOk returns a tuple with the Favourites field value
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationCounts200Response) GetFavouritesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Favourites, true
}

// SetFavourites sets field value
func (o *CoreMessageGetConversationCounts200Response) SetFavourites(v int32) {
	o.Favourites = v
}

// GetTypes returns the Types field value
func (o *CoreMessageGetConversationCounts200Response) GetTypes() CoreMessageGetConversationCounts200ResponseTypes {
	if o == nil {
		var ret CoreMessageGetConversationCounts200ResponseTypes
		return ret
	}

	return o.Types
}

// GetTypesOk returns a tuple with the Types field value
// and a boolean to check if the value has been set.
func (o *CoreMessageGetConversationCounts200Response) GetTypesOk() (*CoreMessageGetConversationCounts200ResponseTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Types, true
}

// SetTypes sets field value
func (o *CoreMessageGetConversationCounts200Response) SetTypes(v CoreMessageGetConversationCounts200ResponseTypes) {
	o.Types = v
}

func (o CoreMessageGetConversationCounts200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreMessageGetConversationCounts200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["favourites"] = o.Favourites
	toSerialize["types"] = o.Types
	return toSerialize, nil
}

func (o *CoreMessageGetConversationCounts200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"favourites",
		"types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreMessageGetConversationCounts200Response := _CoreMessageGetConversationCounts200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreMessageGetConversationCounts200Response)

	if err != nil {
		return err
	}

	*o = CoreMessageGetConversationCounts200Response(varCoreMessageGetConversationCounts200Response)

	return err
}

type NullableCoreMessageGetConversationCounts200Response struct {
	value *CoreMessageGetConversationCounts200Response
	isSet bool
}

func (v NullableCoreMessageGetConversationCounts200Response) Get() *CoreMessageGetConversationCounts200Response {
	return v.value
}

func (v *NullableCoreMessageGetConversationCounts200Response) Set(val *CoreMessageGetConversationCounts200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreMessageGetConversationCounts200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreMessageGetConversationCounts200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreMessageGetConversationCounts200Response(val *CoreMessageGetConversationCounts200Response) *NullableCoreMessageGetConversationCounts200Response {
	return &NullableCoreMessageGetConversationCounts200Response{value: val, isSet: true}
}

func (v NullableCoreMessageGetConversationCounts200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreMessageGetConversationCounts200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


