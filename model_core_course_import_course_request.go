/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCourseImportCourseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCourseImportCourseRequest{}

// CoreCourseImportCourseRequest struct for CoreCourseImportCourseRequest
type CoreCourseImportCourseRequest struct {
	// whether to delete the course content where we are importing to (default to 0 = No)
	Deletecontent *int32 `json:"deletecontent,omitempty"`
	// the id of the course we are importing from
	Importfrom int32 `json:"importfrom"`
	// the id of the course we are importing to
	Importto int32 `json:"importto"`
	Options []CoreCourseImportCourseRequestOptionsInner `json:"options,omitempty"`
}

type _CoreCourseImportCourseRequest CoreCourseImportCourseRequest

// NewCoreCourseImportCourseRequest instantiates a new CoreCourseImportCourseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCourseImportCourseRequest(importfrom int32, importto int32) *CoreCourseImportCourseRequest {
	this := CoreCourseImportCourseRequest{}
	var deletecontent int32 = 0
	this.Deletecontent = &deletecontent
	this.Importfrom = importfrom
	this.Importto = importto
	return &this
}

// NewCoreCourseImportCourseRequestWithDefaults instantiates a new CoreCourseImportCourseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCourseImportCourseRequestWithDefaults() *CoreCourseImportCourseRequest {
	this := CoreCourseImportCourseRequest{}
	var deletecontent int32 = 0
	this.Deletecontent = &deletecontent
	var importfrom int32 = null
	this.Importfrom = importfrom
	var importto int32 = null
	this.Importto = importto
	return &this
}

// GetDeletecontent returns the Deletecontent field value if set, zero value otherwise.
func (o *CoreCourseImportCourseRequest) GetDeletecontent() int32 {
	if o == nil || IsNil(o.Deletecontent) {
		var ret int32
		return ret
	}
	return *o.Deletecontent
}

// GetDeletecontentOk returns a tuple with the Deletecontent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCourseImportCourseRequest) GetDeletecontentOk() (*int32, bool) {
	if o == nil || IsNil(o.Deletecontent) {
		return nil, false
	}
	return o.Deletecontent, true
}

// HasDeletecontent returns a boolean if a field has been set.
func (o *CoreCourseImportCourseRequest) HasDeletecontent() bool {
	if o != nil && !IsNil(o.Deletecontent) {
		return true
	}

	return false
}

// SetDeletecontent gets a reference to the given int32 and assigns it to the Deletecontent field.
func (o *CoreCourseImportCourseRequest) SetDeletecontent(v int32) {
	o.Deletecontent = &v
}

// GetImportfrom returns the Importfrom field value
func (o *CoreCourseImportCourseRequest) GetImportfrom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Importfrom
}

// GetImportfromOk returns a tuple with the Importfrom field value
// and a boolean to check if the value has been set.
func (o *CoreCourseImportCourseRequest) GetImportfromOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Importfrom, true
}

// SetImportfrom sets field value
func (o *CoreCourseImportCourseRequest) SetImportfrom(v int32) {
	o.Importfrom = v
}

// GetImportto returns the Importto field value
func (o *CoreCourseImportCourseRequest) GetImportto() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Importto
}

// GetImporttoOk returns a tuple with the Importto field value
// and a boolean to check if the value has been set.
func (o *CoreCourseImportCourseRequest) GetImporttoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Importto, true
}

// SetImportto sets field value
func (o *CoreCourseImportCourseRequest) SetImportto(v int32) {
	o.Importto = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CoreCourseImportCourseRequest) GetOptions() []CoreCourseImportCourseRequestOptionsInner {
	if o == nil || IsNil(o.Options) {
		var ret []CoreCourseImportCourseRequestOptionsInner
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCourseImportCourseRequest) GetOptionsOk() ([]CoreCourseImportCourseRequestOptionsInner, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CoreCourseImportCourseRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []CoreCourseImportCourseRequestOptionsInner and assigns it to the Options field.
func (o *CoreCourseImportCourseRequest) SetOptions(v []CoreCourseImportCourseRequestOptionsInner) {
	o.Options = v
}

func (o CoreCourseImportCourseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCourseImportCourseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deletecontent) {
		toSerialize["deletecontent"] = o.Deletecontent
	}
	toSerialize["importfrom"] = o.Importfrom
	toSerialize["importto"] = o.Importto
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

func (o *CoreCourseImportCourseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"importfrom",
		"importto",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCourseImportCourseRequest := _CoreCourseImportCourseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCourseImportCourseRequest)

	if err != nil {
		return err
	}

	*o = CoreCourseImportCourseRequest(varCoreCourseImportCourseRequest)

	return err
}

type NullableCoreCourseImportCourseRequest struct {
	value *CoreCourseImportCourseRequest
	isSet bool
}

func (v NullableCoreCourseImportCourseRequest) Get() *CoreCourseImportCourseRequest {
	return v.value
}

func (v *NullableCoreCourseImportCourseRequest) Set(val *CoreCourseImportCourseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCourseImportCourseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCourseImportCourseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCourseImportCourseRequest(val *CoreCourseImportCourseRequest) *NullableCoreCourseImportCourseRequest {
	return &NullableCoreCourseImportCourseRequest{value: val, isSet: true}
}

func (v NullableCoreCourseImportCourseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCourseImportCourseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


