/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModBigbluebuttonbnUpdateRecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModBigbluebuttonbnUpdateRecordingRequest{}

// ModBigbluebuttonbnUpdateRecordingRequest struct for ModBigbluebuttonbnUpdateRecordingRequest
type ModBigbluebuttonbnUpdateRecordingRequest struct {
	// The action to perform
	Action string `json:"action"`
	// Additional options
	Additionaloptions string `json:"additionaloptions"`
	// bigbluebuttonbn instance id, this might be a different one from the one set in recordingid in case of importing
	Bigbluebuttonbnid int32 `json:"bigbluebuttonbnid"`
	// The moodle internal recording ID
	Recordingid int32 `json:"recordingid"`
}

type _ModBigbluebuttonbnUpdateRecordingRequest ModBigbluebuttonbnUpdateRecordingRequest

// NewModBigbluebuttonbnUpdateRecordingRequest instantiates a new ModBigbluebuttonbnUpdateRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModBigbluebuttonbnUpdateRecordingRequest(action string, additionaloptions string, bigbluebuttonbnid int32, recordingid int32) *ModBigbluebuttonbnUpdateRecordingRequest {
	this := ModBigbluebuttonbnUpdateRecordingRequest{}
	this.Action = action
	this.Additionaloptions = additionaloptions
	this.Bigbluebuttonbnid = bigbluebuttonbnid
	this.Recordingid = recordingid
	return &this
}

// NewModBigbluebuttonbnUpdateRecordingRequestWithDefaults instantiates a new ModBigbluebuttonbnUpdateRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModBigbluebuttonbnUpdateRecordingRequestWithDefaults() *ModBigbluebuttonbnUpdateRecordingRequest {
	this := ModBigbluebuttonbnUpdateRecordingRequest{}
	var action string = "null"
	this.Action = action
	var additionaloptions string = "null"
	this.Additionaloptions = additionaloptions
	var bigbluebuttonbnid int32 = null
	this.Bigbluebuttonbnid = bigbluebuttonbnid
	var recordingid int32 = null
	this.Recordingid = recordingid
	return &this
}

// GetAction returns the Action field value
func (o *ModBigbluebuttonbnUpdateRecordingRequest) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnUpdateRecordingRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ModBigbluebuttonbnUpdateRecordingRequest) SetAction(v string) {
	o.Action = v
}

// GetAdditionaloptions returns the Additionaloptions field value
func (o *ModBigbluebuttonbnUpdateRecordingRequest) GetAdditionaloptions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Additionaloptions
}

// GetAdditionaloptionsOk returns a tuple with the Additionaloptions field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnUpdateRecordingRequest) GetAdditionaloptionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Additionaloptions, true
}

// SetAdditionaloptions sets field value
func (o *ModBigbluebuttonbnUpdateRecordingRequest) SetAdditionaloptions(v string) {
	o.Additionaloptions = v
}

// GetBigbluebuttonbnid returns the Bigbluebuttonbnid field value
func (o *ModBigbluebuttonbnUpdateRecordingRequest) GetBigbluebuttonbnid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bigbluebuttonbnid
}

// GetBigbluebuttonbnidOk returns a tuple with the Bigbluebuttonbnid field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnUpdateRecordingRequest) GetBigbluebuttonbnidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bigbluebuttonbnid, true
}

// SetBigbluebuttonbnid sets field value
func (o *ModBigbluebuttonbnUpdateRecordingRequest) SetBigbluebuttonbnid(v int32) {
	o.Bigbluebuttonbnid = v
}

// GetRecordingid returns the Recordingid field value
func (o *ModBigbluebuttonbnUpdateRecordingRequest) GetRecordingid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Recordingid
}

// GetRecordingidOk returns a tuple with the Recordingid field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnUpdateRecordingRequest) GetRecordingidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recordingid, true
}

// SetRecordingid sets field value
func (o *ModBigbluebuttonbnUpdateRecordingRequest) SetRecordingid(v int32) {
	o.Recordingid = v
}

func (o ModBigbluebuttonbnUpdateRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModBigbluebuttonbnUpdateRecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["additionaloptions"] = o.Additionaloptions
	toSerialize["bigbluebuttonbnid"] = o.Bigbluebuttonbnid
	toSerialize["recordingid"] = o.Recordingid
	return toSerialize, nil
}

func (o *ModBigbluebuttonbnUpdateRecordingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"additionaloptions",
		"bigbluebuttonbnid",
		"recordingid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModBigbluebuttonbnUpdateRecordingRequest := _ModBigbluebuttonbnUpdateRecordingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModBigbluebuttonbnUpdateRecordingRequest)

	if err != nil {
		return err
	}

	*o = ModBigbluebuttonbnUpdateRecordingRequest(varModBigbluebuttonbnUpdateRecordingRequest)

	return err
}

type NullableModBigbluebuttonbnUpdateRecordingRequest struct {
	value *ModBigbluebuttonbnUpdateRecordingRequest
	isSet bool
}

func (v NullableModBigbluebuttonbnUpdateRecordingRequest) Get() *ModBigbluebuttonbnUpdateRecordingRequest {
	return v.value
}

func (v *NullableModBigbluebuttonbnUpdateRecordingRequest) Set(val *ModBigbluebuttonbnUpdateRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModBigbluebuttonbnUpdateRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModBigbluebuttonbnUpdateRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModBigbluebuttonbnUpdateRecordingRequest(val *ModBigbluebuttonbnUpdateRecordingRequest) *NullableModBigbluebuttonbnUpdateRecordingRequest {
	return &NullableModBigbluebuttonbnUpdateRecordingRequest{value: val, isSet: true}
}

func (v NullableModBigbluebuttonbnUpdateRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModBigbluebuttonbnUpdateRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


