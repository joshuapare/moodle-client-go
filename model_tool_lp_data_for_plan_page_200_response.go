/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolLpDataForPlanPage200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolLpDataForPlanPage200Response{}

// ToolLpDataForPlanPage200Response struct for ToolLpDataForPlanPage200Response
type ToolLpDataForPlanPage200Response struct {
	Competencies []ToolLpDataForPlanPage200ResponseCompetenciesInner `json:"competencies"`
	// Count of competencies
	Competencycount int32 `json:"competencycount"`
	// Context ID.
	Contextid int32 `json:"contextid"`
	Plan CoreCompetencyReadPlan200Response `json:"plan"`
	// Plugin base URL.
	Pluginbaseurl string `json:"pluginbaseurl"`
	// Count of proficientcompetencies
	Proficientcompetencycount int32 `json:"proficientcompetencycount"`
	// Percentage of competencies proficient
	Proficientcompetencypercentage float32 `json:"proficientcompetencypercentage"`
	// Displayable percentage
	Proficientcompetencypercentageformatted string `json:"proficientcompetencypercentageformatted"`
}

type _ToolLpDataForPlanPage200Response ToolLpDataForPlanPage200Response

// NewToolLpDataForPlanPage200Response instantiates a new ToolLpDataForPlanPage200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolLpDataForPlanPage200Response(competencies []ToolLpDataForPlanPage200ResponseCompetenciesInner, competencycount int32, contextid int32, plan CoreCompetencyReadPlan200Response, pluginbaseurl string, proficientcompetencycount int32, proficientcompetencypercentage float32, proficientcompetencypercentageformatted string) *ToolLpDataForPlanPage200Response {
	this := ToolLpDataForPlanPage200Response{}
	this.Competencies = competencies
	this.Competencycount = competencycount
	this.Contextid = contextid
	this.Plan = plan
	this.Pluginbaseurl = pluginbaseurl
	this.Proficientcompetencycount = proficientcompetencycount
	this.Proficientcompetencypercentage = proficientcompetencypercentage
	this.Proficientcompetencypercentageformatted = proficientcompetencypercentageformatted
	return &this
}

// NewToolLpDataForPlanPage200ResponseWithDefaults instantiates a new ToolLpDataForPlanPage200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolLpDataForPlanPage200ResponseWithDefaults() *ToolLpDataForPlanPage200Response {
	this := ToolLpDataForPlanPage200Response{}
	var competencycount int32 = null
	this.Competencycount = competencycount
	var contextid int32 = null
	this.Contextid = contextid
	var pluginbaseurl string = "null"
	this.Pluginbaseurl = pluginbaseurl
	var proficientcompetencycount int32 = null
	this.Proficientcompetencycount = proficientcompetencycount
	var proficientcompetencypercentage float32 = null
	this.Proficientcompetencypercentage = proficientcompetencypercentage
	var proficientcompetencypercentageformatted string = "null"
	this.Proficientcompetencypercentageformatted = proficientcompetencypercentageformatted
	return &this
}

// GetCompetencies returns the Competencies field value
func (o *ToolLpDataForPlanPage200Response) GetCompetencies() []ToolLpDataForPlanPage200ResponseCompetenciesInner {
	if o == nil {
		var ret []ToolLpDataForPlanPage200ResponseCompetenciesInner
		return ret
	}

	return o.Competencies
}

// GetCompetenciesOk returns a tuple with the Competencies field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlanPage200Response) GetCompetenciesOk() ([]ToolLpDataForPlanPage200ResponseCompetenciesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Competencies, true
}

// SetCompetencies sets field value
func (o *ToolLpDataForPlanPage200Response) SetCompetencies(v []ToolLpDataForPlanPage200ResponseCompetenciesInner) {
	o.Competencies = v
}

// GetCompetencycount returns the Competencycount field value
func (o *ToolLpDataForPlanPage200Response) GetCompetencycount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Competencycount
}

// GetCompetencycountOk returns a tuple with the Competencycount field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlanPage200Response) GetCompetencycountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Competencycount, true
}

// SetCompetencycount sets field value
func (o *ToolLpDataForPlanPage200Response) SetCompetencycount(v int32) {
	o.Competencycount = v
}

// GetContextid returns the Contextid field value
func (o *ToolLpDataForPlanPage200Response) GetContextid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Contextid
}

// GetContextidOk returns a tuple with the Contextid field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlanPage200Response) GetContextidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contextid, true
}

// SetContextid sets field value
func (o *ToolLpDataForPlanPage200Response) SetContextid(v int32) {
	o.Contextid = v
}

// GetPlan returns the Plan field value
func (o *ToolLpDataForPlanPage200Response) GetPlan() CoreCompetencyReadPlan200Response {
	if o == nil {
		var ret CoreCompetencyReadPlan200Response
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlanPage200Response) GetPlanOk() (*CoreCompetencyReadPlan200Response, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *ToolLpDataForPlanPage200Response) SetPlan(v CoreCompetencyReadPlan200Response) {
	o.Plan = v
}

// GetPluginbaseurl returns the Pluginbaseurl field value
func (o *ToolLpDataForPlanPage200Response) GetPluginbaseurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pluginbaseurl
}

// GetPluginbaseurlOk returns a tuple with the Pluginbaseurl field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlanPage200Response) GetPluginbaseurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pluginbaseurl, true
}

// SetPluginbaseurl sets field value
func (o *ToolLpDataForPlanPage200Response) SetPluginbaseurl(v string) {
	o.Pluginbaseurl = v
}

// GetProficientcompetencycount returns the Proficientcompetencycount field value
func (o *ToolLpDataForPlanPage200Response) GetProficientcompetencycount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Proficientcompetencycount
}

// GetProficientcompetencycountOk returns a tuple with the Proficientcompetencycount field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlanPage200Response) GetProficientcompetencycountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proficientcompetencycount, true
}

// SetProficientcompetencycount sets field value
func (o *ToolLpDataForPlanPage200Response) SetProficientcompetencycount(v int32) {
	o.Proficientcompetencycount = v
}

// GetProficientcompetencypercentage returns the Proficientcompetencypercentage field value
func (o *ToolLpDataForPlanPage200Response) GetProficientcompetencypercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Proficientcompetencypercentage
}

// GetProficientcompetencypercentageOk returns a tuple with the Proficientcompetencypercentage field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlanPage200Response) GetProficientcompetencypercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proficientcompetencypercentage, true
}

// SetProficientcompetencypercentage sets field value
func (o *ToolLpDataForPlanPage200Response) SetProficientcompetencypercentage(v float32) {
	o.Proficientcompetencypercentage = v
}

// GetProficientcompetencypercentageformatted returns the Proficientcompetencypercentageformatted field value
func (o *ToolLpDataForPlanPage200Response) GetProficientcompetencypercentageformatted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Proficientcompetencypercentageformatted
}

// GetProficientcompetencypercentageformattedOk returns a tuple with the Proficientcompetencypercentageformatted field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForPlanPage200Response) GetProficientcompetencypercentageformattedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proficientcompetencypercentageformatted, true
}

// SetProficientcompetencypercentageformatted sets field value
func (o *ToolLpDataForPlanPage200Response) SetProficientcompetencypercentageformatted(v string) {
	o.Proficientcompetencypercentageformatted = v
}

func (o ToolLpDataForPlanPage200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolLpDataForPlanPage200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["competencies"] = o.Competencies
	toSerialize["competencycount"] = o.Competencycount
	toSerialize["contextid"] = o.Contextid
	toSerialize["plan"] = o.Plan
	toSerialize["pluginbaseurl"] = o.Pluginbaseurl
	toSerialize["proficientcompetencycount"] = o.Proficientcompetencycount
	toSerialize["proficientcompetencypercentage"] = o.Proficientcompetencypercentage
	toSerialize["proficientcompetencypercentageformatted"] = o.Proficientcompetencypercentageformatted
	return toSerialize, nil
}

func (o *ToolLpDataForPlanPage200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"competencies",
		"competencycount",
		"contextid",
		"plan",
		"pluginbaseurl",
		"proficientcompetencycount",
		"proficientcompetencypercentage",
		"proficientcompetencypercentageformatted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolLpDataForPlanPage200Response := _ToolLpDataForPlanPage200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolLpDataForPlanPage200Response)

	if err != nil {
		return err
	}

	*o = ToolLpDataForPlanPage200Response(varToolLpDataForPlanPage200Response)

	return err
}

type NullableToolLpDataForPlanPage200Response struct {
	value *ToolLpDataForPlanPage200Response
	isSet bool
}

func (v NullableToolLpDataForPlanPage200Response) Get() *ToolLpDataForPlanPage200Response {
	return v.value
}

func (v *NullableToolLpDataForPlanPage200Response) Set(val *ToolLpDataForPlanPage200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableToolLpDataForPlanPage200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableToolLpDataForPlanPage200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolLpDataForPlanPage200Response(val *ToolLpDataForPlanPage200Response) *NullableToolLpDataForPlanPage200Response {
	return &NullableToolLpDataForPlanPage200Response{value: val, isSet: true}
}

func (v NullableToolLpDataForPlanPage200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolLpDataForPlanPage200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


