/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModBigbluebuttonbnGetRecordingsToImportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModBigbluebuttonbnGetRecordingsToImportRequest{}

// ModBigbluebuttonbnGetRecordingsToImportRequest struct for ModBigbluebuttonbnGetRecordingsToImportRequest
type ModBigbluebuttonbnGetRecordingsToImportRequest struct {
	// Id of the other BBB we target for importing recordings into.                 The idea here is to remove already imported recordings.
	Destinationinstanceid int32 `json:"destinationinstanceid"`
	// Group ID
	Groupid *int32 `json:"groupid,omitempty"`
	// bigbluebuttonbn instance id
	Sourcebigbluebuttonbnid *int32 `json:"sourcebigbluebuttonbnid,omitempty"`
	// source courseid to filter by
	Sourcecourseid *int32 `json:"sourcecourseid,omitempty"`
	// a set of enabled tools
	Tools *string `json:"tools,omitempty"`
}

type _ModBigbluebuttonbnGetRecordingsToImportRequest ModBigbluebuttonbnGetRecordingsToImportRequest

// NewModBigbluebuttonbnGetRecordingsToImportRequest instantiates a new ModBigbluebuttonbnGetRecordingsToImportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModBigbluebuttonbnGetRecordingsToImportRequest(destinationinstanceid int32) *ModBigbluebuttonbnGetRecordingsToImportRequest {
	this := ModBigbluebuttonbnGetRecordingsToImportRequest{}
	this.Destinationinstanceid = destinationinstanceid
	var sourcebigbluebuttonbnid int32 = 0
	this.Sourcebigbluebuttonbnid = &sourcebigbluebuttonbnid
	var sourcecourseid int32 = 0
	this.Sourcecourseid = &sourcecourseid
	var tools string = "protect,unprotect,publish,unpublish,delete"
	this.Tools = &tools
	return &this
}

// NewModBigbluebuttonbnGetRecordingsToImportRequestWithDefaults instantiates a new ModBigbluebuttonbnGetRecordingsToImportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModBigbluebuttonbnGetRecordingsToImportRequestWithDefaults() *ModBigbluebuttonbnGetRecordingsToImportRequest {
	this := ModBigbluebuttonbnGetRecordingsToImportRequest{}
	var destinationinstanceid int32 = null
	this.Destinationinstanceid = destinationinstanceid
	var sourcebigbluebuttonbnid int32 = 0
	this.Sourcebigbluebuttonbnid = &sourcebigbluebuttonbnid
	var sourcecourseid int32 = 0
	this.Sourcecourseid = &sourcecourseid
	var tools string = "protect,unprotect,publish,unpublish,delete"
	this.Tools = &tools
	return &this
}

// GetDestinationinstanceid returns the Destinationinstanceid field value
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetDestinationinstanceid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Destinationinstanceid
}

// GetDestinationinstanceidOk returns a tuple with the Destinationinstanceid field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetDestinationinstanceidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destinationinstanceid, true
}

// SetDestinationinstanceid sets field value
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) SetDestinationinstanceid(v int32) {
	o.Destinationinstanceid = v
}

// GetGroupid returns the Groupid field value if set, zero value otherwise.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetGroupid() int32 {
	if o == nil || IsNil(o.Groupid) {
		var ret int32
		return ret
	}
	return *o.Groupid
}

// GetGroupidOk returns a tuple with the Groupid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetGroupidOk() (*int32, bool) {
	if o == nil || IsNil(o.Groupid) {
		return nil, false
	}
	return o.Groupid, true
}

// HasGroupid returns a boolean if a field has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) HasGroupid() bool {
	if o != nil && !IsNil(o.Groupid) {
		return true
	}

	return false
}

// SetGroupid gets a reference to the given int32 and assigns it to the Groupid field.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) SetGroupid(v int32) {
	o.Groupid = &v
}

// GetSourcebigbluebuttonbnid returns the Sourcebigbluebuttonbnid field value if set, zero value otherwise.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetSourcebigbluebuttonbnid() int32 {
	if o == nil || IsNil(o.Sourcebigbluebuttonbnid) {
		var ret int32
		return ret
	}
	return *o.Sourcebigbluebuttonbnid
}

// GetSourcebigbluebuttonbnidOk returns a tuple with the Sourcebigbluebuttonbnid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetSourcebigbluebuttonbnidOk() (*int32, bool) {
	if o == nil || IsNil(o.Sourcebigbluebuttonbnid) {
		return nil, false
	}
	return o.Sourcebigbluebuttonbnid, true
}

// HasSourcebigbluebuttonbnid returns a boolean if a field has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) HasSourcebigbluebuttonbnid() bool {
	if o != nil && !IsNil(o.Sourcebigbluebuttonbnid) {
		return true
	}

	return false
}

// SetSourcebigbluebuttonbnid gets a reference to the given int32 and assigns it to the Sourcebigbluebuttonbnid field.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) SetSourcebigbluebuttonbnid(v int32) {
	o.Sourcebigbluebuttonbnid = &v
}

// GetSourcecourseid returns the Sourcecourseid field value if set, zero value otherwise.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetSourcecourseid() int32 {
	if o == nil || IsNil(o.Sourcecourseid) {
		var ret int32
		return ret
	}
	return *o.Sourcecourseid
}

// GetSourcecourseidOk returns a tuple with the Sourcecourseid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetSourcecourseidOk() (*int32, bool) {
	if o == nil || IsNil(o.Sourcecourseid) {
		return nil, false
	}
	return o.Sourcecourseid, true
}

// HasSourcecourseid returns a boolean if a field has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) HasSourcecourseid() bool {
	if o != nil && !IsNil(o.Sourcecourseid) {
		return true
	}

	return false
}

// SetSourcecourseid gets a reference to the given int32 and assigns it to the Sourcecourseid field.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) SetSourcecourseid(v int32) {
	o.Sourcecourseid = &v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetTools() string {
	if o == nil || IsNil(o.Tools) {
		var ret string
		return ret
	}
	return *o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) GetToolsOk() (*string, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given string and assigns it to the Tools field.
func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) SetTools(v string) {
	o.Tools = &v
}

func (o ModBigbluebuttonbnGetRecordingsToImportRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModBigbluebuttonbnGetRecordingsToImportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destinationinstanceid"] = o.Destinationinstanceid
	if !IsNil(o.Groupid) {
		toSerialize["groupid"] = o.Groupid
	}
	if !IsNil(o.Sourcebigbluebuttonbnid) {
		toSerialize["sourcebigbluebuttonbnid"] = o.Sourcebigbluebuttonbnid
	}
	if !IsNil(o.Sourcecourseid) {
		toSerialize["sourcecourseid"] = o.Sourcecourseid
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	return toSerialize, nil
}

func (o *ModBigbluebuttonbnGetRecordingsToImportRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destinationinstanceid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModBigbluebuttonbnGetRecordingsToImportRequest := _ModBigbluebuttonbnGetRecordingsToImportRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModBigbluebuttonbnGetRecordingsToImportRequest)

	if err != nil {
		return err
	}

	*o = ModBigbluebuttonbnGetRecordingsToImportRequest(varModBigbluebuttonbnGetRecordingsToImportRequest)

	return err
}

type NullableModBigbluebuttonbnGetRecordingsToImportRequest struct {
	value *ModBigbluebuttonbnGetRecordingsToImportRequest
	isSet bool
}

func (v NullableModBigbluebuttonbnGetRecordingsToImportRequest) Get() *ModBigbluebuttonbnGetRecordingsToImportRequest {
	return v.value
}

func (v *NullableModBigbluebuttonbnGetRecordingsToImportRequest) Set(val *ModBigbluebuttonbnGetRecordingsToImportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModBigbluebuttonbnGetRecordingsToImportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModBigbluebuttonbnGetRecordingsToImportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModBigbluebuttonbnGetRecordingsToImportRequest(val *ModBigbluebuttonbnGetRecordingsToImportRequest) *NullableModBigbluebuttonbnGetRecordingsToImportRequest {
	return &NullableModBigbluebuttonbnGetRecordingsToImportRequest{value: val, isSet: true}
}

func (v NullableModBigbluebuttonbnGetRecordingsToImportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModBigbluebuttonbnGetRecordingsToImportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


