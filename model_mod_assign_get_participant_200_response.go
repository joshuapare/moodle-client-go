/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModAssignGetParticipant200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModAssignGetParticipant200Response{}

// ModAssignGetParticipant200Response struct for ModAssignGetParticipant200Response
type ModAssignGetParticipant200Response struct {
	// allowsubmissionsfromdate for the user
	Allowsubmissionsfromdate int32 `json:"allowsubmissionsfromdate"`
	// is blind marking enabled for this assignment
	Blindmarking bool `json:"blindmarking"`
	// cutoffdate for the user
	Cutoffdate int32 `json:"cutoffdate"`
	// duedate for the user
	Duedate int32 `json:"duedate"`
	// duedate for the user
	Duedatestr string `json:"duedatestr"`
	// The fullname of the user
	Fullname string `json:"fullname"`
	// have they been granted an extension
	Grantedextension bool `json:"grantedextension"`
	// for group assignments this is the group id
	Groupid *int32 `json:"groupid,omitempty"`
	// for group assignments this is the group name
	Groupname *string `json:"groupname,omitempty"`
	// ID of the user
	Id int32 `json:"id"`
	// is their submission waiting for grading
	Requiregrading bool `json:"requiregrading"`
	// The submission status (new, draft, reopened or submitted).                 Empty when not submitted.
	Submissionstatus *string `json:"submissionstatus,omitempty"`
	// have they submitted their assignment
	Submitted bool `json:"submitted"`
	User *ModAssignGetParticipant200ResponseUser `json:"user,omitempty"`
}

type _ModAssignGetParticipant200Response ModAssignGetParticipant200Response

// NewModAssignGetParticipant200Response instantiates a new ModAssignGetParticipant200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModAssignGetParticipant200Response(allowsubmissionsfromdate int32, blindmarking bool, cutoffdate int32, duedate int32, duedatestr string, fullname string, grantedextension bool, id int32, requiregrading bool, submitted bool) *ModAssignGetParticipant200Response {
	this := ModAssignGetParticipant200Response{}
	this.Allowsubmissionsfromdate = allowsubmissionsfromdate
	this.Blindmarking = blindmarking
	this.Cutoffdate = cutoffdate
	this.Duedate = duedate
	this.Duedatestr = duedatestr
	this.Fullname = fullname
	this.Grantedextension = grantedextension
	var groupid int32 = null
	this.Groupid = &groupid
	var groupname string = "null"
	this.Groupname = &groupname
	this.Id = id
	this.Requiregrading = requiregrading
	var submissionstatus string = "null"
	this.Submissionstatus = &submissionstatus
	this.Submitted = submitted
	return &this
}

// NewModAssignGetParticipant200ResponseWithDefaults instantiates a new ModAssignGetParticipant200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModAssignGetParticipant200ResponseWithDefaults() *ModAssignGetParticipant200Response {
	this := ModAssignGetParticipant200Response{}
	var allowsubmissionsfromdate int32 = null
	this.Allowsubmissionsfromdate = allowsubmissionsfromdate
	var blindmarking bool = null
	this.Blindmarking = blindmarking
	var cutoffdate int32 = null
	this.Cutoffdate = cutoffdate
	var duedate int32 = null
	this.Duedate = duedate
	var duedatestr string = "null"
	this.Duedatestr = duedatestr
	var grantedextension bool = null
	this.Grantedextension = grantedextension
	var groupid int32 = null
	this.Groupid = &groupid
	var groupname string = "null"
	this.Groupname = &groupname
	var requiregrading bool = null
	this.Requiregrading = requiregrading
	var submissionstatus string = "null"
	this.Submissionstatus = &submissionstatus
	var submitted bool = null
	this.Submitted = submitted
	return &this
}

// GetAllowsubmissionsfromdate returns the Allowsubmissionsfromdate field value
func (o *ModAssignGetParticipant200Response) GetAllowsubmissionsfromdate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Allowsubmissionsfromdate
}

// GetAllowsubmissionsfromdateOk returns a tuple with the Allowsubmissionsfromdate field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetAllowsubmissionsfromdateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allowsubmissionsfromdate, true
}

// SetAllowsubmissionsfromdate sets field value
func (o *ModAssignGetParticipant200Response) SetAllowsubmissionsfromdate(v int32) {
	o.Allowsubmissionsfromdate = v
}

// GetBlindmarking returns the Blindmarking field value
func (o *ModAssignGetParticipant200Response) GetBlindmarking() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Blindmarking
}

// GetBlindmarkingOk returns a tuple with the Blindmarking field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetBlindmarkingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blindmarking, true
}

// SetBlindmarking sets field value
func (o *ModAssignGetParticipant200Response) SetBlindmarking(v bool) {
	o.Blindmarking = v
}

// GetCutoffdate returns the Cutoffdate field value
func (o *ModAssignGetParticipant200Response) GetCutoffdate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cutoffdate
}

// GetCutoffdateOk returns a tuple with the Cutoffdate field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetCutoffdateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cutoffdate, true
}

// SetCutoffdate sets field value
func (o *ModAssignGetParticipant200Response) SetCutoffdate(v int32) {
	o.Cutoffdate = v
}

// GetDuedate returns the Duedate field value
func (o *ModAssignGetParticipant200Response) GetDuedate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duedate
}

// GetDuedateOk returns a tuple with the Duedate field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetDuedateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duedate, true
}

// SetDuedate sets field value
func (o *ModAssignGetParticipant200Response) SetDuedate(v int32) {
	o.Duedate = v
}

// GetDuedatestr returns the Duedatestr field value
func (o *ModAssignGetParticipant200Response) GetDuedatestr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duedatestr
}

// GetDuedatestrOk returns a tuple with the Duedatestr field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetDuedatestrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duedatestr, true
}

// SetDuedatestr sets field value
func (o *ModAssignGetParticipant200Response) SetDuedatestr(v string) {
	o.Duedatestr = v
}

// GetFullname returns the Fullname field value
func (o *ModAssignGetParticipant200Response) GetFullname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fullname
}

// GetFullnameOk returns a tuple with the Fullname field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetFullnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fullname, true
}

// SetFullname sets field value
func (o *ModAssignGetParticipant200Response) SetFullname(v string) {
	o.Fullname = v
}

// GetGrantedextension returns the Grantedextension field value
func (o *ModAssignGetParticipant200Response) GetGrantedextension() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Grantedextension
}

// GetGrantedextensionOk returns a tuple with the Grantedextension field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetGrantedextensionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Grantedextension, true
}

// SetGrantedextension sets field value
func (o *ModAssignGetParticipant200Response) SetGrantedextension(v bool) {
	o.Grantedextension = v
}

// GetGroupid returns the Groupid field value if set, zero value otherwise.
func (o *ModAssignGetParticipant200Response) GetGroupid() int32 {
	if o == nil || IsNil(o.Groupid) {
		var ret int32
		return ret
	}
	return *o.Groupid
}

// GetGroupidOk returns a tuple with the Groupid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetGroupidOk() (*int32, bool) {
	if o == nil || IsNil(o.Groupid) {
		return nil, false
	}
	return o.Groupid, true
}

// HasGroupid returns a boolean if a field has been set.
func (o *ModAssignGetParticipant200Response) HasGroupid() bool {
	if o != nil && !IsNil(o.Groupid) {
		return true
	}

	return false
}

// SetGroupid gets a reference to the given int32 and assigns it to the Groupid field.
func (o *ModAssignGetParticipant200Response) SetGroupid(v int32) {
	o.Groupid = &v
}

// GetGroupname returns the Groupname field value if set, zero value otherwise.
func (o *ModAssignGetParticipant200Response) GetGroupname() string {
	if o == nil || IsNil(o.Groupname) {
		var ret string
		return ret
	}
	return *o.Groupname
}

// GetGroupnameOk returns a tuple with the Groupname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetGroupnameOk() (*string, bool) {
	if o == nil || IsNil(o.Groupname) {
		return nil, false
	}
	return o.Groupname, true
}

// HasGroupname returns a boolean if a field has been set.
func (o *ModAssignGetParticipant200Response) HasGroupname() bool {
	if o != nil && !IsNil(o.Groupname) {
		return true
	}

	return false
}

// SetGroupname gets a reference to the given string and assigns it to the Groupname field.
func (o *ModAssignGetParticipant200Response) SetGroupname(v string) {
	o.Groupname = &v
}

// GetId returns the Id field value
func (o *ModAssignGetParticipant200Response) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModAssignGetParticipant200Response) SetId(v int32) {
	o.Id = v
}

// GetRequiregrading returns the Requiregrading field value
func (o *ModAssignGetParticipant200Response) GetRequiregrading() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Requiregrading
}

// GetRequiregradingOk returns a tuple with the Requiregrading field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetRequiregradingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Requiregrading, true
}

// SetRequiregrading sets field value
func (o *ModAssignGetParticipant200Response) SetRequiregrading(v bool) {
	o.Requiregrading = v
}

// GetSubmissionstatus returns the Submissionstatus field value if set, zero value otherwise.
func (o *ModAssignGetParticipant200Response) GetSubmissionstatus() string {
	if o == nil || IsNil(o.Submissionstatus) {
		var ret string
		return ret
	}
	return *o.Submissionstatus
}

// GetSubmissionstatusOk returns a tuple with the Submissionstatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetSubmissionstatusOk() (*string, bool) {
	if o == nil || IsNil(o.Submissionstatus) {
		return nil, false
	}
	return o.Submissionstatus, true
}

// HasSubmissionstatus returns a boolean if a field has been set.
func (o *ModAssignGetParticipant200Response) HasSubmissionstatus() bool {
	if o != nil && !IsNil(o.Submissionstatus) {
		return true
	}

	return false
}

// SetSubmissionstatus gets a reference to the given string and assigns it to the Submissionstatus field.
func (o *ModAssignGetParticipant200Response) SetSubmissionstatus(v string) {
	o.Submissionstatus = &v
}

// GetSubmitted returns the Submitted field value
func (o *ModAssignGetParticipant200Response) GetSubmitted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Submitted
}

// GetSubmittedOk returns a tuple with the Submitted field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetSubmittedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Submitted, true
}

// SetSubmitted sets field value
func (o *ModAssignGetParticipant200Response) SetSubmitted(v bool) {
	o.Submitted = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ModAssignGetParticipant200Response) GetUser() ModAssignGetParticipant200ResponseUser {
	if o == nil || IsNil(o.User) {
		var ret ModAssignGetParticipant200ResponseUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModAssignGetParticipant200Response) GetUserOk() (*ModAssignGetParticipant200ResponseUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ModAssignGetParticipant200Response) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given ModAssignGetParticipant200ResponseUser and assigns it to the User field.
func (o *ModAssignGetParticipant200Response) SetUser(v ModAssignGetParticipant200ResponseUser) {
	o.User = &v
}

func (o ModAssignGetParticipant200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModAssignGetParticipant200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowsubmissionsfromdate"] = o.Allowsubmissionsfromdate
	toSerialize["blindmarking"] = o.Blindmarking
	toSerialize["cutoffdate"] = o.Cutoffdate
	toSerialize["duedate"] = o.Duedate
	toSerialize["duedatestr"] = o.Duedatestr
	toSerialize["fullname"] = o.Fullname
	toSerialize["grantedextension"] = o.Grantedextension
	if !IsNil(o.Groupid) {
		toSerialize["groupid"] = o.Groupid
	}
	if !IsNil(o.Groupname) {
		toSerialize["groupname"] = o.Groupname
	}
	toSerialize["id"] = o.Id
	toSerialize["requiregrading"] = o.Requiregrading
	if !IsNil(o.Submissionstatus) {
		toSerialize["submissionstatus"] = o.Submissionstatus
	}
	toSerialize["submitted"] = o.Submitted
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *ModAssignGetParticipant200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowsubmissionsfromdate",
		"blindmarking",
		"cutoffdate",
		"duedate",
		"duedatestr",
		"fullname",
		"grantedextension",
		"id",
		"requiregrading",
		"submitted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModAssignGetParticipant200Response := _ModAssignGetParticipant200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModAssignGetParticipant200Response)

	if err != nil {
		return err
	}

	*o = ModAssignGetParticipant200Response(varModAssignGetParticipant200Response)

	return err
}

type NullableModAssignGetParticipant200Response struct {
	value *ModAssignGetParticipant200Response
	isSet bool
}

func (v NullableModAssignGetParticipant200Response) Get() *ModAssignGetParticipant200Response {
	return v.value
}

func (v *NullableModAssignGetParticipant200Response) Set(val *ModAssignGetParticipant200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableModAssignGetParticipant200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableModAssignGetParticipant200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModAssignGetParticipant200Response(val *ModAssignGetParticipant200Response) *NullableModAssignGetParticipant200Response {
	return &NullableModAssignGetParticipant200Response{value: val, isSet: true}
}

func (v NullableModAssignGetParticipant200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModAssignGetParticipant200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


