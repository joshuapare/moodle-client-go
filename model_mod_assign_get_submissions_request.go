/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModAssignGetSubmissionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModAssignGetSubmissionsRequest{}

// ModAssignGetSubmissionsRequest struct for ModAssignGetSubmissionsRequest
type ModAssignGetSubmissionsRequest struct {
	Assignmentids []map[string]interface{} `json:"assignmentids"`
	// submitted before
	Before *int32 `json:"before,omitempty"`
	// submitted since
	Since *int32 `json:"since,omitempty"`
	// status
	Status *string `json:"status,omitempty"`
}

type _ModAssignGetSubmissionsRequest ModAssignGetSubmissionsRequest

// NewModAssignGetSubmissionsRequest instantiates a new ModAssignGetSubmissionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModAssignGetSubmissionsRequest(assignmentids []map[string]interface{}) *ModAssignGetSubmissionsRequest {
	this := ModAssignGetSubmissionsRequest{}
	this.Assignmentids = assignmentids
	var before int32 = 0
	this.Before = &before
	var since int32 = 0
	this.Since = &since
	var status string = ""
	this.Status = &status
	return &this
}

// NewModAssignGetSubmissionsRequestWithDefaults instantiates a new ModAssignGetSubmissionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModAssignGetSubmissionsRequestWithDefaults() *ModAssignGetSubmissionsRequest {
	this := ModAssignGetSubmissionsRequest{}
	var before int32 = 0
	this.Before = &before
	var since int32 = 0
	this.Since = &since
	var status string = ""
	this.Status = &status
	return &this
}

// GetAssignmentids returns the Assignmentids field value
func (o *ModAssignGetSubmissionsRequest) GetAssignmentids() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Assignmentids
}

// GetAssignmentidsOk returns a tuple with the Assignmentids field value
// and a boolean to check if the value has been set.
func (o *ModAssignGetSubmissionsRequest) GetAssignmentidsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignmentids, true
}

// SetAssignmentids sets field value
func (o *ModAssignGetSubmissionsRequest) SetAssignmentids(v []map[string]interface{}) {
	o.Assignmentids = v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *ModAssignGetSubmissionsRequest) GetBefore() int32 {
	if o == nil || IsNil(o.Before) {
		var ret int32
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModAssignGetSubmissionsRequest) GetBeforeOk() (*int32, bool) {
	if o == nil || IsNil(o.Before) {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *ModAssignGetSubmissionsRequest) HasBefore() bool {
	if o != nil && !IsNil(o.Before) {
		return true
	}

	return false
}

// SetBefore gets a reference to the given int32 and assigns it to the Before field.
func (o *ModAssignGetSubmissionsRequest) SetBefore(v int32) {
	o.Before = &v
}

// GetSince returns the Since field value if set, zero value otherwise.
func (o *ModAssignGetSubmissionsRequest) GetSince() int32 {
	if o == nil || IsNil(o.Since) {
		var ret int32
		return ret
	}
	return *o.Since
}

// GetSinceOk returns a tuple with the Since field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModAssignGetSubmissionsRequest) GetSinceOk() (*int32, bool) {
	if o == nil || IsNil(o.Since) {
		return nil, false
	}
	return o.Since, true
}

// HasSince returns a boolean if a field has been set.
func (o *ModAssignGetSubmissionsRequest) HasSince() bool {
	if o != nil && !IsNil(o.Since) {
		return true
	}

	return false
}

// SetSince gets a reference to the given int32 and assigns it to the Since field.
func (o *ModAssignGetSubmissionsRequest) SetSince(v int32) {
	o.Since = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ModAssignGetSubmissionsRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModAssignGetSubmissionsRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ModAssignGetSubmissionsRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ModAssignGetSubmissionsRequest) SetStatus(v string) {
	o.Status = &v
}

func (o ModAssignGetSubmissionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModAssignGetSubmissionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignmentids"] = o.Assignmentids
	if !IsNil(o.Before) {
		toSerialize["before"] = o.Before
	}
	if !IsNil(o.Since) {
		toSerialize["since"] = o.Since
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *ModAssignGetSubmissionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assignmentids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModAssignGetSubmissionsRequest := _ModAssignGetSubmissionsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModAssignGetSubmissionsRequest)

	if err != nil {
		return err
	}

	*o = ModAssignGetSubmissionsRequest(varModAssignGetSubmissionsRequest)

	return err
}

type NullableModAssignGetSubmissionsRequest struct {
	value *ModAssignGetSubmissionsRequest
	isSet bool
}

func (v NullableModAssignGetSubmissionsRequest) Get() *ModAssignGetSubmissionsRequest {
	return v.value
}

func (v *NullableModAssignGetSubmissionsRequest) Set(val *ModAssignGetSubmissionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModAssignGetSubmissionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModAssignGetSubmissionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModAssignGetSubmissionsRequest(val *ModAssignGetSubmissionsRequest) *NullableModAssignGetSubmissionsRequest {
	return &NullableModAssignGetSubmissionsRequest{value: val, isSet: true}
}

func (v NullableModAssignGetSubmissionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModAssignGetSubmissionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


