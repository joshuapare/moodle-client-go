/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCourseViewCourseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCourseViewCourseRequest{}

// CoreCourseViewCourseRequest struct for CoreCourseViewCourseRequest
type CoreCourseViewCourseRequest struct {
	// id of the course
	Courseid int32 `json:"courseid"`
	// section number
	Sectionnumber *int32 `json:"sectionnumber,omitempty"`
}

type _CoreCourseViewCourseRequest CoreCourseViewCourseRequest

// NewCoreCourseViewCourseRequest instantiates a new CoreCourseViewCourseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCourseViewCourseRequest(courseid int32) *CoreCourseViewCourseRequest {
	this := CoreCourseViewCourseRequest{}
	this.Courseid = courseid
	var sectionnumber int32 = 0
	this.Sectionnumber = &sectionnumber
	return &this
}

// NewCoreCourseViewCourseRequestWithDefaults instantiates a new CoreCourseViewCourseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCourseViewCourseRequestWithDefaults() *CoreCourseViewCourseRequest {
	this := CoreCourseViewCourseRequest{}
	var courseid int32 = null
	this.Courseid = courseid
	var sectionnumber int32 = 0
	this.Sectionnumber = &sectionnumber
	return &this
}

// GetCourseid returns the Courseid field value
func (o *CoreCourseViewCourseRequest) GetCourseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value
// and a boolean to check if the value has been set.
func (o *CoreCourseViewCourseRequest) GetCourseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Courseid, true
}

// SetCourseid sets field value
func (o *CoreCourseViewCourseRequest) SetCourseid(v int32) {
	o.Courseid = v
}

// GetSectionnumber returns the Sectionnumber field value if set, zero value otherwise.
func (o *CoreCourseViewCourseRequest) GetSectionnumber() int32 {
	if o == nil || IsNil(o.Sectionnumber) {
		var ret int32
		return ret
	}
	return *o.Sectionnumber
}

// GetSectionnumberOk returns a tuple with the Sectionnumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCourseViewCourseRequest) GetSectionnumberOk() (*int32, bool) {
	if o == nil || IsNil(o.Sectionnumber) {
		return nil, false
	}
	return o.Sectionnumber, true
}

// HasSectionnumber returns a boolean if a field has been set.
func (o *CoreCourseViewCourseRequest) HasSectionnumber() bool {
	if o != nil && !IsNil(o.Sectionnumber) {
		return true
	}

	return false
}

// SetSectionnumber gets a reference to the given int32 and assigns it to the Sectionnumber field.
func (o *CoreCourseViewCourseRequest) SetSectionnumber(v int32) {
	o.Sectionnumber = &v
}

func (o CoreCourseViewCourseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCourseViewCourseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["courseid"] = o.Courseid
	if !IsNil(o.Sectionnumber) {
		toSerialize["sectionnumber"] = o.Sectionnumber
	}
	return toSerialize, nil
}

func (o *CoreCourseViewCourseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"courseid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCourseViewCourseRequest := _CoreCourseViewCourseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCourseViewCourseRequest)

	if err != nil {
		return err
	}

	*o = CoreCourseViewCourseRequest(varCoreCourseViewCourseRequest)

	return err
}

type NullableCoreCourseViewCourseRequest struct {
	value *CoreCourseViewCourseRequest
	isSet bool
}

func (v NullableCoreCourseViewCourseRequest) Get() *CoreCourseViewCourseRequest {
	return v.value
}

func (v *NullableCoreCourseViewCourseRequest) Set(val *CoreCourseViewCourseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCourseViewCourseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCourseViewCourseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCourseViewCourseRequest(val *CoreCourseViewCourseRequest) *NullableCoreCourseViewCourseRequest {
	return &NullableCoreCourseViewCourseRequest{value: val, isSet: true}
}

func (v NullableCoreCourseViewCourseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCourseViewCourseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


