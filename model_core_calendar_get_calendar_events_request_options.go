/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreCalendarGetCalendarEventsRequestOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarEventsRequestOptions{}

// CoreCalendarGetCalendarEventsRequestOptions struct for CoreCalendarGetCalendarEventsRequestOptions
type CoreCalendarGetCalendarEventsRequestOptions struct {
	// Ignore hidden events or not
	Ignorehidden *bool `json:"ignorehidden,omitempty"`
	// Set to true to return site events
	Siteevents *bool `json:"siteevents,omitempty"`
	// Time to which the events should be returned. We treat 0 and null as no end
	Timeend *int32 `json:"timeend,omitempty"`
	// Time from which events should be returned
	Timestart *int32 `json:"timestart,omitempty"`
	// Set to true to return current user's user events
	Userevents *bool `json:"userevents,omitempty"`
}

// NewCoreCalendarGetCalendarEventsRequestOptions instantiates a new CoreCalendarGetCalendarEventsRequestOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarEventsRequestOptions() *CoreCalendarGetCalendarEventsRequestOptions {
	this := CoreCalendarGetCalendarEventsRequestOptions{}
	var ignorehidden bool = true
	this.Ignorehidden = &ignorehidden
	var siteevents bool = true
	this.Siteevents = &siteevents
	var timeend int32 = 0
	this.Timeend = &timeend
	var timestart int32 = 0
	this.Timestart = &timestart
	var userevents bool = true
	this.Userevents = &userevents
	return &this
}

// NewCoreCalendarGetCalendarEventsRequestOptionsWithDefaults instantiates a new CoreCalendarGetCalendarEventsRequestOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarEventsRequestOptionsWithDefaults() *CoreCalendarGetCalendarEventsRequestOptions {
	this := CoreCalendarGetCalendarEventsRequestOptions{}
	var ignorehidden bool = true
	this.Ignorehidden = &ignorehidden
	var siteevents bool = true
	this.Siteevents = &siteevents
	var timeend int32 = 0
	this.Timeend = &timeend
	var timestart int32 = 0
	this.Timestart = &timestart
	var userevents bool = true
	this.Userevents = &userevents
	return &this
}

// GetIgnorehidden returns the Ignorehidden field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetIgnorehidden() bool {
	if o == nil || IsNil(o.Ignorehidden) {
		var ret bool
		return ret
	}
	return *o.Ignorehidden
}

// GetIgnorehiddenOk returns a tuple with the Ignorehidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetIgnorehiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Ignorehidden) {
		return nil, false
	}
	return o.Ignorehidden, true
}

// HasIgnorehidden returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) HasIgnorehidden() bool {
	if o != nil && !IsNil(o.Ignorehidden) {
		return true
	}

	return false
}

// SetIgnorehidden gets a reference to the given bool and assigns it to the Ignorehidden field.
func (o *CoreCalendarGetCalendarEventsRequestOptions) SetIgnorehidden(v bool) {
	o.Ignorehidden = &v
}

// GetSiteevents returns the Siteevents field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetSiteevents() bool {
	if o == nil || IsNil(o.Siteevents) {
		var ret bool
		return ret
	}
	return *o.Siteevents
}

// GetSiteeventsOk returns a tuple with the Siteevents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetSiteeventsOk() (*bool, bool) {
	if o == nil || IsNil(o.Siteevents) {
		return nil, false
	}
	return o.Siteevents, true
}

// HasSiteevents returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) HasSiteevents() bool {
	if o != nil && !IsNil(o.Siteevents) {
		return true
	}

	return false
}

// SetSiteevents gets a reference to the given bool and assigns it to the Siteevents field.
func (o *CoreCalendarGetCalendarEventsRequestOptions) SetSiteevents(v bool) {
	o.Siteevents = &v
}

// GetTimeend returns the Timeend field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetTimeend() int32 {
	if o == nil || IsNil(o.Timeend) {
		var ret int32
		return ret
	}
	return *o.Timeend
}

// GetTimeendOk returns a tuple with the Timeend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetTimeendOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeend) {
		return nil, false
	}
	return o.Timeend, true
}

// HasTimeend returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) HasTimeend() bool {
	if o != nil && !IsNil(o.Timeend) {
		return true
	}

	return false
}

// SetTimeend gets a reference to the given int32 and assigns it to the Timeend field.
func (o *CoreCalendarGetCalendarEventsRequestOptions) SetTimeend(v int32) {
	o.Timeend = &v
}

// GetTimestart returns the Timestart field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetTimestart() int32 {
	if o == nil || IsNil(o.Timestart) {
		var ret int32
		return ret
	}
	return *o.Timestart
}

// GetTimestartOk returns a tuple with the Timestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetTimestartOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestart) {
		return nil, false
	}
	return o.Timestart, true
}

// HasTimestart returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) HasTimestart() bool {
	if o != nil && !IsNil(o.Timestart) {
		return true
	}

	return false
}

// SetTimestart gets a reference to the given int32 and assigns it to the Timestart field.
func (o *CoreCalendarGetCalendarEventsRequestOptions) SetTimestart(v int32) {
	o.Timestart = &v
}

// GetUserevents returns the Userevents field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetUserevents() bool {
	if o == nil || IsNil(o.Userevents) {
		var ret bool
		return ret
	}
	return *o.Userevents
}

// GetUsereventsOk returns a tuple with the Userevents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) GetUsereventsOk() (*bool, bool) {
	if o == nil || IsNil(o.Userevents) {
		return nil, false
	}
	return o.Userevents, true
}

// HasUserevents returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventsRequestOptions) HasUserevents() bool {
	if o != nil && !IsNil(o.Userevents) {
		return true
	}

	return false
}

// SetUserevents gets a reference to the given bool and assigns it to the Userevents field.
func (o *CoreCalendarGetCalendarEventsRequestOptions) SetUserevents(v bool) {
	o.Userevents = &v
}

func (o CoreCalendarGetCalendarEventsRequestOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarEventsRequestOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ignorehidden) {
		toSerialize["ignorehidden"] = o.Ignorehidden
	}
	if !IsNil(o.Siteevents) {
		toSerialize["siteevents"] = o.Siteevents
	}
	if !IsNil(o.Timeend) {
		toSerialize["timeend"] = o.Timeend
	}
	if !IsNil(o.Timestart) {
		toSerialize["timestart"] = o.Timestart
	}
	if !IsNil(o.Userevents) {
		toSerialize["userevents"] = o.Userevents
	}
	return toSerialize, nil
}

type NullableCoreCalendarGetCalendarEventsRequestOptions struct {
	value *CoreCalendarGetCalendarEventsRequestOptions
	isSet bool
}

func (v NullableCoreCalendarGetCalendarEventsRequestOptions) Get() *CoreCalendarGetCalendarEventsRequestOptions {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarEventsRequestOptions) Set(val *CoreCalendarGetCalendarEventsRequestOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarEventsRequestOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarEventsRequestOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarEventsRequestOptions(val *CoreCalendarGetCalendarEventsRequestOptions) *NullableCoreCalendarGetCalendarEventsRequestOptions {
	return &NullableCoreCalendarGetCalendarEventsRequestOptions{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarEventsRequestOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarEventsRequestOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


