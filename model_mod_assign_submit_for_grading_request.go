/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModAssignSubmitForGradingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModAssignSubmitForGradingRequest{}

// ModAssignSubmitForGradingRequest struct for ModAssignSubmitForGradingRequest
type ModAssignSubmitForGradingRequest struct {
	// Accept the assignment submission statement
	Acceptsubmissionstatement bool `json:"acceptsubmissionstatement"`
	// The assignment id to operate on
	Assignmentid int32 `json:"assignmentid"`
}

type _ModAssignSubmitForGradingRequest ModAssignSubmitForGradingRequest

// NewModAssignSubmitForGradingRequest instantiates a new ModAssignSubmitForGradingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModAssignSubmitForGradingRequest(acceptsubmissionstatement bool, assignmentid int32) *ModAssignSubmitForGradingRequest {
	this := ModAssignSubmitForGradingRequest{}
	this.Acceptsubmissionstatement = acceptsubmissionstatement
	this.Assignmentid = assignmentid
	return &this
}

// NewModAssignSubmitForGradingRequestWithDefaults instantiates a new ModAssignSubmitForGradingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModAssignSubmitForGradingRequestWithDefaults() *ModAssignSubmitForGradingRequest {
	this := ModAssignSubmitForGradingRequest{}
	var acceptsubmissionstatement bool = null
	this.Acceptsubmissionstatement = acceptsubmissionstatement
	return &this
}

// GetAcceptsubmissionstatement returns the Acceptsubmissionstatement field value
func (o *ModAssignSubmitForGradingRequest) GetAcceptsubmissionstatement() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Acceptsubmissionstatement
}

// GetAcceptsubmissionstatementOk returns a tuple with the Acceptsubmissionstatement field value
// and a boolean to check if the value has been set.
func (o *ModAssignSubmitForGradingRequest) GetAcceptsubmissionstatementOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Acceptsubmissionstatement, true
}

// SetAcceptsubmissionstatement sets field value
func (o *ModAssignSubmitForGradingRequest) SetAcceptsubmissionstatement(v bool) {
	o.Acceptsubmissionstatement = v
}

// GetAssignmentid returns the Assignmentid field value
func (o *ModAssignSubmitForGradingRequest) GetAssignmentid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Assignmentid
}

// GetAssignmentidOk returns a tuple with the Assignmentid field value
// and a boolean to check if the value has been set.
func (o *ModAssignSubmitForGradingRequest) GetAssignmentidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assignmentid, true
}

// SetAssignmentid sets field value
func (o *ModAssignSubmitForGradingRequest) SetAssignmentid(v int32) {
	o.Assignmentid = v
}

func (o ModAssignSubmitForGradingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModAssignSubmitForGradingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["acceptsubmissionstatement"] = o.Acceptsubmissionstatement
	toSerialize["assignmentid"] = o.Assignmentid
	return toSerialize, nil
}

func (o *ModAssignSubmitForGradingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"acceptsubmissionstatement",
		"assignmentid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModAssignSubmitForGradingRequest := _ModAssignSubmitForGradingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModAssignSubmitForGradingRequest)

	if err != nil {
		return err
	}

	*o = ModAssignSubmitForGradingRequest(varModAssignSubmitForGradingRequest)

	return err
}

type NullableModAssignSubmitForGradingRequest struct {
	value *ModAssignSubmitForGradingRequest
	isSet bool
}

func (v NullableModAssignSubmitForGradingRequest) Get() *ModAssignSubmitForGradingRequest {
	return v.value
}

func (v *NullableModAssignSubmitForGradingRequest) Set(val *ModAssignSubmitForGradingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModAssignSubmitForGradingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModAssignSubmitForGradingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModAssignSubmitForGradingRequest(val *ModAssignSubmitForGradingRequest) *NullableModAssignSubmitForGradingRequest {
	return &NullableModAssignSubmitForGradingRequest{value: val, isSet: true}
}

func (v NullableModAssignSubmitForGradingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModAssignSubmitForGradingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


