/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreBadgesGetUserBadges200ResponseBadgesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreBadgesGetUserBadges200ResponseBadgesInner{}

// CoreBadgesGetUserBadges200ResponseBadgesInner struct for CoreBadgesGetUserBadges200ResponseBadgesInner
type CoreBadgesGetUserBadges200ResponseBadgesInner struct {
	Alignment []CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner `json:"alignment,omitempty"`
	// Attachment
	Attachment *int32 `json:"attachment,omitempty"`
	// Badge URL
	Badgeurl *string `json:"badgeurl,omitempty"`
	// Course id
	Courseid *int32 `json:"courseid,omitempty"`
	// Date expire
	Dateexpire *int32 `json:"dateexpire,omitempty"`
	// Date issued
	Dateissued *int32 `json:"dateissued,omitempty"`
	// Badge description
	Description *string `json:"description,omitempty"`
	// User email
	Email *string `json:"email,omitempty"`
	Endorsement *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement `json:"endorsement,omitempty"`
	// Expire date
	Expiredate *int32 `json:"expiredate,omitempty"`
	// Expire period
	Expireperiod *int32 `json:"expireperiod,omitempty"`
	// Badge id
	Id *int32 `json:"id,omitempty"`
	// Email of the image author
	Imageauthoremail *string `json:"imageauthoremail,omitempty"`
	// Name of the image author
	Imageauthorname *string `json:"imageauthorname,omitempty"`
	// URL of the image author
	Imageauthorurl *string `json:"imageauthorurl,omitempty"`
	// Caption of the image
	Imagecaption *string `json:"imagecaption,omitempty"`
	// Issued id
	Issuedid *int32 `json:"issuedid,omitempty"`
	// Issuer contact
	Issuercontact *string `json:"issuercontact,omitempty"`
	// Issuer name
	Issuername *string `json:"issuername,omitempty"`
	// Issuer URL
	Issuerurl *string `json:"issuerurl,omitempty"`
	// Language
	Language *string `json:"language,omitempty"`
	// Message
	Message *string `json:"message,omitempty"`
	// Message subject
	Messagesubject *string `json:"messagesubject,omitempty"`
	// Badge name
	Name *string `json:"name,omitempty"`
	// Next cron
	Nextcron *int32 `json:"nextcron,omitempty"`
	// Whether to notify when badge is awarded
	Notification *int32 `json:"notification,omitempty"`
	Relatedbadges []CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner `json:"relatedbadges,omitempty"`
	// Status
	Status *int32 `json:"status,omitempty"`
	// Time created
	Timecreated *int32 `json:"timecreated,omitempty"`
	// Time modified
	Timemodified *int32 `json:"timemodified,omitempty"`
	// Type
	Type *int32 `json:"type,omitempty"`
	// Unique hash
	Uniquehash *string `json:"uniquehash,omitempty"`
	// User created
	Usercreated *int32 `json:"usercreated,omitempty"`
	// User modified
	Usermodified *int32 `json:"usermodified,omitempty"`
	// Version
	Version *string `json:"version,omitempty"`
	// Visible
	Visible *int32 `json:"visible,omitempty"`
}

// NewCoreBadgesGetUserBadges200ResponseBadgesInner instantiates a new CoreBadgesGetUserBadges200ResponseBadgesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreBadgesGetUserBadges200ResponseBadgesInner() *CoreBadgesGetUserBadges200ResponseBadgesInner {
	this := CoreBadgesGetUserBadges200ResponseBadgesInner{}
	var attachment int32 = 1
	this.Attachment = &attachment
	var dateissued int32 = 0
	this.Dateissued = &dateissued
	var notification int32 = 1
	this.Notification = &notification
	var status int32 = 0
	this.Status = &status
	var timecreated int32 = 0
	this.Timecreated = &timecreated
	var timemodified int32 = 0
	this.Timemodified = &timemodified
	var type_ int32 = 1
	this.Type = &type_
	var visible int32 = 0
	this.Visible = &visible
	return &this
}

// NewCoreBadgesGetUserBadges200ResponseBadgesInnerWithDefaults instantiates a new CoreBadgesGetUserBadges200ResponseBadgesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreBadgesGetUserBadges200ResponseBadgesInnerWithDefaults() *CoreBadgesGetUserBadges200ResponseBadgesInner {
	this := CoreBadgesGetUserBadges200ResponseBadgesInner{}
	var attachment int32 = 1
	this.Attachment = &attachment
	var dateissued int32 = 0
	this.Dateissued = &dateissued
	var notification int32 = 1
	this.Notification = &notification
	var status int32 = 0
	this.Status = &status
	var timecreated int32 = 0
	this.Timecreated = &timecreated
	var timemodified int32 = 0
	this.Timemodified = &timemodified
	var type_ int32 = 1
	this.Type = &type_
	var visible int32 = 0
	this.Visible = &visible
	return &this
}

// GetAlignment returns the Alignment field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetAlignment() []CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner {
	if o == nil || IsNil(o.Alignment) {
		var ret []CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner
		return ret
	}
	return o.Alignment
}

// GetAlignmentOk returns a tuple with the Alignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetAlignmentOk() ([]CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner, bool) {
	if o == nil || IsNil(o.Alignment) {
		return nil, false
	}
	return o.Alignment, true
}

// HasAlignment returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasAlignment() bool {
	if o != nil && !IsNil(o.Alignment) {
		return true
	}

	return false
}

// SetAlignment gets a reference to the given []CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner and assigns it to the Alignment field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetAlignment(v []CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner) {
	o.Alignment = v
}

// GetAttachment returns the Attachment field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetAttachment() int32 {
	if o == nil || IsNil(o.Attachment) {
		var ret int32
		return ret
	}
	return *o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetAttachmentOk() (*int32, bool) {
	if o == nil || IsNil(o.Attachment) {
		return nil, false
	}
	return o.Attachment, true
}

// HasAttachment returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasAttachment() bool {
	if o != nil && !IsNil(o.Attachment) {
		return true
	}

	return false
}

// SetAttachment gets a reference to the given int32 and assigns it to the Attachment field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetAttachment(v int32) {
	o.Attachment = &v
}

// GetBadgeurl returns the Badgeurl field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetBadgeurl() string {
	if o == nil || IsNil(o.Badgeurl) {
		var ret string
		return ret
	}
	return *o.Badgeurl
}

// GetBadgeurlOk returns a tuple with the Badgeurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetBadgeurlOk() (*string, bool) {
	if o == nil || IsNil(o.Badgeurl) {
		return nil, false
	}
	return o.Badgeurl, true
}

// HasBadgeurl returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasBadgeurl() bool {
	if o != nil && !IsNil(o.Badgeurl) {
		return true
	}

	return false
}

// SetBadgeurl gets a reference to the given string and assigns it to the Badgeurl field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetBadgeurl(v string) {
	o.Badgeurl = &v
}

// GetCourseid returns the Courseid field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetCourseid() int32 {
	if o == nil || IsNil(o.Courseid) {
		var ret int32
		return ret
	}
	return *o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetCourseidOk() (*int32, bool) {
	if o == nil || IsNil(o.Courseid) {
		return nil, false
	}
	return o.Courseid, true
}

// HasCourseid returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasCourseid() bool {
	if o != nil && !IsNil(o.Courseid) {
		return true
	}

	return false
}

// SetCourseid gets a reference to the given int32 and assigns it to the Courseid field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetCourseid(v int32) {
	o.Courseid = &v
}

// GetDateexpire returns the Dateexpire field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetDateexpire() int32 {
	if o == nil || IsNil(o.Dateexpire) {
		var ret int32
		return ret
	}
	return *o.Dateexpire
}

// GetDateexpireOk returns a tuple with the Dateexpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetDateexpireOk() (*int32, bool) {
	if o == nil || IsNil(o.Dateexpire) {
		return nil, false
	}
	return o.Dateexpire, true
}

// HasDateexpire returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasDateexpire() bool {
	if o != nil && !IsNil(o.Dateexpire) {
		return true
	}

	return false
}

// SetDateexpire gets a reference to the given int32 and assigns it to the Dateexpire field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetDateexpire(v int32) {
	o.Dateexpire = &v
}

// GetDateissued returns the Dateissued field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetDateissued() int32 {
	if o == nil || IsNil(o.Dateissued) {
		var ret int32
		return ret
	}
	return *o.Dateissued
}

// GetDateissuedOk returns a tuple with the Dateissued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetDateissuedOk() (*int32, bool) {
	if o == nil || IsNil(o.Dateissued) {
		return nil, false
	}
	return o.Dateissued, true
}

// HasDateissued returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasDateissued() bool {
	if o != nil && !IsNil(o.Dateissued) {
		return true
	}

	return false
}

// SetDateissued gets a reference to the given int32 and assigns it to the Dateissued field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetDateissued(v int32) {
	o.Dateissued = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetEmail(v string) {
	o.Email = &v
}

// GetEndorsement returns the Endorsement field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetEndorsement() CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement {
	if o == nil || IsNil(o.Endorsement) {
		var ret CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement
		return ret
	}
	return *o.Endorsement
}

// GetEndorsementOk returns a tuple with the Endorsement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetEndorsementOk() (*CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement, bool) {
	if o == nil || IsNil(o.Endorsement) {
		return nil, false
	}
	return o.Endorsement, true
}

// HasEndorsement returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasEndorsement() bool {
	if o != nil && !IsNil(o.Endorsement) {
		return true
	}

	return false
}

// SetEndorsement gets a reference to the given CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement and assigns it to the Endorsement field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetEndorsement(v CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) {
	o.Endorsement = &v
}

// GetExpiredate returns the Expiredate field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetExpiredate() int32 {
	if o == nil || IsNil(o.Expiredate) {
		var ret int32
		return ret
	}
	return *o.Expiredate
}

// GetExpiredateOk returns a tuple with the Expiredate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetExpiredateOk() (*int32, bool) {
	if o == nil || IsNil(o.Expiredate) {
		return nil, false
	}
	return o.Expiredate, true
}

// HasExpiredate returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasExpiredate() bool {
	if o != nil && !IsNil(o.Expiredate) {
		return true
	}

	return false
}

// SetExpiredate gets a reference to the given int32 and assigns it to the Expiredate field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetExpiredate(v int32) {
	o.Expiredate = &v
}

// GetExpireperiod returns the Expireperiod field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetExpireperiod() int32 {
	if o == nil || IsNil(o.Expireperiod) {
		var ret int32
		return ret
	}
	return *o.Expireperiod
}

// GetExpireperiodOk returns a tuple with the Expireperiod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetExpireperiodOk() (*int32, bool) {
	if o == nil || IsNil(o.Expireperiod) {
		return nil, false
	}
	return o.Expireperiod, true
}

// HasExpireperiod returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasExpireperiod() bool {
	if o != nil && !IsNil(o.Expireperiod) {
		return true
	}

	return false
}

// SetExpireperiod gets a reference to the given int32 and assigns it to the Expireperiod field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetExpireperiod(v int32) {
	o.Expireperiod = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetId(v int32) {
	o.Id = &v
}

// GetImageauthoremail returns the Imageauthoremail field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetImageauthoremail() string {
	if o == nil || IsNil(o.Imageauthoremail) {
		var ret string
		return ret
	}
	return *o.Imageauthoremail
}

// GetImageauthoremailOk returns a tuple with the Imageauthoremail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetImageauthoremailOk() (*string, bool) {
	if o == nil || IsNil(o.Imageauthoremail) {
		return nil, false
	}
	return o.Imageauthoremail, true
}

// HasImageauthoremail returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasImageauthoremail() bool {
	if o != nil && !IsNil(o.Imageauthoremail) {
		return true
	}

	return false
}

// SetImageauthoremail gets a reference to the given string and assigns it to the Imageauthoremail field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetImageauthoremail(v string) {
	o.Imageauthoremail = &v
}

// GetImageauthorname returns the Imageauthorname field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetImageauthorname() string {
	if o == nil || IsNil(o.Imageauthorname) {
		var ret string
		return ret
	}
	return *o.Imageauthorname
}

// GetImageauthornameOk returns a tuple with the Imageauthorname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetImageauthornameOk() (*string, bool) {
	if o == nil || IsNil(o.Imageauthorname) {
		return nil, false
	}
	return o.Imageauthorname, true
}

// HasImageauthorname returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasImageauthorname() bool {
	if o != nil && !IsNil(o.Imageauthorname) {
		return true
	}

	return false
}

// SetImageauthorname gets a reference to the given string and assigns it to the Imageauthorname field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetImageauthorname(v string) {
	o.Imageauthorname = &v
}

// GetImageauthorurl returns the Imageauthorurl field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetImageauthorurl() string {
	if o == nil || IsNil(o.Imageauthorurl) {
		var ret string
		return ret
	}
	return *o.Imageauthorurl
}

// GetImageauthorurlOk returns a tuple with the Imageauthorurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetImageauthorurlOk() (*string, bool) {
	if o == nil || IsNil(o.Imageauthorurl) {
		return nil, false
	}
	return o.Imageauthorurl, true
}

// HasImageauthorurl returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasImageauthorurl() bool {
	if o != nil && !IsNil(o.Imageauthorurl) {
		return true
	}

	return false
}

// SetImageauthorurl gets a reference to the given string and assigns it to the Imageauthorurl field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetImageauthorurl(v string) {
	o.Imageauthorurl = &v
}

// GetImagecaption returns the Imagecaption field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetImagecaption() string {
	if o == nil || IsNil(o.Imagecaption) {
		var ret string
		return ret
	}
	return *o.Imagecaption
}

// GetImagecaptionOk returns a tuple with the Imagecaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetImagecaptionOk() (*string, bool) {
	if o == nil || IsNil(o.Imagecaption) {
		return nil, false
	}
	return o.Imagecaption, true
}

// HasImagecaption returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasImagecaption() bool {
	if o != nil && !IsNil(o.Imagecaption) {
		return true
	}

	return false
}

// SetImagecaption gets a reference to the given string and assigns it to the Imagecaption field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetImagecaption(v string) {
	o.Imagecaption = &v
}

// GetIssuedid returns the Issuedid field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIssuedid() int32 {
	if o == nil || IsNil(o.Issuedid) {
		var ret int32
		return ret
	}
	return *o.Issuedid
}

// GetIssuedidOk returns a tuple with the Issuedid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIssuedidOk() (*int32, bool) {
	if o == nil || IsNil(o.Issuedid) {
		return nil, false
	}
	return o.Issuedid, true
}

// HasIssuedid returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasIssuedid() bool {
	if o != nil && !IsNil(o.Issuedid) {
		return true
	}

	return false
}

// SetIssuedid gets a reference to the given int32 and assigns it to the Issuedid field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetIssuedid(v int32) {
	o.Issuedid = &v
}

// GetIssuercontact returns the Issuercontact field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIssuercontact() string {
	if o == nil || IsNil(o.Issuercontact) {
		var ret string
		return ret
	}
	return *o.Issuercontact
}

// GetIssuercontactOk returns a tuple with the Issuercontact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIssuercontactOk() (*string, bool) {
	if o == nil || IsNil(o.Issuercontact) {
		return nil, false
	}
	return o.Issuercontact, true
}

// HasIssuercontact returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasIssuercontact() bool {
	if o != nil && !IsNil(o.Issuercontact) {
		return true
	}

	return false
}

// SetIssuercontact gets a reference to the given string and assigns it to the Issuercontact field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetIssuercontact(v string) {
	o.Issuercontact = &v
}

// GetIssuername returns the Issuername field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIssuername() string {
	if o == nil || IsNil(o.Issuername) {
		var ret string
		return ret
	}
	return *o.Issuername
}

// GetIssuernameOk returns a tuple with the Issuername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIssuernameOk() (*string, bool) {
	if o == nil || IsNil(o.Issuername) {
		return nil, false
	}
	return o.Issuername, true
}

// HasIssuername returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasIssuername() bool {
	if o != nil && !IsNil(o.Issuername) {
		return true
	}

	return false
}

// SetIssuername gets a reference to the given string and assigns it to the Issuername field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetIssuername(v string) {
	o.Issuername = &v
}

// GetIssuerurl returns the Issuerurl field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIssuerurl() string {
	if o == nil || IsNil(o.Issuerurl) {
		var ret string
		return ret
	}
	return *o.Issuerurl
}

// GetIssuerurlOk returns a tuple with the Issuerurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetIssuerurlOk() (*string, bool) {
	if o == nil || IsNil(o.Issuerurl) {
		return nil, false
	}
	return o.Issuerurl, true
}

// HasIssuerurl returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasIssuerurl() bool {
	if o != nil && !IsNil(o.Issuerurl) {
		return true
	}

	return false
}

// SetIssuerurl gets a reference to the given string and assigns it to the Issuerurl field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetIssuerurl(v string) {
	o.Issuerurl = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetLanguage(v string) {
	o.Language = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetMessage(v string) {
	o.Message = &v
}

// GetMessagesubject returns the Messagesubject field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetMessagesubject() string {
	if o == nil || IsNil(o.Messagesubject) {
		var ret string
		return ret
	}
	return *o.Messagesubject
}

// GetMessagesubjectOk returns a tuple with the Messagesubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetMessagesubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Messagesubject) {
		return nil, false
	}
	return o.Messagesubject, true
}

// HasMessagesubject returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasMessagesubject() bool {
	if o != nil && !IsNil(o.Messagesubject) {
		return true
	}

	return false
}

// SetMessagesubject gets a reference to the given string and assigns it to the Messagesubject field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetMessagesubject(v string) {
	o.Messagesubject = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetName(v string) {
	o.Name = &v
}

// GetNextcron returns the Nextcron field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetNextcron() int32 {
	if o == nil || IsNil(o.Nextcron) {
		var ret int32
		return ret
	}
	return *o.Nextcron
}

// GetNextcronOk returns a tuple with the Nextcron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetNextcronOk() (*int32, bool) {
	if o == nil || IsNil(o.Nextcron) {
		return nil, false
	}
	return o.Nextcron, true
}

// HasNextcron returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasNextcron() bool {
	if o != nil && !IsNil(o.Nextcron) {
		return true
	}

	return false
}

// SetNextcron gets a reference to the given int32 and assigns it to the Nextcron field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetNextcron(v int32) {
	o.Nextcron = &v
}

// GetNotification returns the Notification field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetNotification() int32 {
	if o == nil || IsNil(o.Notification) {
		var ret int32
		return ret
	}
	return *o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetNotificationOk() (*int32, bool) {
	if o == nil || IsNil(o.Notification) {
		return nil, false
	}
	return o.Notification, true
}

// HasNotification returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasNotification() bool {
	if o != nil && !IsNil(o.Notification) {
		return true
	}

	return false
}

// SetNotification gets a reference to the given int32 and assigns it to the Notification field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetNotification(v int32) {
	o.Notification = &v
}

// GetRelatedbadges returns the Relatedbadges field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetRelatedbadges() []CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner {
	if o == nil || IsNil(o.Relatedbadges) {
		var ret []CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner
		return ret
	}
	return o.Relatedbadges
}

// GetRelatedbadgesOk returns a tuple with the Relatedbadges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetRelatedbadgesOk() ([]CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner, bool) {
	if o == nil || IsNil(o.Relatedbadges) {
		return nil, false
	}
	return o.Relatedbadges, true
}

// HasRelatedbadges returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasRelatedbadges() bool {
	if o != nil && !IsNil(o.Relatedbadges) {
		return true
	}

	return false
}

// SetRelatedbadges gets a reference to the given []CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner and assigns it to the Relatedbadges field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetRelatedbadges(v []CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) {
	o.Relatedbadges = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetStatus(v int32) {
	o.Status = &v
}

// GetTimecreated returns the Timecreated field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetTimecreated() int32 {
	if o == nil || IsNil(o.Timecreated) {
		var ret int32
		return ret
	}
	return *o.Timecreated
}

// GetTimecreatedOk returns a tuple with the Timecreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetTimecreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Timecreated) {
		return nil, false
	}
	return o.Timecreated, true
}

// HasTimecreated returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasTimecreated() bool {
	if o != nil && !IsNil(o.Timecreated) {
		return true
	}

	return false
}

// SetTimecreated gets a reference to the given int32 and assigns it to the Timecreated field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetTimecreated(v int32) {
	o.Timecreated = &v
}

// GetTimemodified returns the Timemodified field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetTimemodified() int32 {
	if o == nil || IsNil(o.Timemodified) {
		var ret int32
		return ret
	}
	return *o.Timemodified
}

// GetTimemodifiedOk returns a tuple with the Timemodified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetTimemodifiedOk() (*int32, bool) {
	if o == nil || IsNil(o.Timemodified) {
		return nil, false
	}
	return o.Timemodified, true
}

// HasTimemodified returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasTimemodified() bool {
	if o != nil && !IsNil(o.Timemodified) {
		return true
	}

	return false
}

// SetTimemodified gets a reference to the given int32 and assigns it to the Timemodified field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetTimemodified(v int32) {
	o.Timemodified = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetType(v int32) {
	o.Type = &v
}

// GetUniquehash returns the Uniquehash field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetUniquehash() string {
	if o == nil || IsNil(o.Uniquehash) {
		var ret string
		return ret
	}
	return *o.Uniquehash
}

// GetUniquehashOk returns a tuple with the Uniquehash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetUniquehashOk() (*string, bool) {
	if o == nil || IsNil(o.Uniquehash) {
		return nil, false
	}
	return o.Uniquehash, true
}

// HasUniquehash returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasUniquehash() bool {
	if o != nil && !IsNil(o.Uniquehash) {
		return true
	}

	return false
}

// SetUniquehash gets a reference to the given string and assigns it to the Uniquehash field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetUniquehash(v string) {
	o.Uniquehash = &v
}

// GetUsercreated returns the Usercreated field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetUsercreated() int32 {
	if o == nil || IsNil(o.Usercreated) {
		var ret int32
		return ret
	}
	return *o.Usercreated
}

// GetUsercreatedOk returns a tuple with the Usercreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetUsercreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Usercreated) {
		return nil, false
	}
	return o.Usercreated, true
}

// HasUsercreated returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasUsercreated() bool {
	if o != nil && !IsNil(o.Usercreated) {
		return true
	}

	return false
}

// SetUsercreated gets a reference to the given int32 and assigns it to the Usercreated field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetUsercreated(v int32) {
	o.Usercreated = &v
}

// GetUsermodified returns the Usermodified field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetUsermodified() int32 {
	if o == nil || IsNil(o.Usermodified) {
		var ret int32
		return ret
	}
	return *o.Usermodified
}

// GetUsermodifiedOk returns a tuple with the Usermodified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetUsermodifiedOk() (*int32, bool) {
	if o == nil || IsNil(o.Usermodified) {
		return nil, false
	}
	return o.Usermodified, true
}

// HasUsermodified returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasUsermodified() bool {
	if o != nil && !IsNil(o.Usermodified) {
		return true
	}

	return false
}

// SetUsermodified gets a reference to the given int32 and assigns it to the Usermodified field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetUsermodified(v int32) {
	o.Usermodified = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetVersion(v string) {
	o.Version = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetVisible() int32 {
	if o == nil || IsNil(o.Visible) {
		var ret int32
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) GetVisibleOk() (*int32, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given int32 and assigns it to the Visible field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInner) SetVisible(v int32) {
	o.Visible = &v
}

func (o CoreBadgesGetUserBadges200ResponseBadgesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreBadgesGetUserBadges200ResponseBadgesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alignment) {
		toSerialize["alignment"] = o.Alignment
	}
	if !IsNil(o.Attachment) {
		toSerialize["attachment"] = o.Attachment
	}
	if !IsNil(o.Badgeurl) {
		toSerialize["badgeurl"] = o.Badgeurl
	}
	if !IsNil(o.Courseid) {
		toSerialize["courseid"] = o.Courseid
	}
	if !IsNil(o.Dateexpire) {
		toSerialize["dateexpire"] = o.Dateexpire
	}
	if !IsNil(o.Dateissued) {
		toSerialize["dateissued"] = o.Dateissued
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Endorsement) {
		toSerialize["endorsement"] = o.Endorsement
	}
	if !IsNil(o.Expiredate) {
		toSerialize["expiredate"] = o.Expiredate
	}
	if !IsNil(o.Expireperiod) {
		toSerialize["expireperiod"] = o.Expireperiod
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Imageauthoremail) {
		toSerialize["imageauthoremail"] = o.Imageauthoremail
	}
	if !IsNil(o.Imageauthorname) {
		toSerialize["imageauthorname"] = o.Imageauthorname
	}
	if !IsNil(o.Imageauthorurl) {
		toSerialize["imageauthorurl"] = o.Imageauthorurl
	}
	if !IsNil(o.Imagecaption) {
		toSerialize["imagecaption"] = o.Imagecaption
	}
	if !IsNil(o.Issuedid) {
		toSerialize["issuedid"] = o.Issuedid
	}
	if !IsNil(o.Issuercontact) {
		toSerialize["issuercontact"] = o.Issuercontact
	}
	if !IsNil(o.Issuername) {
		toSerialize["issuername"] = o.Issuername
	}
	if !IsNil(o.Issuerurl) {
		toSerialize["issuerurl"] = o.Issuerurl
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Messagesubject) {
		toSerialize["messagesubject"] = o.Messagesubject
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Nextcron) {
		toSerialize["nextcron"] = o.Nextcron
	}
	if !IsNil(o.Notification) {
		toSerialize["notification"] = o.Notification
	}
	if !IsNil(o.Relatedbadges) {
		toSerialize["relatedbadges"] = o.Relatedbadges
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Timecreated) {
		toSerialize["timecreated"] = o.Timecreated
	}
	if !IsNil(o.Timemodified) {
		toSerialize["timemodified"] = o.Timemodified
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uniquehash) {
		toSerialize["uniquehash"] = o.Uniquehash
	}
	if !IsNil(o.Usercreated) {
		toSerialize["usercreated"] = o.Usercreated
	}
	if !IsNil(o.Usermodified) {
		toSerialize["usermodified"] = o.Usermodified
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	return toSerialize, nil
}

type NullableCoreBadgesGetUserBadges200ResponseBadgesInner struct {
	value *CoreBadgesGetUserBadges200ResponseBadgesInner
	isSet bool
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInner) Get() *CoreBadgesGetUserBadges200ResponseBadgesInner {
	return v.value
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInner) Set(val *CoreBadgesGetUserBadges200ResponseBadgesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreBadgesGetUserBadges200ResponseBadgesInner(val *CoreBadgesGetUserBadges200ResponseBadgesInner) *NullableCoreBadgesGetUserBadges200ResponseBadgesInner {
	return &NullableCoreBadgesGetUserBadges200ResponseBadgesInner{value: val, isSet: true}
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


