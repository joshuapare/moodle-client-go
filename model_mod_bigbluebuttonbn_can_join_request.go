/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModBigbluebuttonbnCanJoinRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModBigbluebuttonbnCanJoinRequest{}

// ModBigbluebuttonbnCanJoinRequest struct for ModBigbluebuttonbnCanJoinRequest
type ModBigbluebuttonbnCanJoinRequest struct {
	// course module id
	Cmid int32 `json:"cmid"`
	// bigbluebuttonbn group id
	Groupid *int32 `json:"groupid,omitempty"`
}

type _ModBigbluebuttonbnCanJoinRequest ModBigbluebuttonbnCanJoinRequest

// NewModBigbluebuttonbnCanJoinRequest instantiates a new ModBigbluebuttonbnCanJoinRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModBigbluebuttonbnCanJoinRequest(cmid int32) *ModBigbluebuttonbnCanJoinRequest {
	this := ModBigbluebuttonbnCanJoinRequest{}
	this.Cmid = cmid
	var groupid int32 = 0
	this.Groupid = &groupid
	return &this
}

// NewModBigbluebuttonbnCanJoinRequestWithDefaults instantiates a new ModBigbluebuttonbnCanJoinRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModBigbluebuttonbnCanJoinRequestWithDefaults() *ModBigbluebuttonbnCanJoinRequest {
	this := ModBigbluebuttonbnCanJoinRequest{}
	var groupid int32 = 0
	this.Groupid = &groupid
	return &this
}

// GetCmid returns the Cmid field value
func (o *ModBigbluebuttonbnCanJoinRequest) GetCmid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cmid
}

// GetCmidOk returns a tuple with the Cmid field value
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnCanJoinRequest) GetCmidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cmid, true
}

// SetCmid sets field value
func (o *ModBigbluebuttonbnCanJoinRequest) SetCmid(v int32) {
	o.Cmid = v
}

// GetGroupid returns the Groupid field value if set, zero value otherwise.
func (o *ModBigbluebuttonbnCanJoinRequest) GetGroupid() int32 {
	if o == nil || IsNil(o.Groupid) {
		var ret int32
		return ret
	}
	return *o.Groupid
}

// GetGroupidOk returns a tuple with the Groupid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModBigbluebuttonbnCanJoinRequest) GetGroupidOk() (*int32, bool) {
	if o == nil || IsNil(o.Groupid) {
		return nil, false
	}
	return o.Groupid, true
}

// HasGroupid returns a boolean if a field has been set.
func (o *ModBigbluebuttonbnCanJoinRequest) HasGroupid() bool {
	if o != nil && !IsNil(o.Groupid) {
		return true
	}

	return false
}

// SetGroupid gets a reference to the given int32 and assigns it to the Groupid field.
func (o *ModBigbluebuttonbnCanJoinRequest) SetGroupid(v int32) {
	o.Groupid = &v
}

func (o ModBigbluebuttonbnCanJoinRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModBigbluebuttonbnCanJoinRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cmid"] = o.Cmid
	if !IsNil(o.Groupid) {
		toSerialize["groupid"] = o.Groupid
	}
	return toSerialize, nil
}

func (o *ModBigbluebuttonbnCanJoinRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cmid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModBigbluebuttonbnCanJoinRequest := _ModBigbluebuttonbnCanJoinRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModBigbluebuttonbnCanJoinRequest)

	if err != nil {
		return err
	}

	*o = ModBigbluebuttonbnCanJoinRequest(varModBigbluebuttonbnCanJoinRequest)

	return err
}

type NullableModBigbluebuttonbnCanJoinRequest struct {
	value *ModBigbluebuttonbnCanJoinRequest
	isSet bool
}

func (v NullableModBigbluebuttonbnCanJoinRequest) Get() *ModBigbluebuttonbnCanJoinRequest {
	return v.value
}

func (v *NullableModBigbluebuttonbnCanJoinRequest) Set(val *ModBigbluebuttonbnCanJoinRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModBigbluebuttonbnCanJoinRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModBigbluebuttonbnCanJoinRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModBigbluebuttonbnCanJoinRequest(val *ModBigbluebuttonbnCanJoinRequest) *NullableModBigbluebuttonbnCanJoinRequest {
	return &NullableModBigbluebuttonbnCanJoinRequest{value: val, isSet: true}
}

func (v NullableModBigbluebuttonbnCanJoinRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModBigbluebuttonbnCanJoinRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


