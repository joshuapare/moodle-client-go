/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QuizaccessSebValidateQuizKeys200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuizaccessSebValidateQuizKeys200Response{}

// QuizaccessSebValidateQuizKeys200Response struct for QuizaccessSebValidateQuizKeys200Response
type QuizaccessSebValidateQuizKeys200Response struct {
	// Is a provided browser exam key valid?
	Browserexamkey bool `json:"browserexamkey"`
	// Is a provided config key valid?
	Configkey bool `json:"configkey"`
}

type _QuizaccessSebValidateQuizKeys200Response QuizaccessSebValidateQuizKeys200Response

// NewQuizaccessSebValidateQuizKeys200Response instantiates a new QuizaccessSebValidateQuizKeys200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuizaccessSebValidateQuizKeys200Response(browserexamkey bool, configkey bool) *QuizaccessSebValidateQuizKeys200Response {
	this := QuizaccessSebValidateQuizKeys200Response{}
	this.Browserexamkey = browserexamkey
	this.Configkey = configkey
	return &this
}

// NewQuizaccessSebValidateQuizKeys200ResponseWithDefaults instantiates a new QuizaccessSebValidateQuizKeys200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuizaccessSebValidateQuizKeys200ResponseWithDefaults() *QuizaccessSebValidateQuizKeys200Response {
	this := QuizaccessSebValidateQuizKeys200Response{}
	var browserexamkey bool = 0
	this.Browserexamkey = browserexamkey
	var configkey bool = 0
	this.Configkey = configkey
	return &this
}

// GetBrowserexamkey returns the Browserexamkey field value
func (o *QuizaccessSebValidateQuizKeys200Response) GetBrowserexamkey() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Browserexamkey
}

// GetBrowserexamkeyOk returns a tuple with the Browserexamkey field value
// and a boolean to check if the value has been set.
func (o *QuizaccessSebValidateQuizKeys200Response) GetBrowserexamkeyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Browserexamkey, true
}

// SetBrowserexamkey sets field value
func (o *QuizaccessSebValidateQuizKeys200Response) SetBrowserexamkey(v bool) {
	o.Browserexamkey = v
}

// GetConfigkey returns the Configkey field value
func (o *QuizaccessSebValidateQuizKeys200Response) GetConfigkey() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Configkey
}

// GetConfigkeyOk returns a tuple with the Configkey field value
// and a boolean to check if the value has been set.
func (o *QuizaccessSebValidateQuizKeys200Response) GetConfigkeyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configkey, true
}

// SetConfigkey sets field value
func (o *QuizaccessSebValidateQuizKeys200Response) SetConfigkey(v bool) {
	o.Configkey = v
}

func (o QuizaccessSebValidateQuizKeys200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuizaccessSebValidateQuizKeys200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["browserexamkey"] = o.Browserexamkey
	toSerialize["configkey"] = o.Configkey
	return toSerialize, nil
}

func (o *QuizaccessSebValidateQuizKeys200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"browserexamkey",
		"configkey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuizaccessSebValidateQuizKeys200Response := _QuizaccessSebValidateQuizKeys200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuizaccessSebValidateQuizKeys200Response)

	if err != nil {
		return err
	}

	*o = QuizaccessSebValidateQuizKeys200Response(varQuizaccessSebValidateQuizKeys200Response)

	return err
}

type NullableQuizaccessSebValidateQuizKeys200Response struct {
	value *QuizaccessSebValidateQuizKeys200Response
	isSet bool
}

func (v NullableQuizaccessSebValidateQuizKeys200Response) Get() *QuizaccessSebValidateQuizKeys200Response {
	return v.value
}

func (v *NullableQuizaccessSebValidateQuizKeys200Response) Set(val *QuizaccessSebValidateQuizKeys200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableQuizaccessSebValidateQuizKeys200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableQuizaccessSebValidateQuizKeys200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuizaccessSebValidateQuizKeys200Response(val *QuizaccessSebValidateQuizKeys200Response) *NullableQuizaccessSebValidateQuizKeys200Response {
	return &NullableQuizaccessSebValidateQuizKeys200Response{value: val, isSet: true}
}

func (v NullableQuizaccessSebValidateQuizKeys200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuizaccessSebValidateQuizKeys200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


