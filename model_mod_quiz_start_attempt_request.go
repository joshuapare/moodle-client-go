/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModQuizStartAttemptRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModQuizStartAttemptRequest{}

// ModQuizStartAttemptRequest struct for ModQuizStartAttemptRequest
type ModQuizStartAttemptRequest struct {
	// Whether to force a new attempt or not.
	Forcenew *bool `json:"forcenew,omitempty"`
	Preflightdata []ModQuizGetAttemptDataRequestPreflightdataInner `json:"preflightdata,omitempty"`
	// quiz instance id
	Quizid int32 `json:"quizid"`
}

type _ModQuizStartAttemptRequest ModQuizStartAttemptRequest

// NewModQuizStartAttemptRequest instantiates a new ModQuizStartAttemptRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModQuizStartAttemptRequest(quizid int32) *ModQuizStartAttemptRequest {
	this := ModQuizStartAttemptRequest{}
	var forcenew bool = false
	this.Forcenew = &forcenew
	this.Quizid = quizid
	return &this
}

// NewModQuizStartAttemptRequestWithDefaults instantiates a new ModQuizStartAttemptRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModQuizStartAttemptRequestWithDefaults() *ModQuizStartAttemptRequest {
	this := ModQuizStartAttemptRequest{}
	var forcenew bool = false
	this.Forcenew = &forcenew
	return &this
}

// GetForcenew returns the Forcenew field value if set, zero value otherwise.
func (o *ModQuizStartAttemptRequest) GetForcenew() bool {
	if o == nil || IsNil(o.Forcenew) {
		var ret bool
		return ret
	}
	return *o.Forcenew
}

// GetForcenewOk returns a tuple with the Forcenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizStartAttemptRequest) GetForcenewOk() (*bool, bool) {
	if o == nil || IsNil(o.Forcenew) {
		return nil, false
	}
	return o.Forcenew, true
}

// HasForcenew returns a boolean if a field has been set.
func (o *ModQuizStartAttemptRequest) HasForcenew() bool {
	if o != nil && !IsNil(o.Forcenew) {
		return true
	}

	return false
}

// SetForcenew gets a reference to the given bool and assigns it to the Forcenew field.
func (o *ModQuizStartAttemptRequest) SetForcenew(v bool) {
	o.Forcenew = &v
}

// GetPreflightdata returns the Preflightdata field value if set, zero value otherwise.
func (o *ModQuizStartAttemptRequest) GetPreflightdata() []ModQuizGetAttemptDataRequestPreflightdataInner {
	if o == nil || IsNil(o.Preflightdata) {
		var ret []ModQuizGetAttemptDataRequestPreflightdataInner
		return ret
	}
	return o.Preflightdata
}

// GetPreflightdataOk returns a tuple with the Preflightdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizStartAttemptRequest) GetPreflightdataOk() ([]ModQuizGetAttemptDataRequestPreflightdataInner, bool) {
	if o == nil || IsNil(o.Preflightdata) {
		return nil, false
	}
	return o.Preflightdata, true
}

// HasPreflightdata returns a boolean if a field has been set.
func (o *ModQuizStartAttemptRequest) HasPreflightdata() bool {
	if o != nil && !IsNil(o.Preflightdata) {
		return true
	}

	return false
}

// SetPreflightdata gets a reference to the given []ModQuizGetAttemptDataRequestPreflightdataInner and assigns it to the Preflightdata field.
func (o *ModQuizStartAttemptRequest) SetPreflightdata(v []ModQuizGetAttemptDataRequestPreflightdataInner) {
	o.Preflightdata = v
}

// GetQuizid returns the Quizid field value
func (o *ModQuizStartAttemptRequest) GetQuizid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quizid
}

// GetQuizidOk returns a tuple with the Quizid field value
// and a boolean to check if the value has been set.
func (o *ModQuizStartAttemptRequest) GetQuizidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quizid, true
}

// SetQuizid sets field value
func (o *ModQuizStartAttemptRequest) SetQuizid(v int32) {
	o.Quizid = v
}

func (o ModQuizStartAttemptRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModQuizStartAttemptRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Forcenew) {
		toSerialize["forcenew"] = o.Forcenew
	}
	if !IsNil(o.Preflightdata) {
		toSerialize["preflightdata"] = o.Preflightdata
	}
	toSerialize["quizid"] = o.Quizid
	return toSerialize, nil
}

func (o *ModQuizStartAttemptRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quizid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModQuizStartAttemptRequest := _ModQuizStartAttemptRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModQuizStartAttemptRequest)

	if err != nil {
		return err
	}

	*o = ModQuizStartAttemptRequest(varModQuizStartAttemptRequest)

	return err
}

type NullableModQuizStartAttemptRequest struct {
	value *ModQuizStartAttemptRequest
	isSet bool
}

func (v NullableModQuizStartAttemptRequest) Get() *ModQuizStartAttemptRequest {
	return v.value
}

func (v *NullableModQuizStartAttemptRequest) Set(val *ModQuizStartAttemptRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModQuizStartAttemptRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModQuizStartAttemptRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModQuizStartAttemptRequest(val *ModQuizStartAttemptRequest) *NullableModQuizStartAttemptRequest {
	return &NullableModQuizStartAttemptRequest{value: val, isSet: true}
}

func (v NullableModQuizStartAttemptRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModQuizStartAttemptRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


