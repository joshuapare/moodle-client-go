/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreGetFragment200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreGetFragment200Response{}

// CoreGetFragment200Response struct for CoreGetFragment200Response
type CoreGetFragment200Response struct {
	// HTML fragment.
	Html string `json:"html"`
	// JavaScript fragment
	Javascript string `json:"javascript"`
}

type _CoreGetFragment200Response CoreGetFragment200Response

// NewCoreGetFragment200Response instantiates a new CoreGetFragment200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreGetFragment200Response(html string, javascript string) *CoreGetFragment200Response {
	this := CoreGetFragment200Response{}
	this.Html = html
	this.Javascript = javascript
	return &this
}

// NewCoreGetFragment200ResponseWithDefaults instantiates a new CoreGetFragment200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreGetFragment200ResponseWithDefaults() *CoreGetFragment200Response {
	this := CoreGetFragment200Response{}
	var html string = "null"
	this.Html = html
	return &this
}

// GetHtml returns the Html field value
func (o *CoreGetFragment200Response) GetHtml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Html
}

// GetHtmlOk returns a tuple with the Html field value
// and a boolean to check if the value has been set.
func (o *CoreGetFragment200Response) GetHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Html, true
}

// SetHtml sets field value
func (o *CoreGetFragment200Response) SetHtml(v string) {
	o.Html = v
}

// GetJavascript returns the Javascript field value
func (o *CoreGetFragment200Response) GetJavascript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Javascript
}

// GetJavascriptOk returns a tuple with the Javascript field value
// and a boolean to check if the value has been set.
func (o *CoreGetFragment200Response) GetJavascriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Javascript, true
}

// SetJavascript sets field value
func (o *CoreGetFragment200Response) SetJavascript(v string) {
	o.Javascript = v
}

func (o CoreGetFragment200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreGetFragment200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["html"] = o.Html
	toSerialize["javascript"] = o.Javascript
	return toSerialize, nil
}

func (o *CoreGetFragment200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"html",
		"javascript",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreGetFragment200Response := _CoreGetFragment200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreGetFragment200Response)

	if err != nil {
		return err
	}

	*o = CoreGetFragment200Response(varCoreGetFragment200Response)

	return err
}

type NullableCoreGetFragment200Response struct {
	value *CoreGetFragment200Response
	isSet bool
}

func (v NullableCoreGetFragment200Response) Get() *CoreGetFragment200Response {
	return v.value
}

func (v *NullableCoreGetFragment200Response) Set(val *CoreGetFragment200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreGetFragment200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreGetFragment200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreGetFragment200Response(val *CoreGetFragment200Response) *NullableCoreGetFragment200Response {
	return &NullableCoreGetFragment200Response{value: val, isSet: true}
}

func (v NullableCoreGetFragment200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreGetFragment200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


