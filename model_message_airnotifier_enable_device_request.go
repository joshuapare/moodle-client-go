/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageAirnotifierEnableDeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageAirnotifierEnableDeviceRequest{}

// MessageAirnotifierEnableDeviceRequest struct for MessageAirnotifierEnableDeviceRequest
type MessageAirnotifierEnableDeviceRequest struct {
	// The device id
	Deviceid int32 `json:"deviceid"`
	// True for enable the device, false otherwise
	Enable bool `json:"enable"`
}

type _MessageAirnotifierEnableDeviceRequest MessageAirnotifierEnableDeviceRequest

// NewMessageAirnotifierEnableDeviceRequest instantiates a new MessageAirnotifierEnableDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageAirnotifierEnableDeviceRequest(deviceid int32, enable bool) *MessageAirnotifierEnableDeviceRequest {
	this := MessageAirnotifierEnableDeviceRequest{}
	this.Deviceid = deviceid
	this.Enable = enable
	return &this
}

// NewMessageAirnotifierEnableDeviceRequestWithDefaults instantiates a new MessageAirnotifierEnableDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageAirnotifierEnableDeviceRequestWithDefaults() *MessageAirnotifierEnableDeviceRequest {
	this := MessageAirnotifierEnableDeviceRequest{}
	var deviceid int32 = null
	this.Deviceid = deviceid
	var enable bool = null
	this.Enable = enable
	return &this
}

// GetDeviceid returns the Deviceid field value
func (o *MessageAirnotifierEnableDeviceRequest) GetDeviceid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Deviceid
}

// GetDeviceidOk returns a tuple with the Deviceid field value
// and a boolean to check if the value has been set.
func (o *MessageAirnotifierEnableDeviceRequest) GetDeviceidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deviceid, true
}

// SetDeviceid sets field value
func (o *MessageAirnotifierEnableDeviceRequest) SetDeviceid(v int32) {
	o.Deviceid = v
}

// GetEnable returns the Enable field value
func (o *MessageAirnotifierEnableDeviceRequest) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *MessageAirnotifierEnableDeviceRequest) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *MessageAirnotifierEnableDeviceRequest) SetEnable(v bool) {
	o.Enable = v
}

func (o MessageAirnotifierEnableDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageAirnotifierEnableDeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceid"] = o.Deviceid
	toSerialize["enable"] = o.Enable
	return toSerialize, nil
}

func (o *MessageAirnotifierEnableDeviceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceid",
		"enable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageAirnotifierEnableDeviceRequest := _MessageAirnotifierEnableDeviceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageAirnotifierEnableDeviceRequest)

	if err != nil {
		return err
	}

	*o = MessageAirnotifierEnableDeviceRequest(varMessageAirnotifierEnableDeviceRequest)

	return err
}

type NullableMessageAirnotifierEnableDeviceRequest struct {
	value *MessageAirnotifierEnableDeviceRequest
	isSet bool
}

func (v NullableMessageAirnotifierEnableDeviceRequest) Get() *MessageAirnotifierEnableDeviceRequest {
	return v.value
}

func (v *NullableMessageAirnotifierEnableDeviceRequest) Set(val *MessageAirnotifierEnableDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAirnotifierEnableDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAirnotifierEnableDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAirnotifierEnableDeviceRequest(val *MessageAirnotifierEnableDeviceRequest) *NullableMessageAirnotifierEnableDeviceRequest {
	return &NullableMessageAirnotifierEnableDeviceRequest{value: val, isSet: true}
}

func (v NullableMessageAirnotifierEnableDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAirnotifierEnableDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


