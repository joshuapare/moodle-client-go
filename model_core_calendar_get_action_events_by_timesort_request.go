/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreCalendarGetActionEventsByTimesortRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetActionEventsByTimesortRequest{}

// CoreCalendarGetActionEventsByTimesortRequest struct for CoreCalendarGetActionEventsByTimesortRequest
type CoreCalendarGetActionEventsByTimesortRequest struct {
	// The last seen event id
	Aftereventid *int32 `json:"aftereventid,omitempty"`
	// Limit number
	Limitnum *int32 `json:"limitnum,omitempty"`
	// Limit the events to courses the user is not suspended in
	Limittononsuspendedevents *bool `json:"limittononsuspendedevents,omitempty"`
	// The value a user wishes to search against
	Searchvalue *string `json:"searchvalue,omitempty"`
	// Time sort from
	Timesortfrom *int32 `json:"timesortfrom,omitempty"`
	// Time sort to
	Timesortto *int32 `json:"timesortto,omitempty"`
	// The user id
	Userid *int32 `json:"userid,omitempty"`
}

// NewCoreCalendarGetActionEventsByTimesortRequest instantiates a new CoreCalendarGetActionEventsByTimesortRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetActionEventsByTimesortRequest() *CoreCalendarGetActionEventsByTimesortRequest {
	this := CoreCalendarGetActionEventsByTimesortRequest{}
	var aftereventid int32 = 0
	this.Aftereventid = &aftereventid
	var limitnum int32 = 20
	this.Limitnum = &limitnum
	var limittononsuspendedevents bool = false
	this.Limittononsuspendedevents = &limittononsuspendedevents
	var timesortfrom int32 = 0
	this.Timesortfrom = &timesortfrom
	var userid int32 = null
	this.Userid = &userid
	return &this
}

// NewCoreCalendarGetActionEventsByTimesortRequestWithDefaults instantiates a new CoreCalendarGetActionEventsByTimesortRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetActionEventsByTimesortRequestWithDefaults() *CoreCalendarGetActionEventsByTimesortRequest {
	this := CoreCalendarGetActionEventsByTimesortRequest{}
	var aftereventid int32 = 0
	this.Aftereventid = &aftereventid
	var limitnum int32 = 20
	this.Limitnum = &limitnum
	var limittononsuspendedevents bool = false
	this.Limittononsuspendedevents = &limittononsuspendedevents
	var timesortfrom int32 = 0
	this.Timesortfrom = &timesortfrom
	var userid int32 = null
	this.Userid = &userid
	return &this
}

// GetAftereventid returns the Aftereventid field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetAftereventid() int32 {
	if o == nil || IsNil(o.Aftereventid) {
		var ret int32
		return ret
	}
	return *o.Aftereventid
}

// GetAftereventidOk returns a tuple with the Aftereventid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetAftereventidOk() (*int32, bool) {
	if o == nil || IsNil(o.Aftereventid) {
		return nil, false
	}
	return o.Aftereventid, true
}

// HasAftereventid returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) HasAftereventid() bool {
	if o != nil && !IsNil(o.Aftereventid) {
		return true
	}

	return false
}

// SetAftereventid gets a reference to the given int32 and assigns it to the Aftereventid field.
func (o *CoreCalendarGetActionEventsByTimesortRequest) SetAftereventid(v int32) {
	o.Aftereventid = &v
}

// GetLimitnum returns the Limitnum field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetLimitnum() int32 {
	if o == nil || IsNil(o.Limitnum) {
		var ret int32
		return ret
	}
	return *o.Limitnum
}

// GetLimitnumOk returns a tuple with the Limitnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetLimitnumOk() (*int32, bool) {
	if o == nil || IsNil(o.Limitnum) {
		return nil, false
	}
	return o.Limitnum, true
}

// HasLimitnum returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) HasLimitnum() bool {
	if o != nil && !IsNil(o.Limitnum) {
		return true
	}

	return false
}

// SetLimitnum gets a reference to the given int32 and assigns it to the Limitnum field.
func (o *CoreCalendarGetActionEventsByTimesortRequest) SetLimitnum(v int32) {
	o.Limitnum = &v
}

// GetLimittononsuspendedevents returns the Limittononsuspendedevents field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetLimittononsuspendedevents() bool {
	if o == nil || IsNil(o.Limittononsuspendedevents) {
		var ret bool
		return ret
	}
	return *o.Limittononsuspendedevents
}

// GetLimittononsuspendedeventsOk returns a tuple with the Limittononsuspendedevents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetLimittononsuspendedeventsOk() (*bool, bool) {
	if o == nil || IsNil(o.Limittononsuspendedevents) {
		return nil, false
	}
	return o.Limittononsuspendedevents, true
}

// HasLimittononsuspendedevents returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) HasLimittononsuspendedevents() bool {
	if o != nil && !IsNil(o.Limittononsuspendedevents) {
		return true
	}

	return false
}

// SetLimittononsuspendedevents gets a reference to the given bool and assigns it to the Limittononsuspendedevents field.
func (o *CoreCalendarGetActionEventsByTimesortRequest) SetLimittononsuspendedevents(v bool) {
	o.Limittononsuspendedevents = &v
}

// GetSearchvalue returns the Searchvalue field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetSearchvalue() string {
	if o == nil || IsNil(o.Searchvalue) {
		var ret string
		return ret
	}
	return *o.Searchvalue
}

// GetSearchvalueOk returns a tuple with the Searchvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetSearchvalueOk() (*string, bool) {
	if o == nil || IsNil(o.Searchvalue) {
		return nil, false
	}
	return o.Searchvalue, true
}

// HasSearchvalue returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) HasSearchvalue() bool {
	if o != nil && !IsNil(o.Searchvalue) {
		return true
	}

	return false
}

// SetSearchvalue gets a reference to the given string and assigns it to the Searchvalue field.
func (o *CoreCalendarGetActionEventsByTimesortRequest) SetSearchvalue(v string) {
	o.Searchvalue = &v
}

// GetTimesortfrom returns the Timesortfrom field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetTimesortfrom() int32 {
	if o == nil || IsNil(o.Timesortfrom) {
		var ret int32
		return ret
	}
	return *o.Timesortfrom
}

// GetTimesortfromOk returns a tuple with the Timesortfrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetTimesortfromOk() (*int32, bool) {
	if o == nil || IsNil(o.Timesortfrom) {
		return nil, false
	}
	return o.Timesortfrom, true
}

// HasTimesortfrom returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) HasTimesortfrom() bool {
	if o != nil && !IsNil(o.Timesortfrom) {
		return true
	}

	return false
}

// SetTimesortfrom gets a reference to the given int32 and assigns it to the Timesortfrom field.
func (o *CoreCalendarGetActionEventsByTimesortRequest) SetTimesortfrom(v int32) {
	o.Timesortfrom = &v
}

// GetTimesortto returns the Timesortto field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetTimesortto() int32 {
	if o == nil || IsNil(o.Timesortto) {
		var ret int32
		return ret
	}
	return *o.Timesortto
}

// GetTimesorttoOk returns a tuple with the Timesortto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetTimesorttoOk() (*int32, bool) {
	if o == nil || IsNil(o.Timesortto) {
		return nil, false
	}
	return o.Timesortto, true
}

// HasTimesortto returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) HasTimesortto() bool {
	if o != nil && !IsNil(o.Timesortto) {
		return true
	}

	return false
}

// SetTimesortto gets a reference to the given int32 and assigns it to the Timesortto field.
func (o *CoreCalendarGetActionEventsByTimesortRequest) SetTimesortto(v int32) {
	o.Timesortto = &v
}

// GetUserid returns the Userid field value if set, zero value otherwise.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetUserid() int32 {
	if o == nil || IsNil(o.Userid) {
		var ret int32
		return ret
	}
	return *o.Userid
}

// GetUseridOk returns a tuple with the Userid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) GetUseridOk() (*int32, bool) {
	if o == nil || IsNil(o.Userid) {
		return nil, false
	}
	return o.Userid, true
}

// HasUserid returns a boolean if a field has been set.
func (o *CoreCalendarGetActionEventsByTimesortRequest) HasUserid() bool {
	if o != nil && !IsNil(o.Userid) {
		return true
	}

	return false
}

// SetUserid gets a reference to the given int32 and assigns it to the Userid field.
func (o *CoreCalendarGetActionEventsByTimesortRequest) SetUserid(v int32) {
	o.Userid = &v
}

func (o CoreCalendarGetActionEventsByTimesortRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetActionEventsByTimesortRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aftereventid) {
		toSerialize["aftereventid"] = o.Aftereventid
	}
	if !IsNil(o.Limitnum) {
		toSerialize["limitnum"] = o.Limitnum
	}
	if !IsNil(o.Limittononsuspendedevents) {
		toSerialize["limittononsuspendedevents"] = o.Limittononsuspendedevents
	}
	if !IsNil(o.Searchvalue) {
		toSerialize["searchvalue"] = o.Searchvalue
	}
	if !IsNil(o.Timesortfrom) {
		toSerialize["timesortfrom"] = o.Timesortfrom
	}
	if !IsNil(o.Timesortto) {
		toSerialize["timesortto"] = o.Timesortto
	}
	if !IsNil(o.Userid) {
		toSerialize["userid"] = o.Userid
	}
	return toSerialize, nil
}

type NullableCoreCalendarGetActionEventsByTimesortRequest struct {
	value *CoreCalendarGetActionEventsByTimesortRequest
	isSet bool
}

func (v NullableCoreCalendarGetActionEventsByTimesortRequest) Get() *CoreCalendarGetActionEventsByTimesortRequest {
	return v.value
}

func (v *NullableCoreCalendarGetActionEventsByTimesortRequest) Set(val *CoreCalendarGetActionEventsByTimesortRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetActionEventsByTimesortRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetActionEventsByTimesortRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetActionEventsByTimesortRequest(val *CoreCalendarGetActionEventsByTimesortRequest) *NullableCoreCalendarGetActionEventsByTimesortRequest {
	return &NullableCoreCalendarGetActionEventsByTimesortRequest{value: val, isSet: true}
}

func (v NullableCoreCalendarGetActionEventsByTimesortRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetActionEventsByTimesortRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


