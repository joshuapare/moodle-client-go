/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreOutputLoadTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreOutputLoadTemplateRequest{}

// CoreOutputLoadTemplateRequest struct for CoreOutputLoadTemplateRequest
type CoreOutputLoadTemplateRequest struct {
	// component containing the template
	Component string `json:"component"`
	// Include comments or not
	Includecomments *bool `json:"includecomments,omitempty"`
	// name of the template
	Template string `json:"template"`
	// The current theme.
	Themename string `json:"themename"`
}

type _CoreOutputLoadTemplateRequest CoreOutputLoadTemplateRequest

// NewCoreOutputLoadTemplateRequest instantiates a new CoreOutputLoadTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreOutputLoadTemplateRequest(component string, template string, themename string) *CoreOutputLoadTemplateRequest {
	this := CoreOutputLoadTemplateRequest{}
	this.Component = component
	var includecomments bool = false
	this.Includecomments = &includecomments
	this.Template = template
	this.Themename = themename
	return &this
}

// NewCoreOutputLoadTemplateRequestWithDefaults instantiates a new CoreOutputLoadTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreOutputLoadTemplateRequestWithDefaults() *CoreOutputLoadTemplateRequest {
	this := CoreOutputLoadTemplateRequest{}
	var component string = "null"
	this.Component = component
	var includecomments bool = false
	this.Includecomments = &includecomments
	var template string = "null"
	this.Template = template
	var themename string = "null"
	this.Themename = themename
	return &this
}

// GetComponent returns the Component field value
func (o *CoreOutputLoadTemplateRequest) GetComponent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *CoreOutputLoadTemplateRequest) GetComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *CoreOutputLoadTemplateRequest) SetComponent(v string) {
	o.Component = v
}

// GetIncludecomments returns the Includecomments field value if set, zero value otherwise.
func (o *CoreOutputLoadTemplateRequest) GetIncludecomments() bool {
	if o == nil || IsNil(o.Includecomments) {
		var ret bool
		return ret
	}
	return *o.Includecomments
}

// GetIncludecommentsOk returns a tuple with the Includecomments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreOutputLoadTemplateRequest) GetIncludecommentsOk() (*bool, bool) {
	if o == nil || IsNil(o.Includecomments) {
		return nil, false
	}
	return o.Includecomments, true
}

// HasIncludecomments returns a boolean if a field has been set.
func (o *CoreOutputLoadTemplateRequest) HasIncludecomments() bool {
	if o != nil && !IsNil(o.Includecomments) {
		return true
	}

	return false
}

// SetIncludecomments gets a reference to the given bool and assigns it to the Includecomments field.
func (o *CoreOutputLoadTemplateRequest) SetIncludecomments(v bool) {
	o.Includecomments = &v
}

// GetTemplate returns the Template field value
func (o *CoreOutputLoadTemplateRequest) GetTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *CoreOutputLoadTemplateRequest) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *CoreOutputLoadTemplateRequest) SetTemplate(v string) {
	o.Template = v
}

// GetThemename returns the Themename field value
func (o *CoreOutputLoadTemplateRequest) GetThemename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Themename
}

// GetThemenameOk returns a tuple with the Themename field value
// and a boolean to check if the value has been set.
func (o *CoreOutputLoadTemplateRequest) GetThemenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Themename, true
}

// SetThemename sets field value
func (o *CoreOutputLoadTemplateRequest) SetThemename(v string) {
	o.Themename = v
}

func (o CoreOutputLoadTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreOutputLoadTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["component"] = o.Component
	if !IsNil(o.Includecomments) {
		toSerialize["includecomments"] = o.Includecomments
	}
	toSerialize["template"] = o.Template
	toSerialize["themename"] = o.Themename
	return toSerialize, nil
}

func (o *CoreOutputLoadTemplateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"component",
		"template",
		"themename",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreOutputLoadTemplateRequest := _CoreOutputLoadTemplateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreOutputLoadTemplateRequest)

	if err != nil {
		return err
	}

	*o = CoreOutputLoadTemplateRequest(varCoreOutputLoadTemplateRequest)

	return err
}

type NullableCoreOutputLoadTemplateRequest struct {
	value *CoreOutputLoadTemplateRequest
	isSet bool
}

func (v NullableCoreOutputLoadTemplateRequest) Get() *CoreOutputLoadTemplateRequest {
	return v.value
}

func (v *NullableCoreOutputLoadTemplateRequest) Set(val *CoreOutputLoadTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreOutputLoadTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreOutputLoadTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreOutputLoadTemplateRequest(val *CoreOutputLoadTemplateRequest) *NullableCoreOutputLoadTemplateRequest {
	return &NullableCoreOutputLoadTemplateRequest{value: val, isSet: true}
}

func (v NullableCoreOutputLoadTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreOutputLoadTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


