/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModForumAddDiscussionPost200ResponsePostCapabilities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModForumAddDiscussionPost200ResponsePostCapabilities{}

// ModForumAddDiscussionPost200ResponsePostCapabilities struct for ModForumAddDiscussionPost200ResponsePostCapabilities
type ModForumAddDiscussionPost200ResponsePostCapabilities struct {
	// Whether the user can post a private reply
	Canreplyprivately bool `json:"canreplyprivately"`
	// Whether the user can control the read status of the post
	Controlreadstatus bool `json:"controlreadstatus"`
	// Whether the user can delete the post
	Delete bool `json:"delete"`
	// Whether the user can edit the post
	Edit bool `json:"edit"`
	// Whether the user can export the post
	Export bool `json:"export"`
	// Whether the user can reply to the post
	Reply bool `json:"reply"`
	// Whether the user can self enrol into the course
	Selfenrol bool `json:"selfenrol"`
	// Whether the user can split the post
	Split bool `json:"split"`
	// Whether the user can view the post
	View bool `json:"view"`
}

type _ModForumAddDiscussionPost200ResponsePostCapabilities ModForumAddDiscussionPost200ResponsePostCapabilities

// NewModForumAddDiscussionPost200ResponsePostCapabilities instantiates a new ModForumAddDiscussionPost200ResponsePostCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModForumAddDiscussionPost200ResponsePostCapabilities(canreplyprivately bool, controlreadstatus bool, delete bool, edit bool, export bool, reply bool, selfenrol bool, split bool, view bool) *ModForumAddDiscussionPost200ResponsePostCapabilities {
	this := ModForumAddDiscussionPost200ResponsePostCapabilities{}
	this.Canreplyprivately = canreplyprivately
	this.Controlreadstatus = controlreadstatus
	this.Delete = delete
	this.Edit = edit
	this.Export = export
	this.Reply = reply
	this.Selfenrol = selfenrol
	this.Split = split
	this.View = view
	return &this
}

// NewModForumAddDiscussionPost200ResponsePostCapabilitiesWithDefaults instantiates a new ModForumAddDiscussionPost200ResponsePostCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModForumAddDiscussionPost200ResponsePostCapabilitiesWithDefaults() *ModForumAddDiscussionPost200ResponsePostCapabilities {
	this := ModForumAddDiscussionPost200ResponsePostCapabilities{}
	var canreplyprivately bool = null
	this.Canreplyprivately = canreplyprivately
	var controlreadstatus bool = null
	this.Controlreadstatus = controlreadstatus
	var delete bool = null
	this.Delete = delete
	var edit bool = null
	this.Edit = edit
	var export bool = null
	this.Export = export
	var reply bool = null
	this.Reply = reply
	var selfenrol bool = null
	this.Selfenrol = selfenrol
	var split bool = null
	this.Split = split
	var view bool = null
	this.View = view
	return &this
}

// GetCanreplyprivately returns the Canreplyprivately field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetCanreplyprivately() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Canreplyprivately
}

// GetCanreplyprivatelyOk returns a tuple with the Canreplyprivately field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetCanreplyprivatelyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Canreplyprivately, true
}

// SetCanreplyprivately sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetCanreplyprivately(v bool) {
	o.Canreplyprivately = v
}

// GetControlreadstatus returns the Controlreadstatus field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetControlreadstatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Controlreadstatus
}

// GetControlreadstatusOk returns a tuple with the Controlreadstatus field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetControlreadstatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Controlreadstatus, true
}

// SetControlreadstatus sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetControlreadstatus(v bool) {
	o.Controlreadstatus = v
}

// GetDelete returns the Delete field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delete, true
}

// SetDelete sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetDelete(v bool) {
	o.Delete = v
}

// GetEdit returns the Edit field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetEdit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Edit
}

// GetEditOk returns a tuple with the Edit field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetEditOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Edit, true
}

// SetEdit sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetEdit(v bool) {
	o.Edit = v
}

// GetExport returns the Export field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetExport() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Export
}

// GetExportOk returns a tuple with the Export field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetExportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Export, true
}

// SetExport sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetExport(v bool) {
	o.Export = v
}

// GetReply returns the Reply field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetReply() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Reply
}

// GetReplyOk returns a tuple with the Reply field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetReplyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reply, true
}

// SetReply sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetReply(v bool) {
	o.Reply = v
}

// GetSelfenrol returns the Selfenrol field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetSelfenrol() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Selfenrol
}

// GetSelfenrolOk returns a tuple with the Selfenrol field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetSelfenrolOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selfenrol, true
}

// SetSelfenrol sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetSelfenrol(v bool) {
	o.Selfenrol = v
}

// GetSplit returns the Split field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetSplit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Split
}

// GetSplitOk returns a tuple with the Split field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetSplitOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Split, true
}

// SetSplit sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetSplit(v bool) {
	o.Split = v
}

// GetView returns the View field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetView() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.View
}

// GetViewOk returns a tuple with the View field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) GetViewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.View, true
}

// SetView sets field value
func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) SetView(v bool) {
	o.View = v
}

func (o ModForumAddDiscussionPost200ResponsePostCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModForumAddDiscussionPost200ResponsePostCapabilities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["canreplyprivately"] = o.Canreplyprivately
	toSerialize["controlreadstatus"] = o.Controlreadstatus
	toSerialize["delete"] = o.Delete
	toSerialize["edit"] = o.Edit
	toSerialize["export"] = o.Export
	toSerialize["reply"] = o.Reply
	toSerialize["selfenrol"] = o.Selfenrol
	toSerialize["split"] = o.Split
	toSerialize["view"] = o.View
	return toSerialize, nil
}

func (o *ModForumAddDiscussionPost200ResponsePostCapabilities) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"canreplyprivately",
		"controlreadstatus",
		"delete",
		"edit",
		"export",
		"reply",
		"selfenrol",
		"split",
		"view",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModForumAddDiscussionPost200ResponsePostCapabilities := _ModForumAddDiscussionPost200ResponsePostCapabilities{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModForumAddDiscussionPost200ResponsePostCapabilities)

	if err != nil {
		return err
	}

	*o = ModForumAddDiscussionPost200ResponsePostCapabilities(varModForumAddDiscussionPost200ResponsePostCapabilities)

	return err
}

type NullableModForumAddDiscussionPost200ResponsePostCapabilities struct {
	value *ModForumAddDiscussionPost200ResponsePostCapabilities
	isSet bool
}

func (v NullableModForumAddDiscussionPost200ResponsePostCapabilities) Get() *ModForumAddDiscussionPost200ResponsePostCapabilities {
	return v.value
}

func (v *NullableModForumAddDiscussionPost200ResponsePostCapabilities) Set(val *ModForumAddDiscussionPost200ResponsePostCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableModForumAddDiscussionPost200ResponsePostCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableModForumAddDiscussionPost200ResponsePostCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModForumAddDiscussionPost200ResponsePostCapabilities(val *ModForumAddDiscussionPost200ResponsePostCapabilities) *NullableModForumAddDiscussionPost200ResponsePostCapabilities {
	return &NullableModForumAddDiscussionPost200ResponsePostCapabilities{value: val, isSet: true}
}

func (v NullableModForumAddDiscussionPost200ResponsePostCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModForumAddDiscussionPost200ResponsePostCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


