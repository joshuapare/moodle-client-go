/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreMoodlenetSendActivityRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreMoodlenetSendActivityRequest{}

// CoreMoodlenetSendActivityRequest struct for CoreMoodlenetSendActivityRequest
type CoreMoodlenetSendActivityRequest struct {
	// Course module ID
	Cmid int32 `json:"cmid"`
	// OAuth 2 issuer ID
	Issuerid int32 `json:"issuerid"`
	// Share format
	Shareformat int32 `json:"shareformat"`
}

type _CoreMoodlenetSendActivityRequest CoreMoodlenetSendActivityRequest

// NewCoreMoodlenetSendActivityRequest instantiates a new CoreMoodlenetSendActivityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreMoodlenetSendActivityRequest(cmid int32, issuerid int32, shareformat int32) *CoreMoodlenetSendActivityRequest {
	this := CoreMoodlenetSendActivityRequest{}
	this.Cmid = cmid
	this.Issuerid = issuerid
	this.Shareformat = shareformat
	return &this
}

// NewCoreMoodlenetSendActivityRequestWithDefaults instantiates a new CoreMoodlenetSendActivityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreMoodlenetSendActivityRequestWithDefaults() *CoreMoodlenetSendActivityRequest {
	this := CoreMoodlenetSendActivityRequest{}
	var cmid int32 = null
	this.Cmid = cmid
	var shareformat int32 = null
	this.Shareformat = shareformat
	return &this
}

// GetCmid returns the Cmid field value
func (o *CoreMoodlenetSendActivityRequest) GetCmid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cmid
}

// GetCmidOk returns a tuple with the Cmid field value
// and a boolean to check if the value has been set.
func (o *CoreMoodlenetSendActivityRequest) GetCmidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cmid, true
}

// SetCmid sets field value
func (o *CoreMoodlenetSendActivityRequest) SetCmid(v int32) {
	o.Cmid = v
}

// GetIssuerid returns the Issuerid field value
func (o *CoreMoodlenetSendActivityRequest) GetIssuerid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Issuerid
}

// GetIssueridOk returns a tuple with the Issuerid field value
// and a boolean to check if the value has been set.
func (o *CoreMoodlenetSendActivityRequest) GetIssueridOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuerid, true
}

// SetIssuerid sets field value
func (o *CoreMoodlenetSendActivityRequest) SetIssuerid(v int32) {
	o.Issuerid = v
}

// GetShareformat returns the Shareformat field value
func (o *CoreMoodlenetSendActivityRequest) GetShareformat() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Shareformat
}

// GetShareformatOk returns a tuple with the Shareformat field value
// and a boolean to check if the value has been set.
func (o *CoreMoodlenetSendActivityRequest) GetShareformatOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shareformat, true
}

// SetShareformat sets field value
func (o *CoreMoodlenetSendActivityRequest) SetShareformat(v int32) {
	o.Shareformat = v
}

func (o CoreMoodlenetSendActivityRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreMoodlenetSendActivityRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cmid"] = o.Cmid
	toSerialize["issuerid"] = o.Issuerid
	toSerialize["shareformat"] = o.Shareformat
	return toSerialize, nil
}

func (o *CoreMoodlenetSendActivityRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cmid",
		"issuerid",
		"shareformat",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreMoodlenetSendActivityRequest := _CoreMoodlenetSendActivityRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreMoodlenetSendActivityRequest)

	if err != nil {
		return err
	}

	*o = CoreMoodlenetSendActivityRequest(varCoreMoodlenetSendActivityRequest)

	return err
}

type NullableCoreMoodlenetSendActivityRequest struct {
	value *CoreMoodlenetSendActivityRequest
	isSet bool
}

func (v NullableCoreMoodlenetSendActivityRequest) Get() *CoreMoodlenetSendActivityRequest {
	return v.value
}

func (v *NullableCoreMoodlenetSendActivityRequest) Set(val *CoreMoodlenetSendActivityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreMoodlenetSendActivityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreMoodlenetSendActivityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreMoodlenetSendActivityRequest(val *CoreMoodlenetSendActivityRequest) *NullableCoreMoodlenetSendActivityRequest {
	return &NullableCoreMoodlenetSendActivityRequest{value: val, isSet: true}
}

func (v NullableCoreMoodlenetSendActivityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreMoodlenetSendActivityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


