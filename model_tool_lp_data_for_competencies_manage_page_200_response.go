/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolLpDataForCompetenciesManagePage200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolLpDataForCompetenciesManagePage200Response{}

// ToolLpDataForCompetenciesManagePage200Response struct for ToolLpDataForCompetenciesManagePage200Response
type ToolLpDataForCompetenciesManagePage200Response struct {
	// True if this user has permission to manage competency frameworks
	Canmanage bool `json:"canmanage"`
	Framework CoreCompetencyDuplicateCompetencyFramework200Response `json:"framework"`
	// Context id for the framework
	Pagecontextid int32 `json:"pagecontextid"`
	// Plugin base url
	Pluginbaseurl string `json:"pluginbaseurl"`
	// JSON encoded data for rules
	Rulesmodules string `json:"rulesmodules"`
	// Current search string
	Search string `json:"search"`
}

type _ToolLpDataForCompetenciesManagePage200Response ToolLpDataForCompetenciesManagePage200Response

// NewToolLpDataForCompetenciesManagePage200Response instantiates a new ToolLpDataForCompetenciesManagePage200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolLpDataForCompetenciesManagePage200Response(canmanage bool, framework CoreCompetencyDuplicateCompetencyFramework200Response, pagecontextid int32, pluginbaseurl string, rulesmodules string, search string) *ToolLpDataForCompetenciesManagePage200Response {
	this := ToolLpDataForCompetenciesManagePage200Response{}
	this.Canmanage = canmanage
	this.Framework = framework
	this.Pagecontextid = pagecontextid
	this.Pluginbaseurl = pluginbaseurl
	this.Rulesmodules = rulesmodules
	this.Search = search
	return &this
}

// NewToolLpDataForCompetenciesManagePage200ResponseWithDefaults instantiates a new ToolLpDataForCompetenciesManagePage200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolLpDataForCompetenciesManagePage200ResponseWithDefaults() *ToolLpDataForCompetenciesManagePage200Response {
	this := ToolLpDataForCompetenciesManagePage200Response{}
	var canmanage bool = null
	this.Canmanage = canmanage
	var pagecontextid int32 = null
	this.Pagecontextid = pagecontextid
	var pluginbaseurl string = "null"
	this.Pluginbaseurl = pluginbaseurl
	var rulesmodules string = "null"
	this.Rulesmodules = rulesmodules
	var search string = "null"
	this.Search = search
	return &this
}

// GetCanmanage returns the Canmanage field value
func (o *ToolLpDataForCompetenciesManagePage200Response) GetCanmanage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Canmanage
}

// GetCanmanageOk returns a tuple with the Canmanage field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForCompetenciesManagePage200Response) GetCanmanageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Canmanage, true
}

// SetCanmanage sets field value
func (o *ToolLpDataForCompetenciesManagePage200Response) SetCanmanage(v bool) {
	o.Canmanage = v
}

// GetFramework returns the Framework field value
func (o *ToolLpDataForCompetenciesManagePage200Response) GetFramework() CoreCompetencyDuplicateCompetencyFramework200Response {
	if o == nil {
		var ret CoreCompetencyDuplicateCompetencyFramework200Response
		return ret
	}

	return o.Framework
}

// GetFrameworkOk returns a tuple with the Framework field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForCompetenciesManagePage200Response) GetFrameworkOk() (*CoreCompetencyDuplicateCompetencyFramework200Response, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Framework, true
}

// SetFramework sets field value
func (o *ToolLpDataForCompetenciesManagePage200Response) SetFramework(v CoreCompetencyDuplicateCompetencyFramework200Response) {
	o.Framework = v
}

// GetPagecontextid returns the Pagecontextid field value
func (o *ToolLpDataForCompetenciesManagePage200Response) GetPagecontextid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Pagecontextid
}

// GetPagecontextidOk returns a tuple with the Pagecontextid field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForCompetenciesManagePage200Response) GetPagecontextidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagecontextid, true
}

// SetPagecontextid sets field value
func (o *ToolLpDataForCompetenciesManagePage200Response) SetPagecontextid(v int32) {
	o.Pagecontextid = v
}

// GetPluginbaseurl returns the Pluginbaseurl field value
func (o *ToolLpDataForCompetenciesManagePage200Response) GetPluginbaseurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pluginbaseurl
}

// GetPluginbaseurlOk returns a tuple with the Pluginbaseurl field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForCompetenciesManagePage200Response) GetPluginbaseurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pluginbaseurl, true
}

// SetPluginbaseurl sets field value
func (o *ToolLpDataForCompetenciesManagePage200Response) SetPluginbaseurl(v string) {
	o.Pluginbaseurl = v
}

// GetRulesmodules returns the Rulesmodules field value
func (o *ToolLpDataForCompetenciesManagePage200Response) GetRulesmodules() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rulesmodules
}

// GetRulesmodulesOk returns a tuple with the Rulesmodules field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForCompetenciesManagePage200Response) GetRulesmodulesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rulesmodules, true
}

// SetRulesmodules sets field value
func (o *ToolLpDataForCompetenciesManagePage200Response) SetRulesmodules(v string) {
	o.Rulesmodules = v
}

// GetSearch returns the Search field value
func (o *ToolLpDataForCompetenciesManagePage200Response) GetSearch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Search
}

// GetSearchOk returns a tuple with the Search field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForCompetenciesManagePage200Response) GetSearchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Search, true
}

// SetSearch sets field value
func (o *ToolLpDataForCompetenciesManagePage200Response) SetSearch(v string) {
	o.Search = v
}

func (o ToolLpDataForCompetenciesManagePage200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolLpDataForCompetenciesManagePage200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["canmanage"] = o.Canmanage
	toSerialize["framework"] = o.Framework
	toSerialize["pagecontextid"] = o.Pagecontextid
	toSerialize["pluginbaseurl"] = o.Pluginbaseurl
	toSerialize["rulesmodules"] = o.Rulesmodules
	toSerialize["search"] = o.Search
	return toSerialize, nil
}

func (o *ToolLpDataForCompetenciesManagePage200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"canmanage",
		"framework",
		"pagecontextid",
		"pluginbaseurl",
		"rulesmodules",
		"search",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolLpDataForCompetenciesManagePage200Response := _ToolLpDataForCompetenciesManagePage200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolLpDataForCompetenciesManagePage200Response)

	if err != nil {
		return err
	}

	*o = ToolLpDataForCompetenciesManagePage200Response(varToolLpDataForCompetenciesManagePage200Response)

	return err
}

type NullableToolLpDataForCompetenciesManagePage200Response struct {
	value *ToolLpDataForCompetenciesManagePage200Response
	isSet bool
}

func (v NullableToolLpDataForCompetenciesManagePage200Response) Get() *ToolLpDataForCompetenciesManagePage200Response {
	return v.value
}

func (v *NullableToolLpDataForCompetenciesManagePage200Response) Set(val *ToolLpDataForCompetenciesManagePage200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableToolLpDataForCompetenciesManagePage200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableToolLpDataForCompetenciesManagePage200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolLpDataForCompetenciesManagePage200Response(val *ToolLpDataForCompetenciesManagePage200Response) *NullableToolLpDataForCompetenciesManagePage200Response {
	return &NullableToolLpDataForCompetenciesManagePage200Response{value: val, isSet: true}
}

func (v NullableToolLpDataForCompetenciesManagePage200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolLpDataForCompetenciesManagePage200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


