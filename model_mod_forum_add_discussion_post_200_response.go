/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModForumAddDiscussionPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModForumAddDiscussionPost200Response{}

// ModForumAddDiscussionPost200Response struct for ModForumAddDiscussionPost200Response
type ModForumAddDiscussionPost200Response struct {
	Messages []ModForumAddDiscussionPost200ResponseMessagesInner `json:"messages,omitempty"`
	Post ModForumAddDiscussionPost200ResponsePost `json:"post"`
	// new post id
	Postid int32 `json:"postid"`
	Warnings []AuthEmailSignupUser200ResponseWarningsInner `json:"warnings,omitempty"`
}

type _ModForumAddDiscussionPost200Response ModForumAddDiscussionPost200Response

// NewModForumAddDiscussionPost200Response instantiates a new ModForumAddDiscussionPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModForumAddDiscussionPost200Response(post ModForumAddDiscussionPost200ResponsePost, postid int32) *ModForumAddDiscussionPost200Response {
	this := ModForumAddDiscussionPost200Response{}
	this.Post = post
	this.Postid = postid
	return &this
}

// NewModForumAddDiscussionPost200ResponseWithDefaults instantiates a new ModForumAddDiscussionPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModForumAddDiscussionPost200ResponseWithDefaults() *ModForumAddDiscussionPost200Response {
	this := ModForumAddDiscussionPost200Response{}
	var postid int32 = null
	this.Postid = postid
	return &this
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200Response) GetMessages() []ModForumAddDiscussionPost200ResponseMessagesInner {
	if o == nil || IsNil(o.Messages) {
		var ret []ModForumAddDiscussionPost200ResponseMessagesInner
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200Response) GetMessagesOk() ([]ModForumAddDiscussionPost200ResponseMessagesInner, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200Response) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []ModForumAddDiscussionPost200ResponseMessagesInner and assigns it to the Messages field.
func (o *ModForumAddDiscussionPost200Response) SetMessages(v []ModForumAddDiscussionPost200ResponseMessagesInner) {
	o.Messages = v
}

// GetPost returns the Post field value
func (o *ModForumAddDiscussionPost200Response) GetPost() ModForumAddDiscussionPost200ResponsePost {
	if o == nil {
		var ret ModForumAddDiscussionPost200ResponsePost
		return ret
	}

	return o.Post
}

// GetPostOk returns a tuple with the Post field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200Response) GetPostOk() (*ModForumAddDiscussionPost200ResponsePost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Post, true
}

// SetPost sets field value
func (o *ModForumAddDiscussionPost200Response) SetPost(v ModForumAddDiscussionPost200ResponsePost) {
	o.Post = v
}

// GetPostid returns the Postid field value
func (o *ModForumAddDiscussionPost200Response) GetPostid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Postid
}

// GetPostidOk returns a tuple with the Postid field value
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200Response) GetPostidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Postid, true
}

// SetPostid sets field value
func (o *ModForumAddDiscussionPost200Response) SetPostid(v int32) {
	o.Postid = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ModForumAddDiscussionPost200Response) GetWarnings() []AuthEmailSignupUser200ResponseWarningsInner {
	if o == nil || IsNil(o.Warnings) {
		var ret []AuthEmailSignupUser200ResponseWarningsInner
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModForumAddDiscussionPost200Response) GetWarningsOk() ([]AuthEmailSignupUser200ResponseWarningsInner, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ModForumAddDiscussionPost200Response) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []AuthEmailSignupUser200ResponseWarningsInner and assigns it to the Warnings field.
func (o *ModForumAddDiscussionPost200Response) SetWarnings(v []AuthEmailSignupUser200ResponseWarningsInner) {
	o.Warnings = v
}

func (o ModForumAddDiscussionPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModForumAddDiscussionPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	toSerialize["post"] = o.Post
	toSerialize["postid"] = o.Postid
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *ModForumAddDiscussionPost200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"post",
		"postid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModForumAddDiscussionPost200Response := _ModForumAddDiscussionPost200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModForumAddDiscussionPost200Response)

	if err != nil {
		return err
	}

	*o = ModForumAddDiscussionPost200Response(varModForumAddDiscussionPost200Response)

	return err
}

type NullableModForumAddDiscussionPost200Response struct {
	value *ModForumAddDiscussionPost200Response
	isSet bool
}

func (v NullableModForumAddDiscussionPost200Response) Get() *ModForumAddDiscussionPost200Response {
	return v.value
}

func (v *NullableModForumAddDiscussionPost200Response) Set(val *ModForumAddDiscussionPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableModForumAddDiscussionPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableModForumAddDiscussionPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModForumAddDiscussionPost200Response(val *ModForumAddDiscussionPost200Response) *NullableModForumAddDiscussionPost200Response {
	return &NullableModForumAddDiscussionPost200Response{value: val, isSet: true}
}

func (v NullableModForumAddDiscussionPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModForumAddDiscussionPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


