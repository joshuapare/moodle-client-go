/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuthEmailGetSignupSettings200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthEmailGetSignupSettings200Response{}

// AuthEmailGetSignupSettings200Response struct for AuthEmailGetSignupSettings200Response
type AuthEmailGetSignupSettings200Response struct {
	// Default country
	Country *string `json:"country,omitempty"`
	// Default city
	Defaultcity *string `json:"defaultcity,omitempty"`
	Namefields []map[string]interface{} `json:"namefields"`
	// Password policy
	Passwordpolicy *string `json:"passwordpolicy,omitempty"`
	Profilefields []AuthEmailGetSignupSettings200ResponseProfilefieldsInner `json:"profilefields,omitempty"`
	// Recaptcha challenge hash
	Recaptchachallengehash *string `json:"recaptchachallengehash,omitempty"`
	// Recaptcha challenge noscript image
	Recaptchachallengeimage *string `json:"recaptchachallengeimage,omitempty"`
	// Recaptcha challenge js url
	Recaptchachallengejs *string `json:"recaptchachallengejs,omitempty"`
	// Recaptcha public key
	Recaptchapublickey *string `json:"recaptchapublickey,omitempty"`
	// Site policy
	Sitepolicy *string `json:"sitepolicy,omitempty"`
	// Site policy handler
	Sitepolicyhandler *string `json:"sitepolicyhandler,omitempty"`
	Warnings []AuthEmailGetSignupSettings200ResponseWarningsInner `json:"warnings,omitempty"`
}

type _AuthEmailGetSignupSettings200Response AuthEmailGetSignupSettings200Response

// NewAuthEmailGetSignupSettings200Response instantiates a new AuthEmailGetSignupSettings200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthEmailGetSignupSettings200Response(namefields []map[string]interface{}) *AuthEmailGetSignupSettings200Response {
	this := AuthEmailGetSignupSettings200Response{}
	var country string = "null"
	this.Country = &country
	var defaultcity string = "null"
	this.Defaultcity = &defaultcity
	this.Namefields = namefields
	var passwordpolicy string = "null"
	this.Passwordpolicy = &passwordpolicy
	var recaptchachallengehash string = "null"
	this.Recaptchachallengehash = &recaptchachallengehash
	var recaptchachallengeimage string = "null"
	this.Recaptchachallengeimage = &recaptchachallengeimage
	var recaptchachallengejs string = "null"
	this.Recaptchachallengejs = &recaptchachallengejs
	var recaptchapublickey string = "null"
	this.Recaptchapublickey = &recaptchapublickey
	var sitepolicy string = "null"
	this.Sitepolicy = &sitepolicy
	var sitepolicyhandler string = "null"
	this.Sitepolicyhandler = &sitepolicyhandler
	return &this
}

// NewAuthEmailGetSignupSettings200ResponseWithDefaults instantiates a new AuthEmailGetSignupSettings200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthEmailGetSignupSettings200ResponseWithDefaults() *AuthEmailGetSignupSettings200Response {
	this := AuthEmailGetSignupSettings200Response{}
	var country string = "null"
	this.Country = &country
	var defaultcity string = "null"
	this.Defaultcity = &defaultcity
	var passwordpolicy string = "null"
	this.Passwordpolicy = &passwordpolicy
	var recaptchachallengehash string = "null"
	this.Recaptchachallengehash = &recaptchachallengehash
	var recaptchachallengeimage string = "null"
	this.Recaptchachallengeimage = &recaptchachallengeimage
	var recaptchachallengejs string = "null"
	this.Recaptchachallengejs = &recaptchachallengejs
	var recaptchapublickey string = "null"
	this.Recaptchapublickey = &recaptchapublickey
	var sitepolicy string = "null"
	this.Sitepolicy = &sitepolicy
	var sitepolicyhandler string = "null"
	this.Sitepolicyhandler = &sitepolicyhandler
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AuthEmailGetSignupSettings200Response) SetCountry(v string) {
	o.Country = &v
}

// GetDefaultcity returns the Defaultcity field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetDefaultcity() string {
	if o == nil || IsNil(o.Defaultcity) {
		var ret string
		return ret
	}
	return *o.Defaultcity
}

// GetDefaultcityOk returns a tuple with the Defaultcity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetDefaultcityOk() (*string, bool) {
	if o == nil || IsNil(o.Defaultcity) {
		return nil, false
	}
	return o.Defaultcity, true
}

// HasDefaultcity returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasDefaultcity() bool {
	if o != nil && !IsNil(o.Defaultcity) {
		return true
	}

	return false
}

// SetDefaultcity gets a reference to the given string and assigns it to the Defaultcity field.
func (o *AuthEmailGetSignupSettings200Response) SetDefaultcity(v string) {
	o.Defaultcity = &v
}

// GetNamefields returns the Namefields field value
func (o *AuthEmailGetSignupSettings200Response) GetNamefields() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Namefields
}

// GetNamefieldsOk returns a tuple with the Namefields field value
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetNamefieldsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namefields, true
}

// SetNamefields sets field value
func (o *AuthEmailGetSignupSettings200Response) SetNamefields(v []map[string]interface{}) {
	o.Namefields = v
}

// GetPasswordpolicy returns the Passwordpolicy field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetPasswordpolicy() string {
	if o == nil || IsNil(o.Passwordpolicy) {
		var ret string
		return ret
	}
	return *o.Passwordpolicy
}

// GetPasswordpolicyOk returns a tuple with the Passwordpolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetPasswordpolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Passwordpolicy) {
		return nil, false
	}
	return o.Passwordpolicy, true
}

// HasPasswordpolicy returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasPasswordpolicy() bool {
	if o != nil && !IsNil(o.Passwordpolicy) {
		return true
	}

	return false
}

// SetPasswordpolicy gets a reference to the given string and assigns it to the Passwordpolicy field.
func (o *AuthEmailGetSignupSettings200Response) SetPasswordpolicy(v string) {
	o.Passwordpolicy = &v
}

// GetProfilefields returns the Profilefields field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetProfilefields() []AuthEmailGetSignupSettings200ResponseProfilefieldsInner {
	if o == nil || IsNil(o.Profilefields) {
		var ret []AuthEmailGetSignupSettings200ResponseProfilefieldsInner
		return ret
	}
	return o.Profilefields
}

// GetProfilefieldsOk returns a tuple with the Profilefields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetProfilefieldsOk() ([]AuthEmailGetSignupSettings200ResponseProfilefieldsInner, bool) {
	if o == nil || IsNil(o.Profilefields) {
		return nil, false
	}
	return o.Profilefields, true
}

// HasProfilefields returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasProfilefields() bool {
	if o != nil && !IsNil(o.Profilefields) {
		return true
	}

	return false
}

// SetProfilefields gets a reference to the given []AuthEmailGetSignupSettings200ResponseProfilefieldsInner and assigns it to the Profilefields field.
func (o *AuthEmailGetSignupSettings200Response) SetProfilefields(v []AuthEmailGetSignupSettings200ResponseProfilefieldsInner) {
	o.Profilefields = v
}

// GetRecaptchachallengehash returns the Recaptchachallengehash field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetRecaptchachallengehash() string {
	if o == nil || IsNil(o.Recaptchachallengehash) {
		var ret string
		return ret
	}
	return *o.Recaptchachallengehash
}

// GetRecaptchachallengehashOk returns a tuple with the Recaptchachallengehash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetRecaptchachallengehashOk() (*string, bool) {
	if o == nil || IsNil(o.Recaptchachallengehash) {
		return nil, false
	}
	return o.Recaptchachallengehash, true
}

// HasRecaptchachallengehash returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasRecaptchachallengehash() bool {
	if o != nil && !IsNil(o.Recaptchachallengehash) {
		return true
	}

	return false
}

// SetRecaptchachallengehash gets a reference to the given string and assigns it to the Recaptchachallengehash field.
func (o *AuthEmailGetSignupSettings200Response) SetRecaptchachallengehash(v string) {
	o.Recaptchachallengehash = &v
}

// GetRecaptchachallengeimage returns the Recaptchachallengeimage field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetRecaptchachallengeimage() string {
	if o == nil || IsNil(o.Recaptchachallengeimage) {
		var ret string
		return ret
	}
	return *o.Recaptchachallengeimage
}

// GetRecaptchachallengeimageOk returns a tuple with the Recaptchachallengeimage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetRecaptchachallengeimageOk() (*string, bool) {
	if o == nil || IsNil(o.Recaptchachallengeimage) {
		return nil, false
	}
	return o.Recaptchachallengeimage, true
}

// HasRecaptchachallengeimage returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasRecaptchachallengeimage() bool {
	if o != nil && !IsNil(o.Recaptchachallengeimage) {
		return true
	}

	return false
}

// SetRecaptchachallengeimage gets a reference to the given string and assigns it to the Recaptchachallengeimage field.
func (o *AuthEmailGetSignupSettings200Response) SetRecaptchachallengeimage(v string) {
	o.Recaptchachallengeimage = &v
}

// GetRecaptchachallengejs returns the Recaptchachallengejs field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetRecaptchachallengejs() string {
	if o == nil || IsNil(o.Recaptchachallengejs) {
		var ret string
		return ret
	}
	return *o.Recaptchachallengejs
}

// GetRecaptchachallengejsOk returns a tuple with the Recaptchachallengejs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetRecaptchachallengejsOk() (*string, bool) {
	if o == nil || IsNil(o.Recaptchachallengejs) {
		return nil, false
	}
	return o.Recaptchachallengejs, true
}

// HasRecaptchachallengejs returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasRecaptchachallengejs() bool {
	if o != nil && !IsNil(o.Recaptchachallengejs) {
		return true
	}

	return false
}

// SetRecaptchachallengejs gets a reference to the given string and assigns it to the Recaptchachallengejs field.
func (o *AuthEmailGetSignupSettings200Response) SetRecaptchachallengejs(v string) {
	o.Recaptchachallengejs = &v
}

// GetRecaptchapublickey returns the Recaptchapublickey field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetRecaptchapublickey() string {
	if o == nil || IsNil(o.Recaptchapublickey) {
		var ret string
		return ret
	}
	return *o.Recaptchapublickey
}

// GetRecaptchapublickeyOk returns a tuple with the Recaptchapublickey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetRecaptchapublickeyOk() (*string, bool) {
	if o == nil || IsNil(o.Recaptchapublickey) {
		return nil, false
	}
	return o.Recaptchapublickey, true
}

// HasRecaptchapublickey returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasRecaptchapublickey() bool {
	if o != nil && !IsNil(o.Recaptchapublickey) {
		return true
	}

	return false
}

// SetRecaptchapublickey gets a reference to the given string and assigns it to the Recaptchapublickey field.
func (o *AuthEmailGetSignupSettings200Response) SetRecaptchapublickey(v string) {
	o.Recaptchapublickey = &v
}

// GetSitepolicy returns the Sitepolicy field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetSitepolicy() string {
	if o == nil || IsNil(o.Sitepolicy) {
		var ret string
		return ret
	}
	return *o.Sitepolicy
}

// GetSitepolicyOk returns a tuple with the Sitepolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetSitepolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Sitepolicy) {
		return nil, false
	}
	return o.Sitepolicy, true
}

// HasSitepolicy returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasSitepolicy() bool {
	if o != nil && !IsNil(o.Sitepolicy) {
		return true
	}

	return false
}

// SetSitepolicy gets a reference to the given string and assigns it to the Sitepolicy field.
func (o *AuthEmailGetSignupSettings200Response) SetSitepolicy(v string) {
	o.Sitepolicy = &v
}

// GetSitepolicyhandler returns the Sitepolicyhandler field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetSitepolicyhandler() string {
	if o == nil || IsNil(o.Sitepolicyhandler) {
		var ret string
		return ret
	}
	return *o.Sitepolicyhandler
}

// GetSitepolicyhandlerOk returns a tuple with the Sitepolicyhandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetSitepolicyhandlerOk() (*string, bool) {
	if o == nil || IsNil(o.Sitepolicyhandler) {
		return nil, false
	}
	return o.Sitepolicyhandler, true
}

// HasSitepolicyhandler returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasSitepolicyhandler() bool {
	if o != nil && !IsNil(o.Sitepolicyhandler) {
		return true
	}

	return false
}

// SetSitepolicyhandler gets a reference to the given string and assigns it to the Sitepolicyhandler field.
func (o *AuthEmailGetSignupSettings200Response) SetSitepolicyhandler(v string) {
	o.Sitepolicyhandler = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *AuthEmailGetSignupSettings200Response) GetWarnings() []AuthEmailGetSignupSettings200ResponseWarningsInner {
	if o == nil || IsNil(o.Warnings) {
		var ret []AuthEmailGetSignupSettings200ResponseWarningsInner
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEmailGetSignupSettings200Response) GetWarningsOk() ([]AuthEmailGetSignupSettings200ResponseWarningsInner, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *AuthEmailGetSignupSettings200Response) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []AuthEmailGetSignupSettings200ResponseWarningsInner and assigns it to the Warnings field.
func (o *AuthEmailGetSignupSettings200Response) SetWarnings(v []AuthEmailGetSignupSettings200ResponseWarningsInner) {
	o.Warnings = v
}

func (o AuthEmailGetSignupSettings200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthEmailGetSignupSettings200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Defaultcity) {
		toSerialize["defaultcity"] = o.Defaultcity
	}
	toSerialize["namefields"] = o.Namefields
	if !IsNil(o.Passwordpolicy) {
		toSerialize["passwordpolicy"] = o.Passwordpolicy
	}
	if !IsNil(o.Profilefields) {
		toSerialize["profilefields"] = o.Profilefields
	}
	if !IsNil(o.Recaptchachallengehash) {
		toSerialize["recaptchachallengehash"] = o.Recaptchachallengehash
	}
	if !IsNil(o.Recaptchachallengeimage) {
		toSerialize["recaptchachallengeimage"] = o.Recaptchachallengeimage
	}
	if !IsNil(o.Recaptchachallengejs) {
		toSerialize["recaptchachallengejs"] = o.Recaptchachallengejs
	}
	if !IsNil(o.Recaptchapublickey) {
		toSerialize["recaptchapublickey"] = o.Recaptchapublickey
	}
	if !IsNil(o.Sitepolicy) {
		toSerialize["sitepolicy"] = o.Sitepolicy
	}
	if !IsNil(o.Sitepolicyhandler) {
		toSerialize["sitepolicyhandler"] = o.Sitepolicyhandler
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *AuthEmailGetSignupSettings200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namefields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthEmailGetSignupSettings200Response := _AuthEmailGetSignupSettings200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthEmailGetSignupSettings200Response)

	if err != nil {
		return err
	}

	*o = AuthEmailGetSignupSettings200Response(varAuthEmailGetSignupSettings200Response)

	return err
}

type NullableAuthEmailGetSignupSettings200Response struct {
	value *AuthEmailGetSignupSettings200Response
	isSet bool
}

func (v NullableAuthEmailGetSignupSettings200Response) Get() *AuthEmailGetSignupSettings200Response {
	return v.value
}

func (v *NullableAuthEmailGetSignupSettings200Response) Set(val *AuthEmailGetSignupSettings200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthEmailGetSignupSettings200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthEmailGetSignupSettings200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthEmailGetSignupSettings200Response(val *AuthEmailGetSignupSettings200Response) *NullableAuthEmailGetSignupSettings200Response {
	return &NullableAuthEmailGetSignupSettings200Response{value: val, isSet: true}
}

func (v NullableAuthEmailGetSignupSettings200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthEmailGetSignupSettings200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


