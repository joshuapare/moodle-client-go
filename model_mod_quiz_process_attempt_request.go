/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModQuizProcessAttemptRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModQuizProcessAttemptRequest{}

// ModQuizProcessAttemptRequest struct for ModQuizProcessAttemptRequest
type ModQuizProcessAttemptRequest struct {
	// attempt id
	Attemptid int32 `json:"attemptid"`
	Data []ModQuizGetAttemptDataRequestPreflightdataInner `json:"data,omitempty"`
	// whether to finish or not the attempt
	Finishattempt *bool `json:"finishattempt,omitempty"`
	Preflightdata []ModQuizGetAttemptDataRequestPreflightdataInner `json:"preflightdata,omitempty"`
	// whether the WS was called by a timer when the time is up
	Timeup *bool `json:"timeup,omitempty"`
}

type _ModQuizProcessAttemptRequest ModQuizProcessAttemptRequest

// NewModQuizProcessAttemptRequest instantiates a new ModQuizProcessAttemptRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModQuizProcessAttemptRequest(attemptid int32) *ModQuizProcessAttemptRequest {
	this := ModQuizProcessAttemptRequest{}
	this.Attemptid = attemptid
	var finishattempt bool = false
	this.Finishattempt = &finishattempt
	var timeup bool = false
	this.Timeup = &timeup
	return &this
}

// NewModQuizProcessAttemptRequestWithDefaults instantiates a new ModQuizProcessAttemptRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModQuizProcessAttemptRequestWithDefaults() *ModQuizProcessAttemptRequest {
	this := ModQuizProcessAttemptRequest{}
	var finishattempt bool = false
	this.Finishattempt = &finishattempt
	var timeup bool = false
	this.Timeup = &timeup
	return &this
}

// GetAttemptid returns the Attemptid field value
func (o *ModQuizProcessAttemptRequest) GetAttemptid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Attemptid
}

// GetAttemptidOk returns a tuple with the Attemptid field value
// and a boolean to check if the value has been set.
func (o *ModQuizProcessAttemptRequest) GetAttemptidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attemptid, true
}

// SetAttemptid sets field value
func (o *ModQuizProcessAttemptRequest) SetAttemptid(v int32) {
	o.Attemptid = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ModQuizProcessAttemptRequest) GetData() []ModQuizGetAttemptDataRequestPreflightdataInner {
	if o == nil || IsNil(o.Data) {
		var ret []ModQuizGetAttemptDataRequestPreflightdataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizProcessAttemptRequest) GetDataOk() ([]ModQuizGetAttemptDataRequestPreflightdataInner, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ModQuizProcessAttemptRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ModQuizGetAttemptDataRequestPreflightdataInner and assigns it to the Data field.
func (o *ModQuizProcessAttemptRequest) SetData(v []ModQuizGetAttemptDataRequestPreflightdataInner) {
	o.Data = v
}

// GetFinishattempt returns the Finishattempt field value if set, zero value otherwise.
func (o *ModQuizProcessAttemptRequest) GetFinishattempt() bool {
	if o == nil || IsNil(o.Finishattempt) {
		var ret bool
		return ret
	}
	return *o.Finishattempt
}

// GetFinishattemptOk returns a tuple with the Finishattempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizProcessAttemptRequest) GetFinishattemptOk() (*bool, bool) {
	if o == nil || IsNil(o.Finishattempt) {
		return nil, false
	}
	return o.Finishattempt, true
}

// HasFinishattempt returns a boolean if a field has been set.
func (o *ModQuizProcessAttemptRequest) HasFinishattempt() bool {
	if o != nil && !IsNil(o.Finishattempt) {
		return true
	}

	return false
}

// SetFinishattempt gets a reference to the given bool and assigns it to the Finishattempt field.
func (o *ModQuizProcessAttemptRequest) SetFinishattempt(v bool) {
	o.Finishattempt = &v
}

// GetPreflightdata returns the Preflightdata field value if set, zero value otherwise.
func (o *ModQuizProcessAttemptRequest) GetPreflightdata() []ModQuizGetAttemptDataRequestPreflightdataInner {
	if o == nil || IsNil(o.Preflightdata) {
		var ret []ModQuizGetAttemptDataRequestPreflightdataInner
		return ret
	}
	return o.Preflightdata
}

// GetPreflightdataOk returns a tuple with the Preflightdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizProcessAttemptRequest) GetPreflightdataOk() ([]ModQuizGetAttemptDataRequestPreflightdataInner, bool) {
	if o == nil || IsNil(o.Preflightdata) {
		return nil, false
	}
	return o.Preflightdata, true
}

// HasPreflightdata returns a boolean if a field has been set.
func (o *ModQuizProcessAttemptRequest) HasPreflightdata() bool {
	if o != nil && !IsNil(o.Preflightdata) {
		return true
	}

	return false
}

// SetPreflightdata gets a reference to the given []ModQuizGetAttemptDataRequestPreflightdataInner and assigns it to the Preflightdata field.
func (o *ModQuizProcessAttemptRequest) SetPreflightdata(v []ModQuizGetAttemptDataRequestPreflightdataInner) {
	o.Preflightdata = v
}

// GetTimeup returns the Timeup field value if set, zero value otherwise.
func (o *ModQuizProcessAttemptRequest) GetTimeup() bool {
	if o == nil || IsNil(o.Timeup) {
		var ret bool
		return ret
	}
	return *o.Timeup
}

// GetTimeupOk returns a tuple with the Timeup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizProcessAttemptRequest) GetTimeupOk() (*bool, bool) {
	if o == nil || IsNil(o.Timeup) {
		return nil, false
	}
	return o.Timeup, true
}

// HasTimeup returns a boolean if a field has been set.
func (o *ModQuizProcessAttemptRequest) HasTimeup() bool {
	if o != nil && !IsNil(o.Timeup) {
		return true
	}

	return false
}

// SetTimeup gets a reference to the given bool and assigns it to the Timeup field.
func (o *ModQuizProcessAttemptRequest) SetTimeup(v bool) {
	o.Timeup = &v
}

func (o ModQuizProcessAttemptRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModQuizProcessAttemptRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attemptid"] = o.Attemptid
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Finishattempt) {
		toSerialize["finishattempt"] = o.Finishattempt
	}
	if !IsNil(o.Preflightdata) {
		toSerialize["preflightdata"] = o.Preflightdata
	}
	if !IsNil(o.Timeup) {
		toSerialize["timeup"] = o.Timeup
	}
	return toSerialize, nil
}

func (o *ModQuizProcessAttemptRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attemptid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModQuizProcessAttemptRequest := _ModQuizProcessAttemptRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModQuizProcessAttemptRequest)

	if err != nil {
		return err
	}

	*o = ModQuizProcessAttemptRequest(varModQuizProcessAttemptRequest)

	return err
}

type NullableModQuizProcessAttemptRequest struct {
	value *ModQuizProcessAttemptRequest
	isSet bool
}

func (v NullableModQuizProcessAttemptRequest) Get() *ModQuizProcessAttemptRequest {
	return v.value
}

func (v *NullableModQuizProcessAttemptRequest) Set(val *ModQuizProcessAttemptRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModQuizProcessAttemptRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModQuizProcessAttemptRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModQuizProcessAttemptRequest(val *ModQuizProcessAttemptRequest) *NullableModQuizProcessAttemptRequest {
	return &NullableModQuizProcessAttemptRequest{value: val, isSet: true}
}

func (v NullableModQuizProcessAttemptRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModQuizProcessAttemptRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


