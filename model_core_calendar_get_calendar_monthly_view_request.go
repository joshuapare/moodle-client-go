/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCalendarGetCalendarMonthlyViewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarMonthlyViewRequest{}

// CoreCalendarGetCalendarMonthlyViewRequest struct for CoreCalendarGetCalendarMonthlyViewRequest
type CoreCalendarGetCalendarMonthlyViewRequest struct {
	// Category being viewed
	Categoryid *int32 `json:"categoryid,omitempty"`
	// Course being viewed
	Courseid *int32 `json:"courseid,omitempty"`
	// Day to be viewed
	Day *int32 `json:"day,omitempty"`
	// Whether to show course navigation
	Includenavigation *bool `json:"includenavigation,omitempty"`
	// Whether to return the mini month view or not
	Mini *bool `json:"mini,omitempty"`
	// Month to be viewed
	Month int32 `json:"month"`
	// The view mode of the calendar
	View *string `json:"view,omitempty"`
	// Year to be viewed
	Year int32 `json:"year"`
}

type _CoreCalendarGetCalendarMonthlyViewRequest CoreCalendarGetCalendarMonthlyViewRequest

// NewCoreCalendarGetCalendarMonthlyViewRequest instantiates a new CoreCalendarGetCalendarMonthlyViewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarMonthlyViewRequest(month int32, year int32) *CoreCalendarGetCalendarMonthlyViewRequest {
	this := CoreCalendarGetCalendarMonthlyViewRequest{}
	var courseid int32 = 1
	this.Courseid = &courseid
	var day int32 = 1
	this.Day = &day
	var includenavigation bool = true
	this.Includenavigation = &includenavigation
	var mini bool = false
	this.Mini = &mini
	this.Month = month
	var view string = "month"
	this.View = &view
	this.Year = year
	return &this
}

// NewCoreCalendarGetCalendarMonthlyViewRequestWithDefaults instantiates a new CoreCalendarGetCalendarMonthlyViewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarMonthlyViewRequestWithDefaults() *CoreCalendarGetCalendarMonthlyViewRequest {
	this := CoreCalendarGetCalendarMonthlyViewRequest{}
	var courseid int32 = 1
	this.Courseid = &courseid
	var day int32 = 1
	this.Day = &day
	var includenavigation bool = true
	this.Includenavigation = &includenavigation
	var mini bool = false
	this.Mini = &mini
	var view string = "month"
	this.View = &view
	return &this
}

// GetCategoryid returns the Categoryid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetCategoryid() int32 {
	if o == nil || IsNil(o.Categoryid) {
		var ret int32
		return ret
	}
	return *o.Categoryid
}

// GetCategoryidOk returns a tuple with the Categoryid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetCategoryidOk() (*int32, bool) {
	if o == nil || IsNil(o.Categoryid) {
		return nil, false
	}
	return o.Categoryid, true
}

// HasCategoryid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) HasCategoryid() bool {
	if o != nil && !IsNil(o.Categoryid) {
		return true
	}

	return false
}

// SetCategoryid gets a reference to the given int32 and assigns it to the Categoryid field.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) SetCategoryid(v int32) {
	o.Categoryid = &v
}

// GetCourseid returns the Courseid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetCourseid() int32 {
	if o == nil || IsNil(o.Courseid) {
		var ret int32
		return ret
	}
	return *o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetCourseidOk() (*int32, bool) {
	if o == nil || IsNil(o.Courseid) {
		return nil, false
	}
	return o.Courseid, true
}

// HasCourseid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) HasCourseid() bool {
	if o != nil && !IsNil(o.Courseid) {
		return true
	}

	return false
}

// SetCourseid gets a reference to the given int32 and assigns it to the Courseid field.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) SetCourseid(v int32) {
	o.Courseid = &v
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetDay() int32 {
	if o == nil || IsNil(o.Day) {
		var ret int32
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetDayOk() (*int32, bool) {
	if o == nil || IsNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) HasDay() bool {
	if o != nil && !IsNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given int32 and assigns it to the Day field.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) SetDay(v int32) {
	o.Day = &v
}

// GetIncludenavigation returns the Includenavigation field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetIncludenavigation() bool {
	if o == nil || IsNil(o.Includenavigation) {
		var ret bool
		return ret
	}
	return *o.Includenavigation
}

// GetIncludenavigationOk returns a tuple with the Includenavigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetIncludenavigationOk() (*bool, bool) {
	if o == nil || IsNil(o.Includenavigation) {
		return nil, false
	}
	return o.Includenavigation, true
}

// HasIncludenavigation returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) HasIncludenavigation() bool {
	if o != nil && !IsNil(o.Includenavigation) {
		return true
	}

	return false
}

// SetIncludenavigation gets a reference to the given bool and assigns it to the Includenavigation field.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) SetIncludenavigation(v bool) {
	o.Includenavigation = &v
}

// GetMini returns the Mini field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetMini() bool {
	if o == nil || IsNil(o.Mini) {
		var ret bool
		return ret
	}
	return *o.Mini
}

// GetMiniOk returns a tuple with the Mini field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetMiniOk() (*bool, bool) {
	if o == nil || IsNil(o.Mini) {
		return nil, false
	}
	return o.Mini, true
}

// HasMini returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) HasMini() bool {
	if o != nil && !IsNil(o.Mini) {
		return true
	}

	return false
}

// SetMini gets a reference to the given bool and assigns it to the Mini field.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) SetMini(v bool) {
	o.Mini = &v
}

// GetMonth returns the Month field value
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *CoreCalendarGetCalendarMonthlyViewRequest) SetMonth(v int32) {
	o.Month = v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) SetView(v string) {
	o.View = &v
}

// GetYear returns the Year field value
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarMonthlyViewRequest) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *CoreCalendarGetCalendarMonthlyViewRequest) SetYear(v int32) {
	o.Year = v
}

func (o CoreCalendarGetCalendarMonthlyViewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarMonthlyViewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categoryid) {
		toSerialize["categoryid"] = o.Categoryid
	}
	if !IsNil(o.Courseid) {
		toSerialize["courseid"] = o.Courseid
	}
	if !IsNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	if !IsNil(o.Includenavigation) {
		toSerialize["includenavigation"] = o.Includenavigation
	}
	if !IsNil(o.Mini) {
		toSerialize["mini"] = o.Mini
	}
	toSerialize["month"] = o.Month
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	toSerialize["year"] = o.Year
	return toSerialize, nil
}

func (o *CoreCalendarGetCalendarMonthlyViewRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"month",
		"year",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCalendarGetCalendarMonthlyViewRequest := _CoreCalendarGetCalendarMonthlyViewRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCalendarGetCalendarMonthlyViewRequest)

	if err != nil {
		return err
	}

	*o = CoreCalendarGetCalendarMonthlyViewRequest(varCoreCalendarGetCalendarMonthlyViewRequest)

	return err
}

type NullableCoreCalendarGetCalendarMonthlyViewRequest struct {
	value *CoreCalendarGetCalendarMonthlyViewRequest
	isSet bool
}

func (v NullableCoreCalendarGetCalendarMonthlyViewRequest) Get() *CoreCalendarGetCalendarMonthlyViewRequest {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarMonthlyViewRequest) Set(val *CoreCalendarGetCalendarMonthlyViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarMonthlyViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarMonthlyViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarMonthlyViewRequest(val *CoreCalendarGetCalendarMonthlyViewRequest) *NullableCoreCalendarGetCalendarMonthlyViewRequest {
	return &NullableCoreCalendarGetCalendarMonthlyViewRequest{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarMonthlyViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarMonthlyViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


