/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner{}

// CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner struct for CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner
type CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner struct {
	// Badge id
	Id *int32 `json:"id,omitempty"`
	// Language
	Language *string `json:"language,omitempty"`
	// Badge name
	Name *string `json:"name,omitempty"`
	// Type
	Type *int32 `json:"type,omitempty"`
	// Version
	Version *string `json:"version,omitempty"`
}

// NewCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner instantiates a new CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner() *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner {
	this := CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner{}
	return &this
}

// NewCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInnerWithDefaults instantiates a new CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInnerWithDefaults() *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner {
	this := CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) SetId(v int32) {
	o.Id = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) SetLanguage(v string) {
	o.Language = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) SetType(v int32) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) SetVersion(v string) {
	o.Version = &v
}

func (o CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner struct {
	value *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner
	isSet bool
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) Get() *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner {
	return v.value
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) Set(val *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner(val *CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) *NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner {
	return &NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner{value: val, isSet: true}
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


