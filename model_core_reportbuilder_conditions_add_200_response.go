/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreReportbuilderConditionsAdd200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreReportbuilderConditionsAdd200Response{}

// CoreReportbuilderConditionsAdd200Response struct for CoreReportbuilderConditionsAdd200Response
type CoreReportbuilderConditionsAdd200Response struct {
	// activeconditionsform
	Activeconditionsform string `json:"activeconditionsform"`
	Availableconditions []CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner `json:"availableconditions"`
	// hasactiveconditions
	Hasactiveconditions bool `json:"hasactiveconditions"`
	// hasavailableconditions
	Hasavailableconditions bool `json:"hasavailableconditions"`
	// helpicon
	Helpicon string `json:"helpicon"`
	// javascript
	Javascript *string `json:"javascript,omitempty"`
}

type _CoreReportbuilderConditionsAdd200Response CoreReportbuilderConditionsAdd200Response

// NewCoreReportbuilderConditionsAdd200Response instantiates a new CoreReportbuilderConditionsAdd200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreReportbuilderConditionsAdd200Response(activeconditionsform string, availableconditions []CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner, hasactiveconditions bool, hasavailableconditions bool, helpicon string) *CoreReportbuilderConditionsAdd200Response {
	this := CoreReportbuilderConditionsAdd200Response{}
	this.Activeconditionsform = activeconditionsform
	this.Availableconditions = availableconditions
	this.Hasactiveconditions = hasactiveconditions
	this.Hasavailableconditions = hasavailableconditions
	this.Helpicon = helpicon
	var javascript string = "null"
	this.Javascript = &javascript
	return &this
}

// NewCoreReportbuilderConditionsAdd200ResponseWithDefaults instantiates a new CoreReportbuilderConditionsAdd200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreReportbuilderConditionsAdd200ResponseWithDefaults() *CoreReportbuilderConditionsAdd200Response {
	this := CoreReportbuilderConditionsAdd200Response{}
	var activeconditionsform string = "null"
	this.Activeconditionsform = activeconditionsform
	var hasactiveconditions bool = null
	this.Hasactiveconditions = hasactiveconditions
	var hasavailableconditions bool = null
	this.Hasavailableconditions = hasavailableconditions
	var javascript string = "null"
	this.Javascript = &javascript
	return &this
}

// GetActiveconditionsform returns the Activeconditionsform field value
func (o *CoreReportbuilderConditionsAdd200Response) GetActiveconditionsform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Activeconditionsform
}

// GetActiveconditionsformOk returns a tuple with the Activeconditionsform field value
// and a boolean to check if the value has been set.
func (o *CoreReportbuilderConditionsAdd200Response) GetActiveconditionsformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activeconditionsform, true
}

// SetActiveconditionsform sets field value
func (o *CoreReportbuilderConditionsAdd200Response) SetActiveconditionsform(v string) {
	o.Activeconditionsform = v
}

// GetAvailableconditions returns the Availableconditions field value
func (o *CoreReportbuilderConditionsAdd200Response) GetAvailableconditions() []CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner {
	if o == nil {
		var ret []CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner
		return ret
	}

	return o.Availableconditions
}

// GetAvailableconditionsOk returns a tuple with the Availableconditions field value
// and a boolean to check if the value has been set.
func (o *CoreReportbuilderConditionsAdd200Response) GetAvailableconditionsOk() ([]CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Availableconditions, true
}

// SetAvailableconditions sets field value
func (o *CoreReportbuilderConditionsAdd200Response) SetAvailableconditions(v []CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner) {
	o.Availableconditions = v
}

// GetHasactiveconditions returns the Hasactiveconditions field value
func (o *CoreReportbuilderConditionsAdd200Response) GetHasactiveconditions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hasactiveconditions
}

// GetHasactiveconditionsOk returns a tuple with the Hasactiveconditions field value
// and a boolean to check if the value has been set.
func (o *CoreReportbuilderConditionsAdd200Response) GetHasactiveconditionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hasactiveconditions, true
}

// SetHasactiveconditions sets field value
func (o *CoreReportbuilderConditionsAdd200Response) SetHasactiveconditions(v bool) {
	o.Hasactiveconditions = v
}

// GetHasavailableconditions returns the Hasavailableconditions field value
func (o *CoreReportbuilderConditionsAdd200Response) GetHasavailableconditions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hasavailableconditions
}

// GetHasavailableconditionsOk returns a tuple with the Hasavailableconditions field value
// and a boolean to check if the value has been set.
func (o *CoreReportbuilderConditionsAdd200Response) GetHasavailableconditionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hasavailableconditions, true
}

// SetHasavailableconditions sets field value
func (o *CoreReportbuilderConditionsAdd200Response) SetHasavailableconditions(v bool) {
	o.Hasavailableconditions = v
}

// GetHelpicon returns the Helpicon field value
func (o *CoreReportbuilderConditionsAdd200Response) GetHelpicon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Helpicon
}

// GetHelpiconOk returns a tuple with the Helpicon field value
// and a boolean to check if the value has been set.
func (o *CoreReportbuilderConditionsAdd200Response) GetHelpiconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Helpicon, true
}

// SetHelpicon sets field value
func (o *CoreReportbuilderConditionsAdd200Response) SetHelpicon(v string) {
	o.Helpicon = v
}

// GetJavascript returns the Javascript field value if set, zero value otherwise.
func (o *CoreReportbuilderConditionsAdd200Response) GetJavascript() string {
	if o == nil || IsNil(o.Javascript) {
		var ret string
		return ret
	}
	return *o.Javascript
}

// GetJavascriptOk returns a tuple with the Javascript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreReportbuilderConditionsAdd200Response) GetJavascriptOk() (*string, bool) {
	if o == nil || IsNil(o.Javascript) {
		return nil, false
	}
	return o.Javascript, true
}

// HasJavascript returns a boolean if a field has been set.
func (o *CoreReportbuilderConditionsAdd200Response) HasJavascript() bool {
	if o != nil && !IsNil(o.Javascript) {
		return true
	}

	return false
}

// SetJavascript gets a reference to the given string and assigns it to the Javascript field.
func (o *CoreReportbuilderConditionsAdd200Response) SetJavascript(v string) {
	o.Javascript = &v
}

func (o CoreReportbuilderConditionsAdd200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreReportbuilderConditionsAdd200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activeconditionsform"] = o.Activeconditionsform
	toSerialize["availableconditions"] = o.Availableconditions
	toSerialize["hasactiveconditions"] = o.Hasactiveconditions
	toSerialize["hasavailableconditions"] = o.Hasavailableconditions
	toSerialize["helpicon"] = o.Helpicon
	if !IsNil(o.Javascript) {
		toSerialize["javascript"] = o.Javascript
	}
	return toSerialize, nil
}

func (o *CoreReportbuilderConditionsAdd200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activeconditionsform",
		"availableconditions",
		"hasactiveconditions",
		"hasavailableconditions",
		"helpicon",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreReportbuilderConditionsAdd200Response := _CoreReportbuilderConditionsAdd200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreReportbuilderConditionsAdd200Response)

	if err != nil {
		return err
	}

	*o = CoreReportbuilderConditionsAdd200Response(varCoreReportbuilderConditionsAdd200Response)

	return err
}

type NullableCoreReportbuilderConditionsAdd200Response struct {
	value *CoreReportbuilderConditionsAdd200Response
	isSet bool
}

func (v NullableCoreReportbuilderConditionsAdd200Response) Get() *CoreReportbuilderConditionsAdd200Response {
	return v.value
}

func (v *NullableCoreReportbuilderConditionsAdd200Response) Set(val *CoreReportbuilderConditionsAdd200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreReportbuilderConditionsAdd200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreReportbuilderConditionsAdd200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreReportbuilderConditionsAdd200Response(val *CoreReportbuilderConditionsAdd200Response) *NullableCoreReportbuilderConditionsAdd200Response {
	return &NullableCoreReportbuilderConditionsAdd200Response{value: val, isSet: true}
}

func (v NullableCoreReportbuilderConditionsAdd200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreReportbuilderConditionsAdd200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


