/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModDataAddEntry200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModDataAddEntry200Response{}

// ModDataAddEntry200Response struct for ModDataAddEntry200Response
type ModDataAddEntry200Response struct {
	Fieldnotifications []ModDataAddEntry200ResponseFieldnotificationsInner `json:"fieldnotifications"`
	Generalnotifications []map[string]interface{} `json:"generalnotifications"`
	// True new created entry id. 0 if the entry was not created.
	Newentryid int32 `json:"newentryid"`
	Warnings []AuthEmailSignupUser200ResponseWarningsInner `json:"warnings,omitempty"`
}

type _ModDataAddEntry200Response ModDataAddEntry200Response

// NewModDataAddEntry200Response instantiates a new ModDataAddEntry200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModDataAddEntry200Response(fieldnotifications []ModDataAddEntry200ResponseFieldnotificationsInner, generalnotifications []map[string]interface{}, newentryid int32) *ModDataAddEntry200Response {
	this := ModDataAddEntry200Response{}
	this.Fieldnotifications = fieldnotifications
	this.Generalnotifications = generalnotifications
	this.Newentryid = newentryid
	return &this
}

// NewModDataAddEntry200ResponseWithDefaults instantiates a new ModDataAddEntry200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModDataAddEntry200ResponseWithDefaults() *ModDataAddEntry200Response {
	this := ModDataAddEntry200Response{}
	var newentryid int32 = null
	this.Newentryid = newentryid
	return &this
}

// GetFieldnotifications returns the Fieldnotifications field value
func (o *ModDataAddEntry200Response) GetFieldnotifications() []ModDataAddEntry200ResponseFieldnotificationsInner {
	if o == nil {
		var ret []ModDataAddEntry200ResponseFieldnotificationsInner
		return ret
	}

	return o.Fieldnotifications
}

// GetFieldnotificationsOk returns a tuple with the Fieldnotifications field value
// and a boolean to check if the value has been set.
func (o *ModDataAddEntry200Response) GetFieldnotificationsOk() ([]ModDataAddEntry200ResponseFieldnotificationsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fieldnotifications, true
}

// SetFieldnotifications sets field value
func (o *ModDataAddEntry200Response) SetFieldnotifications(v []ModDataAddEntry200ResponseFieldnotificationsInner) {
	o.Fieldnotifications = v
}

// GetGeneralnotifications returns the Generalnotifications field value
func (o *ModDataAddEntry200Response) GetGeneralnotifications() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Generalnotifications
}

// GetGeneralnotificationsOk returns a tuple with the Generalnotifications field value
// and a boolean to check if the value has been set.
func (o *ModDataAddEntry200Response) GetGeneralnotificationsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Generalnotifications, true
}

// SetGeneralnotifications sets field value
func (o *ModDataAddEntry200Response) SetGeneralnotifications(v []map[string]interface{}) {
	o.Generalnotifications = v
}

// GetNewentryid returns the Newentryid field value
func (o *ModDataAddEntry200Response) GetNewentryid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Newentryid
}

// GetNewentryidOk returns a tuple with the Newentryid field value
// and a boolean to check if the value has been set.
func (o *ModDataAddEntry200Response) GetNewentryidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Newentryid, true
}

// SetNewentryid sets field value
func (o *ModDataAddEntry200Response) SetNewentryid(v int32) {
	o.Newentryid = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ModDataAddEntry200Response) GetWarnings() []AuthEmailSignupUser200ResponseWarningsInner {
	if o == nil || IsNil(o.Warnings) {
		var ret []AuthEmailSignupUser200ResponseWarningsInner
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataAddEntry200Response) GetWarningsOk() ([]AuthEmailSignupUser200ResponseWarningsInner, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ModDataAddEntry200Response) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []AuthEmailSignupUser200ResponseWarningsInner and assigns it to the Warnings field.
func (o *ModDataAddEntry200Response) SetWarnings(v []AuthEmailSignupUser200ResponseWarningsInner) {
	o.Warnings = v
}

func (o ModDataAddEntry200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModDataAddEntry200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldnotifications"] = o.Fieldnotifications
	toSerialize["generalnotifications"] = o.Generalnotifications
	toSerialize["newentryid"] = o.Newentryid
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *ModDataAddEntry200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fieldnotifications",
		"generalnotifications",
		"newentryid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModDataAddEntry200Response := _ModDataAddEntry200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModDataAddEntry200Response)

	if err != nil {
		return err
	}

	*o = ModDataAddEntry200Response(varModDataAddEntry200Response)

	return err
}

type NullableModDataAddEntry200Response struct {
	value *ModDataAddEntry200Response
	isSet bool
}

func (v NullableModDataAddEntry200Response) Get() *ModDataAddEntry200Response {
	return v.value
}

func (v *NullableModDataAddEntry200Response) Set(val *ModDataAddEntry200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableModDataAddEntry200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableModDataAddEntry200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModDataAddEntry200Response(val *ModDataAddEntry200Response) *NullableModDataAddEntry200Response {
	return &NullableModDataAddEntry200Response{value: val, isSet: true}
}

func (v NullableModDataAddEntry200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModDataAddEntry200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


