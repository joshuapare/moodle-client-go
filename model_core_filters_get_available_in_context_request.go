/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreFiltersGetAvailableInContextRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreFiltersGetAvailableInContextRequest{}

// CoreFiltersGetAvailableInContextRequest struct for CoreFiltersGetAvailableInContextRequest
type CoreFiltersGetAvailableInContextRequest struct {
	Contexts []CoreFiltersGetAvailableInContextRequestContextsInner `json:"contexts"`
}

type _CoreFiltersGetAvailableInContextRequest CoreFiltersGetAvailableInContextRequest

// NewCoreFiltersGetAvailableInContextRequest instantiates a new CoreFiltersGetAvailableInContextRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreFiltersGetAvailableInContextRequest(contexts []CoreFiltersGetAvailableInContextRequestContextsInner) *CoreFiltersGetAvailableInContextRequest {
	this := CoreFiltersGetAvailableInContextRequest{}
	this.Contexts = contexts
	return &this
}

// NewCoreFiltersGetAvailableInContextRequestWithDefaults instantiates a new CoreFiltersGetAvailableInContextRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreFiltersGetAvailableInContextRequestWithDefaults() *CoreFiltersGetAvailableInContextRequest {
	this := CoreFiltersGetAvailableInContextRequest{}
	return &this
}

// GetContexts returns the Contexts field value
func (o *CoreFiltersGetAvailableInContextRequest) GetContexts() []CoreFiltersGetAvailableInContextRequestContextsInner {
	if o == nil {
		var ret []CoreFiltersGetAvailableInContextRequestContextsInner
		return ret
	}

	return o.Contexts
}

// GetContextsOk returns a tuple with the Contexts field value
// and a boolean to check if the value has been set.
func (o *CoreFiltersGetAvailableInContextRequest) GetContextsOk() ([]CoreFiltersGetAvailableInContextRequestContextsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contexts, true
}

// SetContexts sets field value
func (o *CoreFiltersGetAvailableInContextRequest) SetContexts(v []CoreFiltersGetAvailableInContextRequestContextsInner) {
	o.Contexts = v
}

func (o CoreFiltersGetAvailableInContextRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreFiltersGetAvailableInContextRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contexts"] = o.Contexts
	return toSerialize, nil
}

func (o *CoreFiltersGetAvailableInContextRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contexts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreFiltersGetAvailableInContextRequest := _CoreFiltersGetAvailableInContextRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreFiltersGetAvailableInContextRequest)

	if err != nil {
		return err
	}

	*o = CoreFiltersGetAvailableInContextRequest(varCoreFiltersGetAvailableInContextRequest)

	return err
}

type NullableCoreFiltersGetAvailableInContextRequest struct {
	value *CoreFiltersGetAvailableInContextRequest
	isSet bool
}

func (v NullableCoreFiltersGetAvailableInContextRequest) Get() *CoreFiltersGetAvailableInContextRequest {
	return v.value
}

func (v *NullableCoreFiltersGetAvailableInContextRequest) Set(val *CoreFiltersGetAvailableInContextRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreFiltersGetAvailableInContextRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreFiltersGetAvailableInContextRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreFiltersGetAvailableInContextRequest(val *CoreFiltersGetAvailableInContextRequest) *NullableCoreFiltersGetAvailableInContextRequest {
	return &NullableCoreFiltersGetAvailableInContextRequest{value: val, isSet: true}
}

func (v NullableCoreFiltersGetAvailableInContextRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreFiltersGetAvailableInContextRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


