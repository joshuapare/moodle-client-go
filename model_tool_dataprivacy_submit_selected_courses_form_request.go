/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolDataprivacySubmitSelectedCoursesFormRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolDataprivacySubmitSelectedCoursesFormRequest{}

// ToolDataprivacySubmitSelectedCoursesFormRequest struct for ToolDataprivacySubmitSelectedCoursesFormRequest
type ToolDataprivacySubmitSelectedCoursesFormRequest struct {
	// The data of selected courses form, encoded as a json array
	Jsonformdata string `json:"jsonformdata"`
	// The id of data request
	Requestid int32 `json:"requestid"`
}

type _ToolDataprivacySubmitSelectedCoursesFormRequest ToolDataprivacySubmitSelectedCoursesFormRequest

// NewToolDataprivacySubmitSelectedCoursesFormRequest instantiates a new ToolDataprivacySubmitSelectedCoursesFormRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolDataprivacySubmitSelectedCoursesFormRequest(jsonformdata string, requestid int32) *ToolDataprivacySubmitSelectedCoursesFormRequest {
	this := ToolDataprivacySubmitSelectedCoursesFormRequest{}
	this.Jsonformdata = jsonformdata
	this.Requestid = requestid
	return &this
}

// NewToolDataprivacySubmitSelectedCoursesFormRequestWithDefaults instantiates a new ToolDataprivacySubmitSelectedCoursesFormRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolDataprivacySubmitSelectedCoursesFormRequestWithDefaults() *ToolDataprivacySubmitSelectedCoursesFormRequest {
	this := ToolDataprivacySubmitSelectedCoursesFormRequest{}
	var jsonformdata string = "null"
	this.Jsonformdata = jsonformdata
	var requestid int32 = null
	this.Requestid = requestid
	return &this
}

// GetJsonformdata returns the Jsonformdata field value
func (o *ToolDataprivacySubmitSelectedCoursesFormRequest) GetJsonformdata() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jsonformdata
}

// GetJsonformdataOk returns a tuple with the Jsonformdata field value
// and a boolean to check if the value has been set.
func (o *ToolDataprivacySubmitSelectedCoursesFormRequest) GetJsonformdataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jsonformdata, true
}

// SetJsonformdata sets field value
func (o *ToolDataprivacySubmitSelectedCoursesFormRequest) SetJsonformdata(v string) {
	o.Jsonformdata = v
}

// GetRequestid returns the Requestid field value
func (o *ToolDataprivacySubmitSelectedCoursesFormRequest) GetRequestid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Requestid
}

// GetRequestidOk returns a tuple with the Requestid field value
// and a boolean to check if the value has been set.
func (o *ToolDataprivacySubmitSelectedCoursesFormRequest) GetRequestidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Requestid, true
}

// SetRequestid sets field value
func (o *ToolDataprivacySubmitSelectedCoursesFormRequest) SetRequestid(v int32) {
	o.Requestid = v
}

func (o ToolDataprivacySubmitSelectedCoursesFormRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolDataprivacySubmitSelectedCoursesFormRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jsonformdata"] = o.Jsonformdata
	toSerialize["requestid"] = o.Requestid
	return toSerialize, nil
}

func (o *ToolDataprivacySubmitSelectedCoursesFormRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jsonformdata",
		"requestid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolDataprivacySubmitSelectedCoursesFormRequest := _ToolDataprivacySubmitSelectedCoursesFormRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolDataprivacySubmitSelectedCoursesFormRequest)

	if err != nil {
		return err
	}

	*o = ToolDataprivacySubmitSelectedCoursesFormRequest(varToolDataprivacySubmitSelectedCoursesFormRequest)

	return err
}

type NullableToolDataprivacySubmitSelectedCoursesFormRequest struct {
	value *ToolDataprivacySubmitSelectedCoursesFormRequest
	isSet bool
}

func (v NullableToolDataprivacySubmitSelectedCoursesFormRequest) Get() *ToolDataprivacySubmitSelectedCoursesFormRequest {
	return v.value
}

func (v *NullableToolDataprivacySubmitSelectedCoursesFormRequest) Set(val *ToolDataprivacySubmitSelectedCoursesFormRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableToolDataprivacySubmitSelectedCoursesFormRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableToolDataprivacySubmitSelectedCoursesFormRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolDataprivacySubmitSelectedCoursesFormRequest(val *ToolDataprivacySubmitSelectedCoursesFormRequest) *NullableToolDataprivacySubmitSelectedCoursesFormRequest {
	return &NullableToolDataprivacySubmitSelectedCoursesFormRequest{value: val, isSet: true}
}

func (v NullableToolDataprivacySubmitSelectedCoursesFormRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolDataprivacySubmitSelectedCoursesFormRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


