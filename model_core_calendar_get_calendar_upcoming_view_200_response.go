/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCalendarGetCalendarUpcomingView200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarUpcomingView200Response{}

// CoreCalendarGetCalendarUpcomingView200Response struct for CoreCalendarGetCalendarUpcomingView200Response
type CoreCalendarGetCalendarUpcomingView200Response struct {
	// categoryid
	Categoryid *int32 `json:"categoryid,omitempty"`
	// courseid
	Courseid int32 `json:"courseid"`
	Date CoreCalendarGetCalendarDayView200ResponseNextperiod `json:"date"`
	// defaulteventcontext
	Defaulteventcontext int32 `json:"defaulteventcontext"`
	Events []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner `json:"events"`
	// filter_selector
	FilterSelector string `json:"filter_selector"`
	// isloggedin
	Isloggedin bool `json:"isloggedin"`
}

type _CoreCalendarGetCalendarUpcomingView200Response CoreCalendarGetCalendarUpcomingView200Response

// NewCoreCalendarGetCalendarUpcomingView200Response instantiates a new CoreCalendarGetCalendarUpcomingView200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarUpcomingView200Response(courseid int32, date CoreCalendarGetCalendarDayView200ResponseNextperiod, defaulteventcontext int32, events []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner, filterSelector string, isloggedin bool) *CoreCalendarGetCalendarUpcomingView200Response {
	this := CoreCalendarGetCalendarUpcomingView200Response{}
	var categoryid int32 = 0
	this.Categoryid = &categoryid
	this.Courseid = courseid
	this.Date = date
	this.Defaulteventcontext = defaulteventcontext
	this.Events = events
	this.FilterSelector = filterSelector
	this.Isloggedin = isloggedin
	return &this
}

// NewCoreCalendarGetCalendarUpcomingView200ResponseWithDefaults instantiates a new CoreCalendarGetCalendarUpcomingView200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarUpcomingView200ResponseWithDefaults() *CoreCalendarGetCalendarUpcomingView200Response {
	this := CoreCalendarGetCalendarUpcomingView200Response{}
	var categoryid int32 = 0
	this.Categoryid = &categoryid
	var defaulteventcontext int32 = 0
	this.Defaulteventcontext = defaulteventcontext
	var isloggedin bool = null
	this.Isloggedin = isloggedin
	return &this
}

// GetCategoryid returns the Categoryid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetCategoryid() int32 {
	if o == nil || IsNil(o.Categoryid) {
		var ret int32
		return ret
	}
	return *o.Categoryid
}

// GetCategoryidOk returns a tuple with the Categoryid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetCategoryidOk() (*int32, bool) {
	if o == nil || IsNil(o.Categoryid) {
		return nil, false
	}
	return o.Categoryid, true
}

// HasCategoryid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarUpcomingView200Response) HasCategoryid() bool {
	if o != nil && !IsNil(o.Categoryid) {
		return true
	}

	return false
}

// SetCategoryid gets a reference to the given int32 and assigns it to the Categoryid field.
func (o *CoreCalendarGetCalendarUpcomingView200Response) SetCategoryid(v int32) {
	o.Categoryid = &v
}

// GetCourseid returns the Courseid field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetCourseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetCourseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Courseid, true
}

// SetCourseid sets field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) SetCourseid(v int32) {
	o.Courseid = v
}

// GetDate returns the Date field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetDate() CoreCalendarGetCalendarDayView200ResponseNextperiod {
	if o == nil {
		var ret CoreCalendarGetCalendarDayView200ResponseNextperiod
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetDateOk() (*CoreCalendarGetCalendarDayView200ResponseNextperiod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) SetDate(v CoreCalendarGetCalendarDayView200ResponseNextperiod) {
	o.Date = v
}

// GetDefaulteventcontext returns the Defaulteventcontext field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetDefaulteventcontext() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Defaulteventcontext
}

// GetDefaulteventcontextOk returns a tuple with the Defaulteventcontext field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetDefaulteventcontextOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Defaulteventcontext, true
}

// SetDefaulteventcontext sets field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) SetDefaulteventcontext(v int32) {
	o.Defaulteventcontext = v
}

// GetEvents returns the Events field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetEvents() []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner {
	if o == nil {
		var ret []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetEventsOk() ([]CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) SetEvents(v []CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner) {
	o.Events = v
}

// GetFilterSelector returns the FilterSelector field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetFilterSelector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterSelector
}

// GetFilterSelectorOk returns a tuple with the FilterSelector field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetFilterSelectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterSelector, true
}

// SetFilterSelector sets field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) SetFilterSelector(v string) {
	o.FilterSelector = v
}

// GetIsloggedin returns the Isloggedin field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetIsloggedin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Isloggedin
}

// GetIsloggedinOk returns a tuple with the Isloggedin field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarUpcomingView200Response) GetIsloggedinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Isloggedin, true
}

// SetIsloggedin sets field value
func (o *CoreCalendarGetCalendarUpcomingView200Response) SetIsloggedin(v bool) {
	o.Isloggedin = v
}

func (o CoreCalendarGetCalendarUpcomingView200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarUpcomingView200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categoryid) {
		toSerialize["categoryid"] = o.Categoryid
	}
	toSerialize["courseid"] = o.Courseid
	toSerialize["date"] = o.Date
	toSerialize["defaulteventcontext"] = o.Defaulteventcontext
	toSerialize["events"] = o.Events
	toSerialize["filter_selector"] = o.FilterSelector
	toSerialize["isloggedin"] = o.Isloggedin
	return toSerialize, nil
}

func (o *CoreCalendarGetCalendarUpcomingView200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"courseid",
		"date",
		"defaulteventcontext",
		"events",
		"filter_selector",
		"isloggedin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCalendarGetCalendarUpcomingView200Response := _CoreCalendarGetCalendarUpcomingView200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCalendarGetCalendarUpcomingView200Response)

	if err != nil {
		return err
	}

	*o = CoreCalendarGetCalendarUpcomingView200Response(varCoreCalendarGetCalendarUpcomingView200Response)

	return err
}

type NullableCoreCalendarGetCalendarUpcomingView200Response struct {
	value *CoreCalendarGetCalendarUpcomingView200Response
	isSet bool
}

func (v NullableCoreCalendarGetCalendarUpcomingView200Response) Get() *CoreCalendarGetCalendarUpcomingView200Response {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarUpcomingView200Response) Set(val *CoreCalendarGetCalendarUpcomingView200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarUpcomingView200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarUpcomingView200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarUpcomingView200Response(val *CoreCalendarGetCalendarUpcomingView200Response) *NullableCoreCalendarGetCalendarUpcomingView200Response {
	return &NullableCoreCalendarGetCalendarUpcomingView200Response{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarUpcomingView200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarUpcomingView200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


