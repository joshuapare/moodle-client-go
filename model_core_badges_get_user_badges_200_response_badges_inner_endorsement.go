/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement{}

// CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement struct for CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement
type CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement struct {
	// Badge id
	Badgeid int32 `json:"badgeid"`
	// Claim comment
	Claimcomment string `json:"claimcomment"`
	// Claim URL
	Claimid string `json:"claimid"`
	// Date issued
	Dateissued int32 `json:"dateissued"`
	// Endorsement id
	Id int32 `json:"id"`
	// Endorsement issuer email
	Issueremail string `json:"issueremail"`
	// Endorsement issuer name
	Issuername string `json:"issuername"`
	// Endorsement issuer URL
	Issuerurl string `json:"issuerurl"`
}

type _CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement

// NewCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement instantiates a new CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement(badgeid int32, claimcomment string, claimid string, dateissued int32, id int32, issueremail string, issuername string, issuerurl string) *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement {
	this := CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement{}
	this.Badgeid = badgeid
	this.Claimcomment = claimcomment
	this.Claimid = claimid
	this.Dateissued = dateissued
	this.Id = id
	this.Issueremail = issueremail
	this.Issuername = issuername
	this.Issuerurl = issuerurl
	return &this
}

// NewCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsementWithDefaults instantiates a new CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsementWithDefaults() *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement {
	this := CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement{}
	var dateissued int32 = 0
	this.Dateissued = dateissued
	return &this
}

// GetBadgeid returns the Badgeid field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetBadgeid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Badgeid
}

// GetBadgeidOk returns a tuple with the Badgeid field value
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetBadgeidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Badgeid, true
}

// SetBadgeid sets field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) SetBadgeid(v int32) {
	o.Badgeid = v
}

// GetClaimcomment returns the Claimcomment field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetClaimcomment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Claimcomment
}

// GetClaimcommentOk returns a tuple with the Claimcomment field value
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetClaimcommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Claimcomment, true
}

// SetClaimcomment sets field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) SetClaimcomment(v string) {
	o.Claimcomment = v
}

// GetClaimid returns the Claimid field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetClaimid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Claimid
}

// GetClaimidOk returns a tuple with the Claimid field value
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetClaimidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Claimid, true
}

// SetClaimid sets field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) SetClaimid(v string) {
	o.Claimid = v
}

// GetDateissued returns the Dateissued field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetDateissued() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Dateissued
}

// GetDateissuedOk returns a tuple with the Dateissued field value
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetDateissuedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dateissued, true
}

// SetDateissued sets field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) SetDateissued(v int32) {
	o.Dateissued = v
}

// GetId returns the Id field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) SetId(v int32) {
	o.Id = v
}

// GetIssueremail returns the Issueremail field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetIssueremail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issueremail
}

// GetIssueremailOk returns a tuple with the Issueremail field value
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetIssueremailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issueremail, true
}

// SetIssueremail sets field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) SetIssueremail(v string) {
	o.Issueremail = v
}

// GetIssuername returns the Issuername field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetIssuername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuername
}

// GetIssuernameOk returns a tuple with the Issuername field value
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetIssuernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuername, true
}

// SetIssuername sets field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) SetIssuername(v string) {
	o.Issuername = v
}

// GetIssuerurl returns the Issuerurl field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetIssuerurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuerurl
}

// GetIssuerurlOk returns a tuple with the Issuerurl field value
// and a boolean to check if the value has been set.
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) GetIssuerurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuerurl, true
}

// SetIssuerurl sets field value
func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) SetIssuerurl(v string) {
	o.Issuerurl = v
}

func (o CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["badgeid"] = o.Badgeid
	toSerialize["claimcomment"] = o.Claimcomment
	toSerialize["claimid"] = o.Claimid
	toSerialize["dateissued"] = o.Dateissued
	toSerialize["id"] = o.Id
	toSerialize["issueremail"] = o.Issueremail
	toSerialize["issuername"] = o.Issuername
	toSerialize["issuerurl"] = o.Issuerurl
	return toSerialize, nil
}

func (o *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"badgeid",
		"claimcomment",
		"claimid",
		"dateissued",
		"id",
		"issueremail",
		"issuername",
		"issuerurl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement := _CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement)

	if err != nil {
		return err
	}

	*o = CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement(varCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement)

	return err
}

type NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement struct {
	value *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement
	isSet bool
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) Get() *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement {
	return v.value
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) Set(val *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement(val *CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) *NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement {
	return &NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement{value: val, isSet: true}
}

func (v NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


