/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreFilesUpload200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreFilesUpload200Response{}

// CoreFilesUpload200Response struct for CoreFilesUpload200Response
type CoreFilesUpload200Response struct {
	Component string `json:"component"`
	Contextid int32 `json:"contextid"`
	Filearea string `json:"filearea"`
	Filename string `json:"filename"`
	Filepath string `json:"filepath"`
	Itemid int32 `json:"itemid"`
	Url string `json:"url"`
}

type _CoreFilesUpload200Response CoreFilesUpload200Response

// NewCoreFilesUpload200Response instantiates a new CoreFilesUpload200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreFilesUpload200Response(component string, contextid int32, filearea string, filename string, filepath string, itemid int32, url string) *CoreFilesUpload200Response {
	this := CoreFilesUpload200Response{}
	this.Component = component
	this.Contextid = contextid
	this.Filearea = filearea
	this.Filename = filename
	this.Filepath = filepath
	this.Itemid = itemid
	this.Url = url
	return &this
}

// NewCoreFilesUpload200ResponseWithDefaults instantiates a new CoreFilesUpload200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreFilesUpload200ResponseWithDefaults() *CoreFilesUpload200Response {
	this := CoreFilesUpload200Response{}
	return &this
}

// GetComponent returns the Component field value
func (o *CoreFilesUpload200Response) GetComponent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUpload200Response) GetComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *CoreFilesUpload200Response) SetComponent(v string) {
	o.Component = v
}

// GetContextid returns the Contextid field value
func (o *CoreFilesUpload200Response) GetContextid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Contextid
}

// GetContextidOk returns a tuple with the Contextid field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUpload200Response) GetContextidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contextid, true
}

// SetContextid sets field value
func (o *CoreFilesUpload200Response) SetContextid(v int32) {
	o.Contextid = v
}

// GetFilearea returns the Filearea field value
func (o *CoreFilesUpload200Response) GetFilearea() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filearea
}

// GetFileareaOk returns a tuple with the Filearea field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUpload200Response) GetFileareaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filearea, true
}

// SetFilearea sets field value
func (o *CoreFilesUpload200Response) SetFilearea(v string) {
	o.Filearea = v
}

// GetFilename returns the Filename field value
func (o *CoreFilesUpload200Response) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUpload200Response) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *CoreFilesUpload200Response) SetFilename(v string) {
	o.Filename = v
}

// GetFilepath returns the Filepath field value
func (o *CoreFilesUpload200Response) GetFilepath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filepath
}

// GetFilepathOk returns a tuple with the Filepath field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUpload200Response) GetFilepathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filepath, true
}

// SetFilepath sets field value
func (o *CoreFilesUpload200Response) SetFilepath(v string) {
	o.Filepath = v
}

// GetItemid returns the Itemid field value
func (o *CoreFilesUpload200Response) GetItemid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Itemid
}

// GetItemidOk returns a tuple with the Itemid field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUpload200Response) GetItemidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Itemid, true
}

// SetItemid sets field value
func (o *CoreFilesUpload200Response) SetItemid(v int32) {
	o.Itemid = v
}

// GetUrl returns the Url field value
func (o *CoreFilesUpload200Response) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUpload200Response) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CoreFilesUpload200Response) SetUrl(v string) {
	o.Url = v
}

func (o CoreFilesUpload200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreFilesUpload200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["component"] = o.Component
	toSerialize["contextid"] = o.Contextid
	toSerialize["filearea"] = o.Filearea
	toSerialize["filename"] = o.Filename
	toSerialize["filepath"] = o.Filepath
	toSerialize["itemid"] = o.Itemid
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *CoreFilesUpload200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"component",
		"contextid",
		"filearea",
		"filename",
		"filepath",
		"itemid",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreFilesUpload200Response := _CoreFilesUpload200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreFilesUpload200Response)

	if err != nil {
		return err
	}

	*o = CoreFilesUpload200Response(varCoreFilesUpload200Response)

	return err
}

type NullableCoreFilesUpload200Response struct {
	value *CoreFilesUpload200Response
	isSet bool
}

func (v NullableCoreFilesUpload200Response) Get() *CoreFilesUpload200Response {
	return v.value
}

func (v *NullableCoreFilesUpload200Response) Set(val *CoreFilesUpload200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreFilesUpload200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreFilesUpload200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreFilesUpload200Response(val *CoreFilesUpload200Response) *NullableCoreFilesUpload200Response {
	return &NullableCoreFilesUpload200Response{value: val, isSet: true}
}

func (v NullableCoreFilesUpload200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreFilesUpload200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


