/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportCompetencyDataForReport200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportCompetencyDataForReport200Response{}

// ReportCompetencyDataForReport200Response struct for ReportCompetencyDataForReport200Response
type ReportCompetencyDataForReport200Response struct {
	Course CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse `json:"course"`
	// Course id
	Courseid int32 `json:"courseid"`
	// True if rating is push to user plans
	Pushratingstouserplans bool `json:"pushratingstouserplans"`
	User CoreCompetencyGradeCompetency200ResponseActionuser `json:"user"`
	Usercompetencies []ReportCompetencyDataForReport200ResponseUsercompetenciesInner `json:"usercompetencies"`
}

type _ReportCompetencyDataForReport200Response ReportCompetencyDataForReport200Response

// NewReportCompetencyDataForReport200Response instantiates a new ReportCompetencyDataForReport200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportCompetencyDataForReport200Response(course CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse, courseid int32, pushratingstouserplans bool, user CoreCompetencyGradeCompetency200ResponseActionuser, usercompetencies []ReportCompetencyDataForReport200ResponseUsercompetenciesInner) *ReportCompetencyDataForReport200Response {
	this := ReportCompetencyDataForReport200Response{}
	this.Course = course
	this.Courseid = courseid
	this.Pushratingstouserplans = pushratingstouserplans
	this.User = user
	this.Usercompetencies = usercompetencies
	return &this
}

// NewReportCompetencyDataForReport200ResponseWithDefaults instantiates a new ReportCompetencyDataForReport200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportCompetencyDataForReport200ResponseWithDefaults() *ReportCompetencyDataForReport200Response {
	this := ReportCompetencyDataForReport200Response{}
	var pushratingstouserplans bool = null
	this.Pushratingstouserplans = pushratingstouserplans
	return &this
}

// GetCourse returns the Course field value
func (o *ReportCompetencyDataForReport200Response) GetCourse() CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse {
	if o == nil {
		var ret CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse
		return ret
	}

	return o.Course
}

// GetCourseOk returns a tuple with the Course field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200Response) GetCourseOk() (*CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Course, true
}

// SetCourse sets field value
func (o *ReportCompetencyDataForReport200Response) SetCourse(v CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse) {
	o.Course = v
}

// GetCourseid returns the Courseid field value
func (o *ReportCompetencyDataForReport200Response) GetCourseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200Response) GetCourseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Courseid, true
}

// SetCourseid sets field value
func (o *ReportCompetencyDataForReport200Response) SetCourseid(v int32) {
	o.Courseid = v
}

// GetPushratingstouserplans returns the Pushratingstouserplans field value
func (o *ReportCompetencyDataForReport200Response) GetPushratingstouserplans() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pushratingstouserplans
}

// GetPushratingstouserplansOk returns a tuple with the Pushratingstouserplans field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200Response) GetPushratingstouserplansOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pushratingstouserplans, true
}

// SetPushratingstouserplans sets field value
func (o *ReportCompetencyDataForReport200Response) SetPushratingstouserplans(v bool) {
	o.Pushratingstouserplans = v
}

// GetUser returns the User field value
func (o *ReportCompetencyDataForReport200Response) GetUser() CoreCompetencyGradeCompetency200ResponseActionuser {
	if o == nil {
		var ret CoreCompetencyGradeCompetency200ResponseActionuser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200Response) GetUserOk() (*CoreCompetencyGradeCompetency200ResponseActionuser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ReportCompetencyDataForReport200Response) SetUser(v CoreCompetencyGradeCompetency200ResponseActionuser) {
	o.User = v
}

// GetUsercompetencies returns the Usercompetencies field value
func (o *ReportCompetencyDataForReport200Response) GetUsercompetencies() []ReportCompetencyDataForReport200ResponseUsercompetenciesInner {
	if o == nil {
		var ret []ReportCompetencyDataForReport200ResponseUsercompetenciesInner
		return ret
	}

	return o.Usercompetencies
}

// GetUsercompetenciesOk returns a tuple with the Usercompetencies field value
// and a boolean to check if the value has been set.
func (o *ReportCompetencyDataForReport200Response) GetUsercompetenciesOk() ([]ReportCompetencyDataForReport200ResponseUsercompetenciesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usercompetencies, true
}

// SetUsercompetencies sets field value
func (o *ReportCompetencyDataForReport200Response) SetUsercompetencies(v []ReportCompetencyDataForReport200ResponseUsercompetenciesInner) {
	o.Usercompetencies = v
}

func (o ReportCompetencyDataForReport200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportCompetencyDataForReport200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["course"] = o.Course
	toSerialize["courseid"] = o.Courseid
	toSerialize["pushratingstouserplans"] = o.Pushratingstouserplans
	toSerialize["user"] = o.User
	toSerialize["usercompetencies"] = o.Usercompetencies
	return toSerialize, nil
}

func (o *ReportCompetencyDataForReport200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"course",
		"courseid",
		"pushratingstouserplans",
		"user",
		"usercompetencies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportCompetencyDataForReport200Response := _ReportCompetencyDataForReport200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportCompetencyDataForReport200Response)

	if err != nil {
		return err
	}

	*o = ReportCompetencyDataForReport200Response(varReportCompetencyDataForReport200Response)

	return err
}

type NullableReportCompetencyDataForReport200Response struct {
	value *ReportCompetencyDataForReport200Response
	isSet bool
}

func (v NullableReportCompetencyDataForReport200Response) Get() *ReportCompetencyDataForReport200Response {
	return v.value
}

func (v *NullableReportCompetencyDataForReport200Response) Set(val *ReportCompetencyDataForReport200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReportCompetencyDataForReport200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReportCompetencyDataForReport200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportCompetencyDataForReport200Response(val *ReportCompetencyDataForReport200Response) *NullableReportCompetencyDataForReport200Response {
	return &NullableReportCompetencyDataForReport200Response{value: val, isSet: true}
}

func (v NullableReportCompetencyDataForReport200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportCompetencyDataForReport200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


