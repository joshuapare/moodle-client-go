/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModQuizGetUserAttemptsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModQuizGetUserAttemptsRequest{}

// ModQuizGetUserAttemptsRequest struct for ModQuizGetUserAttemptsRequest
type ModQuizGetUserAttemptsRequest struct {
	// whether to include previews or not
	Includepreviews *bool `json:"includepreviews,omitempty"`
	// quiz instance id
	Quizid int32 `json:"quizid"`
	// quiz status: all, finished or unfinished
	Status *string `json:"status,omitempty"`
	// user id, empty for current user
	Userid *int32 `json:"userid,omitempty"`
}

type _ModQuizGetUserAttemptsRequest ModQuizGetUserAttemptsRequest

// NewModQuizGetUserAttemptsRequest instantiates a new ModQuizGetUserAttemptsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModQuizGetUserAttemptsRequest(quizid int32) *ModQuizGetUserAttemptsRequest {
	this := ModQuizGetUserAttemptsRequest{}
	var includepreviews bool = false
	this.Includepreviews = &includepreviews
	this.Quizid = quizid
	var status string = "finished"
	this.Status = &status
	var userid int32 = 0
	this.Userid = &userid
	return &this
}

// NewModQuizGetUserAttemptsRequestWithDefaults instantiates a new ModQuizGetUserAttemptsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModQuizGetUserAttemptsRequestWithDefaults() *ModQuizGetUserAttemptsRequest {
	this := ModQuizGetUserAttemptsRequest{}
	var includepreviews bool = false
	this.Includepreviews = &includepreviews
	var status string = "finished"
	this.Status = &status
	var userid int32 = 0
	this.Userid = &userid
	return &this
}

// GetIncludepreviews returns the Includepreviews field value if set, zero value otherwise.
func (o *ModQuizGetUserAttemptsRequest) GetIncludepreviews() bool {
	if o == nil || IsNil(o.Includepreviews) {
		var ret bool
		return ret
	}
	return *o.Includepreviews
}

// GetIncludepreviewsOk returns a tuple with the Includepreviews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizGetUserAttemptsRequest) GetIncludepreviewsOk() (*bool, bool) {
	if o == nil || IsNil(o.Includepreviews) {
		return nil, false
	}
	return o.Includepreviews, true
}

// HasIncludepreviews returns a boolean if a field has been set.
func (o *ModQuizGetUserAttemptsRequest) HasIncludepreviews() bool {
	if o != nil && !IsNil(o.Includepreviews) {
		return true
	}

	return false
}

// SetIncludepreviews gets a reference to the given bool and assigns it to the Includepreviews field.
func (o *ModQuizGetUserAttemptsRequest) SetIncludepreviews(v bool) {
	o.Includepreviews = &v
}

// GetQuizid returns the Quizid field value
func (o *ModQuizGetUserAttemptsRequest) GetQuizid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quizid
}

// GetQuizidOk returns a tuple with the Quizid field value
// and a boolean to check if the value has been set.
func (o *ModQuizGetUserAttemptsRequest) GetQuizidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quizid, true
}

// SetQuizid sets field value
func (o *ModQuizGetUserAttemptsRequest) SetQuizid(v int32) {
	o.Quizid = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ModQuizGetUserAttemptsRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizGetUserAttemptsRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ModQuizGetUserAttemptsRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ModQuizGetUserAttemptsRequest) SetStatus(v string) {
	o.Status = &v
}

// GetUserid returns the Userid field value if set, zero value otherwise.
func (o *ModQuizGetUserAttemptsRequest) GetUserid() int32 {
	if o == nil || IsNil(o.Userid) {
		var ret int32
		return ret
	}
	return *o.Userid
}

// GetUseridOk returns a tuple with the Userid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizGetUserAttemptsRequest) GetUseridOk() (*int32, bool) {
	if o == nil || IsNil(o.Userid) {
		return nil, false
	}
	return o.Userid, true
}

// HasUserid returns a boolean if a field has been set.
func (o *ModQuizGetUserAttemptsRequest) HasUserid() bool {
	if o != nil && !IsNil(o.Userid) {
		return true
	}

	return false
}

// SetUserid gets a reference to the given int32 and assigns it to the Userid field.
func (o *ModQuizGetUserAttemptsRequest) SetUserid(v int32) {
	o.Userid = &v
}

func (o ModQuizGetUserAttemptsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModQuizGetUserAttemptsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Includepreviews) {
		toSerialize["includepreviews"] = o.Includepreviews
	}
	toSerialize["quizid"] = o.Quizid
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Userid) {
		toSerialize["userid"] = o.Userid
	}
	return toSerialize, nil
}

func (o *ModQuizGetUserAttemptsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quizid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModQuizGetUserAttemptsRequest := _ModQuizGetUserAttemptsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModQuizGetUserAttemptsRequest)

	if err != nil {
		return err
	}

	*o = ModQuizGetUserAttemptsRequest(varModQuizGetUserAttemptsRequest)

	return err
}

type NullableModQuizGetUserAttemptsRequest struct {
	value *ModQuizGetUserAttemptsRequest
	isSet bool
}

func (v NullableModQuizGetUserAttemptsRequest) Get() *ModQuizGetUserAttemptsRequest {
	return v.value
}

func (v *NullableModQuizGetUserAttemptsRequest) Set(val *ModQuizGetUserAttemptsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModQuizGetUserAttemptsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModQuizGetUserAttemptsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModQuizGetUserAttemptsRequest(val *ModQuizGetUserAttemptsRequest) *NullableModQuizGetUserAttemptsRequest {
	return &NullableModQuizGetUserAttemptsRequest{value: val, isSet: true}
}

func (v NullableModQuizGetUserAttemptsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModQuizGetUserAttemptsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


