/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolLpDataForCompetenciesManagePageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolLpDataForCompetenciesManagePageRequest{}

// ToolLpDataForCompetenciesManagePageRequest struct for ToolLpDataForCompetenciesManagePageRequest
type ToolLpDataForCompetenciesManagePageRequest struct {
	// The competency framework id
	Competencyframeworkid int32 `json:"competencyframeworkid"`
	// A search string
	Search *string `json:"search,omitempty"`
}

type _ToolLpDataForCompetenciesManagePageRequest ToolLpDataForCompetenciesManagePageRequest

// NewToolLpDataForCompetenciesManagePageRequest instantiates a new ToolLpDataForCompetenciesManagePageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolLpDataForCompetenciesManagePageRequest(competencyframeworkid int32) *ToolLpDataForCompetenciesManagePageRequest {
	this := ToolLpDataForCompetenciesManagePageRequest{}
	this.Competencyframeworkid = competencyframeworkid
	var search string = ""
	this.Search = &search
	return &this
}

// NewToolLpDataForCompetenciesManagePageRequestWithDefaults instantiates a new ToolLpDataForCompetenciesManagePageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolLpDataForCompetenciesManagePageRequestWithDefaults() *ToolLpDataForCompetenciesManagePageRequest {
	this := ToolLpDataForCompetenciesManagePageRequest{}
	var search string = ""
	this.Search = &search
	return &this
}

// GetCompetencyframeworkid returns the Competencyframeworkid field value
func (o *ToolLpDataForCompetenciesManagePageRequest) GetCompetencyframeworkid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Competencyframeworkid
}

// GetCompetencyframeworkidOk returns a tuple with the Competencyframeworkid field value
// and a boolean to check if the value has been set.
func (o *ToolLpDataForCompetenciesManagePageRequest) GetCompetencyframeworkidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Competencyframeworkid, true
}

// SetCompetencyframeworkid sets field value
func (o *ToolLpDataForCompetenciesManagePageRequest) SetCompetencyframeworkid(v int32) {
	o.Competencyframeworkid = v
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *ToolLpDataForCompetenciesManagePageRequest) GetSearch() string {
	if o == nil || IsNil(o.Search) {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolLpDataForCompetenciesManagePageRequest) GetSearchOk() (*string, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *ToolLpDataForCompetenciesManagePageRequest) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *ToolLpDataForCompetenciesManagePageRequest) SetSearch(v string) {
	o.Search = &v
}

func (o ToolLpDataForCompetenciesManagePageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolLpDataForCompetenciesManagePageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["competencyframeworkid"] = o.Competencyframeworkid
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	return toSerialize, nil
}

func (o *ToolLpDataForCompetenciesManagePageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"competencyframeworkid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolLpDataForCompetenciesManagePageRequest := _ToolLpDataForCompetenciesManagePageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolLpDataForCompetenciesManagePageRequest)

	if err != nil {
		return err
	}

	*o = ToolLpDataForCompetenciesManagePageRequest(varToolLpDataForCompetenciesManagePageRequest)

	return err
}

type NullableToolLpDataForCompetenciesManagePageRequest struct {
	value *ToolLpDataForCompetenciesManagePageRequest
	isSet bool
}

func (v NullableToolLpDataForCompetenciesManagePageRequest) Get() *ToolLpDataForCompetenciesManagePageRequest {
	return v.value
}

func (v *NullableToolLpDataForCompetenciesManagePageRequest) Set(val *ToolLpDataForCompetenciesManagePageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableToolLpDataForCompetenciesManagePageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableToolLpDataForCompetenciesManagePageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolLpDataForCompetenciesManagePageRequest(val *ToolLpDataForCompetenciesManagePageRequest) *NullableToolLpDataForCompetenciesManagePageRequest {
	return &NullableToolLpDataForCompetenciesManagePageRequest{value: val, isSet: true}
}

func (v NullableToolLpDataForCompetenciesManagePageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolLpDataForCompetenciesManagePageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


