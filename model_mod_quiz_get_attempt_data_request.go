/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModQuizGetAttemptDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModQuizGetAttemptDataRequest{}

// ModQuizGetAttemptDataRequest struct for ModQuizGetAttemptDataRequest
type ModQuizGetAttemptDataRequest struct {
	// attempt id
	Attemptid int32 `json:"attemptid"`
	// page number
	Page int32 `json:"page"`
	Preflightdata []ModQuizGetAttemptDataRequestPreflightdataInner `json:"preflightdata,omitempty"`
}

type _ModQuizGetAttemptDataRequest ModQuizGetAttemptDataRequest

// NewModQuizGetAttemptDataRequest instantiates a new ModQuizGetAttemptDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModQuizGetAttemptDataRequest(attemptid int32, page int32) *ModQuizGetAttemptDataRequest {
	this := ModQuizGetAttemptDataRequest{}
	this.Attemptid = attemptid
	this.Page = page
	return &this
}

// NewModQuizGetAttemptDataRequestWithDefaults instantiates a new ModQuizGetAttemptDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModQuizGetAttemptDataRequestWithDefaults() *ModQuizGetAttemptDataRequest {
	this := ModQuizGetAttemptDataRequest{}
	var attemptid int32 = null
	this.Attemptid = attemptid
	var page int32 = null
	this.Page = page
	return &this
}

// GetAttemptid returns the Attemptid field value
func (o *ModQuizGetAttemptDataRequest) GetAttemptid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Attemptid
}

// GetAttemptidOk returns a tuple with the Attemptid field value
// and a boolean to check if the value has been set.
func (o *ModQuizGetAttemptDataRequest) GetAttemptidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attemptid, true
}

// SetAttemptid sets field value
func (o *ModQuizGetAttemptDataRequest) SetAttemptid(v int32) {
	o.Attemptid = v
}

// GetPage returns the Page field value
func (o *ModQuizGetAttemptDataRequest) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *ModQuizGetAttemptDataRequest) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *ModQuizGetAttemptDataRequest) SetPage(v int32) {
	o.Page = v
}

// GetPreflightdata returns the Preflightdata field value if set, zero value otherwise.
func (o *ModQuizGetAttemptDataRequest) GetPreflightdata() []ModQuizGetAttemptDataRequestPreflightdataInner {
	if o == nil || IsNil(o.Preflightdata) {
		var ret []ModQuizGetAttemptDataRequestPreflightdataInner
		return ret
	}
	return o.Preflightdata
}

// GetPreflightdataOk returns a tuple with the Preflightdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModQuizGetAttemptDataRequest) GetPreflightdataOk() ([]ModQuizGetAttemptDataRequestPreflightdataInner, bool) {
	if o == nil || IsNil(o.Preflightdata) {
		return nil, false
	}
	return o.Preflightdata, true
}

// HasPreflightdata returns a boolean if a field has been set.
func (o *ModQuizGetAttemptDataRequest) HasPreflightdata() bool {
	if o != nil && !IsNil(o.Preflightdata) {
		return true
	}

	return false
}

// SetPreflightdata gets a reference to the given []ModQuizGetAttemptDataRequestPreflightdataInner and assigns it to the Preflightdata field.
func (o *ModQuizGetAttemptDataRequest) SetPreflightdata(v []ModQuizGetAttemptDataRequestPreflightdataInner) {
	o.Preflightdata = v
}

func (o ModQuizGetAttemptDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModQuizGetAttemptDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attemptid"] = o.Attemptid
	toSerialize["page"] = o.Page
	if !IsNil(o.Preflightdata) {
		toSerialize["preflightdata"] = o.Preflightdata
	}
	return toSerialize, nil
}

func (o *ModQuizGetAttemptDataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attemptid",
		"page",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModQuizGetAttemptDataRequest := _ModQuizGetAttemptDataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModQuizGetAttemptDataRequest)

	if err != nil {
		return err
	}

	*o = ModQuizGetAttemptDataRequest(varModQuizGetAttemptDataRequest)

	return err
}

type NullableModQuizGetAttemptDataRequest struct {
	value *ModQuizGetAttemptDataRequest
	isSet bool
}

func (v NullableModQuizGetAttemptDataRequest) Get() *ModQuizGetAttemptDataRequest {
	return v.value
}

func (v *NullableModQuizGetAttemptDataRequest) Set(val *ModQuizGetAttemptDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModQuizGetAttemptDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModQuizGetAttemptDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModQuizGetAttemptDataRequest(val *ModQuizGetAttemptDataRequest) *NullableModQuizGetAttemptDataRequest {
	return &NullableModQuizGetAttemptDataRequest{value: val, isSet: true}
}

func (v NullableModQuizGetAttemptDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModQuizGetAttemptDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


