/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreGroupDeleteGroupingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreGroupDeleteGroupingsRequest{}

// CoreGroupDeleteGroupingsRequest struct for CoreGroupDeleteGroupingsRequest
type CoreGroupDeleteGroupingsRequest struct {
	Groupingids []map[string]interface{} `json:"groupingids"`
}

type _CoreGroupDeleteGroupingsRequest CoreGroupDeleteGroupingsRequest

// NewCoreGroupDeleteGroupingsRequest instantiates a new CoreGroupDeleteGroupingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreGroupDeleteGroupingsRequest(groupingids []map[string]interface{}) *CoreGroupDeleteGroupingsRequest {
	this := CoreGroupDeleteGroupingsRequest{}
	this.Groupingids = groupingids
	return &this
}

// NewCoreGroupDeleteGroupingsRequestWithDefaults instantiates a new CoreGroupDeleteGroupingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreGroupDeleteGroupingsRequestWithDefaults() *CoreGroupDeleteGroupingsRequest {
	this := CoreGroupDeleteGroupingsRequest{}
	return &this
}

// GetGroupingids returns the Groupingids field value
func (o *CoreGroupDeleteGroupingsRequest) GetGroupingids() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Groupingids
}

// GetGroupingidsOk returns a tuple with the Groupingids field value
// and a boolean to check if the value has been set.
func (o *CoreGroupDeleteGroupingsRequest) GetGroupingidsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groupingids, true
}

// SetGroupingids sets field value
func (o *CoreGroupDeleteGroupingsRequest) SetGroupingids(v []map[string]interface{}) {
	o.Groupingids = v
}

func (o CoreGroupDeleteGroupingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreGroupDeleteGroupingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupingids"] = o.Groupingids
	return toSerialize, nil
}

func (o *CoreGroupDeleteGroupingsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupingids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreGroupDeleteGroupingsRequest := _CoreGroupDeleteGroupingsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreGroupDeleteGroupingsRequest)

	if err != nil {
		return err
	}

	*o = CoreGroupDeleteGroupingsRequest(varCoreGroupDeleteGroupingsRequest)

	return err
}

type NullableCoreGroupDeleteGroupingsRequest struct {
	value *CoreGroupDeleteGroupingsRequest
	isSet bool
}

func (v NullableCoreGroupDeleteGroupingsRequest) Get() *CoreGroupDeleteGroupingsRequest {
	return v.value
}

func (v *NullableCoreGroupDeleteGroupingsRequest) Set(val *CoreGroupDeleteGroupingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreGroupDeleteGroupingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreGroupDeleteGroupingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreGroupDeleteGroupingsRequest(val *CoreGroupDeleteGroupingsRequest) *NullableCoreGroupDeleteGroupingsRequest {
	return &NullableCoreGroupDeleteGroupingsRequest{value: val, isSet: true}
}

func (v NullableCoreGroupDeleteGroupingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreGroupDeleteGroupingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


