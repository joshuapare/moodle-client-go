/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCalendarGetCalendarEventById200ResponseEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarEventById200ResponseEvent{}

// CoreCalendarGetCalendarEventById200ResponseEvent struct for CoreCalendarGetCalendarEventById200ResponseEvent
type CoreCalendarGetCalendarEventById200ResponseEvent struct {
	Action *CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction `json:"action,omitempty"`
	// activityname
	Activityname *string `json:"activityname,omitempty"`
	// activitystr
	Activitystr *string `json:"activitystr,omitempty"`
	// candelete
	Candelete bool `json:"candelete"`
	// canedit
	Canedit bool `json:"canedit"`
	Category *CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory `json:"category,omitempty"`
	// categoryid
	Categoryid *int32 `json:"categoryid,omitempty"`
	// component
	Component *string `json:"component,omitempty"`
	Course *CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse `json:"course,omitempty"`
	// deleteurl
	Deleteurl string `json:"deleteurl"`
	// description
	Description *string `json:"description,omitempty"`
	// description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
	Descriptionformat *int32 `json:"descriptionformat,omitempty"`
	// editurl
	Editurl string `json:"editurl"`
	// eventcount
	Eventcount *int32 `json:"eventcount,omitempty"`
	// eventtype
	Eventtype string `json:"eventtype"`
	// formattedlocation
	Formattedlocation string `json:"formattedlocation"`
	// formattedtime
	Formattedtime string `json:"formattedtime"`
	// groupid
	Groupid *int32 `json:"groupid,omitempty"`
	// groupname
	Groupname *string `json:"groupname,omitempty"`
	Icon CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon `json:"icon"`
	// id
	Id int32 `json:"id"`
	// instance
	Instance *int32 `json:"instance,omitempty"`
	// isactionevent
	Isactionevent bool `json:"isactionevent"`
	// iscategoryevent
	Iscategoryevent bool `json:"iscategoryevent"`
	// iscourseevent
	Iscourseevent bool `json:"iscourseevent"`
	// location
	Location *string `json:"location,omitempty"`
	// modulename
	Modulename *string `json:"modulename,omitempty"`
	// name
	Name string `json:"name"`
	// normalisedeventtype
	Normalisedeventtype string `json:"normalisedeventtype"`
	// normalisedeventtypetext
	Normalisedeventtypetext string `json:"normalisedeventtypetext"`
	// overdue
	Overdue *bool `json:"overdue,omitempty"`
	// purpose
	Purpose string `json:"purpose"`
	// repeatid
	Repeatid *int32 `json:"repeatid,omitempty"`
	Subscription *CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription `json:"subscription,omitempty"`
	// timeduration
	Timeduration int32 `json:"timeduration"`
	// timemodified
	Timemodified int32 `json:"timemodified"`
	// timesort
	Timesort int32 `json:"timesort"`
	// timestart
	Timestart int32 `json:"timestart"`
	// timeusermidnight
	Timeusermidnight int32 `json:"timeusermidnight"`
	// url
	Url string `json:"url"`
	// userid
	Userid *int32 `json:"userid,omitempty"`
	// viewurl
	Viewurl string `json:"viewurl"`
	// visible
	Visible int32 `json:"visible"`
}

type _CoreCalendarGetCalendarEventById200ResponseEvent CoreCalendarGetCalendarEventById200ResponseEvent

// NewCoreCalendarGetCalendarEventById200ResponseEvent instantiates a new CoreCalendarGetCalendarEventById200ResponseEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarEventById200ResponseEvent(candelete bool, canedit bool, deleteurl string, editurl string, eventtype string, formattedlocation string, formattedtime string, icon CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon, id int32, isactionevent bool, iscategoryevent bool, iscourseevent bool, name string, normalisedeventtype string, normalisedeventtypetext string, purpose string, timeduration int32, timemodified int32, timesort int32, timestart int32, timeusermidnight int32, url string, viewurl string, visible int32) *CoreCalendarGetCalendarEventById200ResponseEvent {
	this := CoreCalendarGetCalendarEventById200ResponseEvent{}
	this.Candelete = candelete
	this.Canedit = canedit
	this.Deleteurl = deleteurl
	var descriptionformat int32 = 1
	this.Descriptionformat = &descriptionformat
	this.Editurl = editurl
	this.Eventtype = eventtype
	this.Formattedlocation = formattedlocation
	this.Formattedtime = formattedtime
	this.Icon = icon
	this.Id = id
	this.Isactionevent = isactionevent
	this.Iscategoryevent = iscategoryevent
	this.Iscourseevent = iscourseevent
	this.Name = name
	this.Normalisedeventtype = normalisedeventtype
	this.Normalisedeventtypetext = normalisedeventtypetext
	var overdue bool = false
	this.Overdue = &overdue
	this.Purpose = purpose
	this.Timeduration = timeduration
	this.Timemodified = timemodified
	this.Timesort = timesort
	this.Timestart = timestart
	this.Timeusermidnight = timeusermidnight
	this.Url = url
	this.Viewurl = viewurl
	this.Visible = visible
	return &this
}

// NewCoreCalendarGetCalendarEventById200ResponseEventWithDefaults instantiates a new CoreCalendarGetCalendarEventById200ResponseEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarEventById200ResponseEventWithDefaults() *CoreCalendarGetCalendarEventById200ResponseEvent {
	this := CoreCalendarGetCalendarEventById200ResponseEvent{}
	var descriptionformat int32 = 1
	this.Descriptionformat = &descriptionformat
	var overdue bool = false
	this.Overdue = &overdue
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetAction() CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction {
	if o == nil || IsNil(o.Action) {
		var ret CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetActionOk() (*CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction and assigns it to the Action field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetAction(v CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction) {
	o.Action = &v
}

// GetActivityname returns the Activityname field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetActivityname() string {
	if o == nil || IsNil(o.Activityname) {
		var ret string
		return ret
	}
	return *o.Activityname
}

// GetActivitynameOk returns a tuple with the Activityname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetActivitynameOk() (*string, bool) {
	if o == nil || IsNil(o.Activityname) {
		return nil, false
	}
	return o.Activityname, true
}

// HasActivityname returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasActivityname() bool {
	if o != nil && !IsNil(o.Activityname) {
		return true
	}

	return false
}

// SetActivityname gets a reference to the given string and assigns it to the Activityname field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetActivityname(v string) {
	o.Activityname = &v
}

// GetActivitystr returns the Activitystr field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetActivitystr() string {
	if o == nil || IsNil(o.Activitystr) {
		var ret string
		return ret
	}
	return *o.Activitystr
}

// GetActivitystrOk returns a tuple with the Activitystr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetActivitystrOk() (*string, bool) {
	if o == nil || IsNil(o.Activitystr) {
		return nil, false
	}
	return o.Activitystr, true
}

// HasActivitystr returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasActivitystr() bool {
	if o != nil && !IsNil(o.Activitystr) {
		return true
	}

	return false
}

// SetActivitystr gets a reference to the given string and assigns it to the Activitystr field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetActivitystr(v string) {
	o.Activitystr = &v
}

// GetCandelete returns the Candelete field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCandelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Candelete
}

// GetCandeleteOk returns a tuple with the Candelete field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCandeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Candelete, true
}

// SetCandelete sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetCandelete(v bool) {
	o.Candelete = v
}

// GetCanedit returns the Canedit field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCanedit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Canedit
}

// GetCaneditOk returns a tuple with the Canedit field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCaneditOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Canedit, true
}

// SetCanedit sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetCanedit(v bool) {
	o.Canedit = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCategory() CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory {
	if o == nil || IsNil(o.Category) {
		var ret CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCategoryOk() (*CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory and assigns it to the Category field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetCategory(v CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory) {
	o.Category = &v
}

// GetCategoryid returns the Categoryid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCategoryid() int32 {
	if o == nil || IsNil(o.Categoryid) {
		var ret int32
		return ret
	}
	return *o.Categoryid
}

// GetCategoryidOk returns a tuple with the Categoryid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCategoryidOk() (*int32, bool) {
	if o == nil || IsNil(o.Categoryid) {
		return nil, false
	}
	return o.Categoryid, true
}

// HasCategoryid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasCategoryid() bool {
	if o != nil && !IsNil(o.Categoryid) {
		return true
	}

	return false
}

// SetCategoryid gets a reference to the given int32 and assigns it to the Categoryid field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetCategoryid(v int32) {
	o.Categoryid = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetComponent() string {
	if o == nil || IsNil(o.Component) {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetComponentOk() (*string, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetComponent(v string) {
	o.Component = &v
}

// GetCourse returns the Course field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCourse() CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse {
	if o == nil || IsNil(o.Course) {
		var ret CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse
		return ret
	}
	return *o.Course
}

// GetCourseOk returns a tuple with the Course field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetCourseOk() (*CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse, bool) {
	if o == nil || IsNil(o.Course) {
		return nil, false
	}
	return o.Course, true
}

// HasCourse returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasCourse() bool {
	if o != nil && !IsNil(o.Course) {
		return true
	}

	return false
}

// SetCourse gets a reference to the given CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse and assigns it to the Course field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetCourse(v CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse) {
	o.Course = &v
}

// GetDeleteurl returns the Deleteurl field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetDeleteurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Deleteurl
}

// GetDeleteurlOk returns a tuple with the Deleteurl field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetDeleteurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleteurl, true
}

// SetDeleteurl sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetDeleteurl(v string) {
	o.Deleteurl = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetDescription(v string) {
	o.Description = &v
}

// GetDescriptionformat returns the Descriptionformat field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetDescriptionformat() int32 {
	if o == nil || IsNil(o.Descriptionformat) {
		var ret int32
		return ret
	}
	return *o.Descriptionformat
}

// GetDescriptionformatOk returns a tuple with the Descriptionformat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetDescriptionformatOk() (*int32, bool) {
	if o == nil || IsNil(o.Descriptionformat) {
		return nil, false
	}
	return o.Descriptionformat, true
}

// HasDescriptionformat returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasDescriptionformat() bool {
	if o != nil && !IsNil(o.Descriptionformat) {
		return true
	}

	return false
}

// SetDescriptionformat gets a reference to the given int32 and assigns it to the Descriptionformat field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetDescriptionformat(v int32) {
	o.Descriptionformat = &v
}

// GetEditurl returns the Editurl field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetEditurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Editurl
}

// GetEditurlOk returns a tuple with the Editurl field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetEditurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Editurl, true
}

// SetEditurl sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetEditurl(v string) {
	o.Editurl = v
}

// GetEventcount returns the Eventcount field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetEventcount() int32 {
	if o == nil || IsNil(o.Eventcount) {
		var ret int32
		return ret
	}
	return *o.Eventcount
}

// GetEventcountOk returns a tuple with the Eventcount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetEventcountOk() (*int32, bool) {
	if o == nil || IsNil(o.Eventcount) {
		return nil, false
	}
	return o.Eventcount, true
}

// HasEventcount returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasEventcount() bool {
	if o != nil && !IsNil(o.Eventcount) {
		return true
	}

	return false
}

// SetEventcount gets a reference to the given int32 and assigns it to the Eventcount field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetEventcount(v int32) {
	o.Eventcount = &v
}

// GetEventtype returns the Eventtype field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetEventtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Eventtype
}

// GetEventtypeOk returns a tuple with the Eventtype field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetEventtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Eventtype, true
}

// SetEventtype sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetEventtype(v string) {
	o.Eventtype = v
}

// GetFormattedlocation returns the Formattedlocation field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetFormattedlocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Formattedlocation
}

// GetFormattedlocationOk returns a tuple with the Formattedlocation field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetFormattedlocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Formattedlocation, true
}

// SetFormattedlocation sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetFormattedlocation(v string) {
	o.Formattedlocation = v
}

// GetFormattedtime returns the Formattedtime field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetFormattedtime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Formattedtime
}

// GetFormattedtimeOk returns a tuple with the Formattedtime field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetFormattedtimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Formattedtime, true
}

// SetFormattedtime sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetFormattedtime(v string) {
	o.Formattedtime = v
}

// GetGroupid returns the Groupid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetGroupid() int32 {
	if o == nil || IsNil(o.Groupid) {
		var ret int32
		return ret
	}
	return *o.Groupid
}

// GetGroupidOk returns a tuple with the Groupid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetGroupidOk() (*int32, bool) {
	if o == nil || IsNil(o.Groupid) {
		return nil, false
	}
	return o.Groupid, true
}

// HasGroupid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasGroupid() bool {
	if o != nil && !IsNil(o.Groupid) {
		return true
	}

	return false
}

// SetGroupid gets a reference to the given int32 and assigns it to the Groupid field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetGroupid(v int32) {
	o.Groupid = &v
}

// GetGroupname returns the Groupname field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetGroupname() string {
	if o == nil || IsNil(o.Groupname) {
		var ret string
		return ret
	}
	return *o.Groupname
}

// GetGroupnameOk returns a tuple with the Groupname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetGroupnameOk() (*string, bool) {
	if o == nil || IsNil(o.Groupname) {
		return nil, false
	}
	return o.Groupname, true
}

// HasGroupname returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasGroupname() bool {
	if o != nil && !IsNil(o.Groupname) {
		return true
	}

	return false
}

// SetGroupname gets a reference to the given string and assigns it to the Groupname field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetGroupname(v string) {
	o.Groupname = &v
}

// GetIcon returns the Icon field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIcon() CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon {
	if o == nil {
		var ret CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIconOk() (*CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetIcon(v CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon) {
	o.Icon = v
}

// GetId returns the Id field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetId(v int32) {
	o.Id = v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetInstance() int32 {
	if o == nil || IsNil(o.Instance) {
		var ret int32
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetInstanceOk() (*int32, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given int32 and assigns it to the Instance field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetInstance(v int32) {
	o.Instance = &v
}

// GetIsactionevent returns the Isactionevent field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIsactionevent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Isactionevent
}

// GetIsactioneventOk returns a tuple with the Isactionevent field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIsactioneventOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Isactionevent, true
}

// SetIsactionevent sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetIsactionevent(v bool) {
	o.Isactionevent = v
}

// GetIscategoryevent returns the Iscategoryevent field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIscategoryevent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Iscategoryevent
}

// GetIscategoryeventOk returns a tuple with the Iscategoryevent field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIscategoryeventOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iscategoryevent, true
}

// SetIscategoryevent sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetIscategoryevent(v bool) {
	o.Iscategoryevent = v
}

// GetIscourseevent returns the Iscourseevent field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIscourseevent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Iscourseevent
}

// GetIscourseeventOk returns a tuple with the Iscourseevent field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetIscourseeventOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iscourseevent, true
}

// SetIscourseevent sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetIscourseevent(v bool) {
	o.Iscourseevent = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetLocation(v string) {
	o.Location = &v
}

// GetModulename returns the Modulename field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetModulename() string {
	if o == nil || IsNil(o.Modulename) {
		var ret string
		return ret
	}
	return *o.Modulename
}

// GetModulenameOk returns a tuple with the Modulename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetModulenameOk() (*string, bool) {
	if o == nil || IsNil(o.Modulename) {
		return nil, false
	}
	return o.Modulename, true
}

// HasModulename returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasModulename() bool {
	if o != nil && !IsNil(o.Modulename) {
		return true
	}

	return false
}

// SetModulename gets a reference to the given string and assigns it to the Modulename field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetModulename(v string) {
	o.Modulename = &v
}

// GetName returns the Name field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetName(v string) {
	o.Name = v
}

// GetNormalisedeventtype returns the Normalisedeventtype field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetNormalisedeventtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Normalisedeventtype
}

// GetNormalisedeventtypeOk returns a tuple with the Normalisedeventtype field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetNormalisedeventtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Normalisedeventtype, true
}

// SetNormalisedeventtype sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetNormalisedeventtype(v string) {
	o.Normalisedeventtype = v
}

// GetNormalisedeventtypetext returns the Normalisedeventtypetext field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetNormalisedeventtypetext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Normalisedeventtypetext
}

// GetNormalisedeventtypetextOk returns a tuple with the Normalisedeventtypetext field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetNormalisedeventtypetextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Normalisedeventtypetext, true
}

// SetNormalisedeventtypetext sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetNormalisedeventtypetext(v string) {
	o.Normalisedeventtypetext = v
}

// GetOverdue returns the Overdue field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetOverdue() bool {
	if o == nil || IsNil(o.Overdue) {
		var ret bool
		return ret
	}
	return *o.Overdue
}

// GetOverdueOk returns a tuple with the Overdue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetOverdueOk() (*bool, bool) {
	if o == nil || IsNil(o.Overdue) {
		return nil, false
	}
	return o.Overdue, true
}

// HasOverdue returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasOverdue() bool {
	if o != nil && !IsNil(o.Overdue) {
		return true
	}

	return false
}

// SetOverdue gets a reference to the given bool and assigns it to the Overdue field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetOverdue(v bool) {
	o.Overdue = &v
}

// GetPurpose returns the Purpose field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetPurpose(v string) {
	o.Purpose = v
}

// GetRepeatid returns the Repeatid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetRepeatid() int32 {
	if o == nil || IsNil(o.Repeatid) {
		var ret int32
		return ret
	}
	return *o.Repeatid
}

// GetRepeatidOk returns a tuple with the Repeatid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetRepeatidOk() (*int32, bool) {
	if o == nil || IsNil(o.Repeatid) {
		return nil, false
	}
	return o.Repeatid, true
}

// HasRepeatid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasRepeatid() bool {
	if o != nil && !IsNil(o.Repeatid) {
		return true
	}

	return false
}

// SetRepeatid gets a reference to the given int32 and assigns it to the Repeatid field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetRepeatid(v int32) {
	o.Repeatid = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetSubscription() CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription {
	if o == nil || IsNil(o.Subscription) {
		var ret CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetSubscriptionOk() (*CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription and assigns it to the Subscription field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetSubscription(v CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription) {
	o.Subscription = &v
}

// GetTimeduration returns the Timeduration field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimeduration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeduration
}

// GetTimedurationOk returns a tuple with the Timeduration field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimedurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeduration, true
}

// SetTimeduration sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetTimeduration(v int32) {
	o.Timeduration = v
}

// GetTimemodified returns the Timemodified field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimemodified() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timemodified
}

// GetTimemodifiedOk returns a tuple with the Timemodified field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimemodifiedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timemodified, true
}

// SetTimemodified sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetTimemodified(v int32) {
	o.Timemodified = v
}

// GetTimesort returns the Timesort field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimesort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timesort
}

// GetTimesortOk returns a tuple with the Timesort field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimesortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timesort, true
}

// SetTimesort sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetTimesort(v int32) {
	o.Timesort = v
}

// GetTimestart returns the Timestart field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimestart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestart
}

// GetTimestartOk returns a tuple with the Timestart field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimestartOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestart, true
}

// SetTimestart sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetTimestart(v int32) {
	o.Timestart = v
}

// GetTimeusermidnight returns the Timeusermidnight field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimeusermidnight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeusermidnight
}

// GetTimeusermidnightOk returns a tuple with the Timeusermidnight field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetTimeusermidnightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeusermidnight, true
}

// SetTimeusermidnight sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetTimeusermidnight(v int32) {
	o.Timeusermidnight = v
}

// GetUrl returns the Url field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetUrl(v string) {
	o.Url = v
}

// GetUserid returns the Userid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetUserid() int32 {
	if o == nil || IsNil(o.Userid) {
		var ret int32
		return ret
	}
	return *o.Userid
}

// GetUseridOk returns a tuple with the Userid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetUseridOk() (*int32, bool) {
	if o == nil || IsNil(o.Userid) {
		return nil, false
	}
	return o.Userid, true
}

// HasUserid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) HasUserid() bool {
	if o != nil && !IsNil(o.Userid) {
		return true
	}

	return false
}

// SetUserid gets a reference to the given int32 and assigns it to the Userid field.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetUserid(v int32) {
	o.Userid = &v
}

// GetViewurl returns the Viewurl field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetViewurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Viewurl
}

// GetViewurlOk returns a tuple with the Viewurl field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetViewurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Viewurl, true
}

// SetViewurl sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetViewurl(v string) {
	o.Viewurl = v
}

// GetVisible returns the Visible field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetVisible() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) GetVisibleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visible, true
}

// SetVisible sets field value
func (o *CoreCalendarGetCalendarEventById200ResponseEvent) SetVisible(v int32) {
	o.Visible = v
}

func (o CoreCalendarGetCalendarEventById200ResponseEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarEventById200ResponseEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Activityname) {
		toSerialize["activityname"] = o.Activityname
	}
	if !IsNil(o.Activitystr) {
		toSerialize["activitystr"] = o.Activitystr
	}
	toSerialize["candelete"] = o.Candelete
	toSerialize["canedit"] = o.Canedit
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Categoryid) {
		toSerialize["categoryid"] = o.Categoryid
	}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.Course) {
		toSerialize["course"] = o.Course
	}
	toSerialize["deleteurl"] = o.Deleteurl
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Descriptionformat) {
		toSerialize["descriptionformat"] = o.Descriptionformat
	}
	toSerialize["editurl"] = o.Editurl
	if !IsNil(o.Eventcount) {
		toSerialize["eventcount"] = o.Eventcount
	}
	toSerialize["eventtype"] = o.Eventtype
	toSerialize["formattedlocation"] = o.Formattedlocation
	toSerialize["formattedtime"] = o.Formattedtime
	if !IsNil(o.Groupid) {
		toSerialize["groupid"] = o.Groupid
	}
	if !IsNil(o.Groupname) {
		toSerialize["groupname"] = o.Groupname
	}
	toSerialize["icon"] = o.Icon
	toSerialize["id"] = o.Id
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	toSerialize["isactionevent"] = o.Isactionevent
	toSerialize["iscategoryevent"] = o.Iscategoryevent
	toSerialize["iscourseevent"] = o.Iscourseevent
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Modulename) {
		toSerialize["modulename"] = o.Modulename
	}
	toSerialize["name"] = o.Name
	toSerialize["normalisedeventtype"] = o.Normalisedeventtype
	toSerialize["normalisedeventtypetext"] = o.Normalisedeventtypetext
	if !IsNil(o.Overdue) {
		toSerialize["overdue"] = o.Overdue
	}
	toSerialize["purpose"] = o.Purpose
	if !IsNil(o.Repeatid) {
		toSerialize["repeatid"] = o.Repeatid
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	toSerialize["timeduration"] = o.Timeduration
	toSerialize["timemodified"] = o.Timemodified
	toSerialize["timesort"] = o.Timesort
	toSerialize["timestart"] = o.Timestart
	toSerialize["timeusermidnight"] = o.Timeusermidnight
	toSerialize["url"] = o.Url
	if !IsNil(o.Userid) {
		toSerialize["userid"] = o.Userid
	}
	toSerialize["viewurl"] = o.Viewurl
	toSerialize["visible"] = o.Visible
	return toSerialize, nil
}

func (o *CoreCalendarGetCalendarEventById200ResponseEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"candelete",
		"canedit",
		"deleteurl",
		"editurl",
		"eventtype",
		"formattedlocation",
		"formattedtime",
		"icon",
		"id",
		"isactionevent",
		"iscategoryevent",
		"iscourseevent",
		"name",
		"normalisedeventtype",
		"normalisedeventtypetext",
		"purpose",
		"timeduration",
		"timemodified",
		"timesort",
		"timestart",
		"timeusermidnight",
		"url",
		"viewurl",
		"visible",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCalendarGetCalendarEventById200ResponseEvent := _CoreCalendarGetCalendarEventById200ResponseEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCalendarGetCalendarEventById200ResponseEvent)

	if err != nil {
		return err
	}

	*o = CoreCalendarGetCalendarEventById200ResponseEvent(varCoreCalendarGetCalendarEventById200ResponseEvent)

	return err
}

type NullableCoreCalendarGetCalendarEventById200ResponseEvent struct {
	value *CoreCalendarGetCalendarEventById200ResponseEvent
	isSet bool
}

func (v NullableCoreCalendarGetCalendarEventById200ResponseEvent) Get() *CoreCalendarGetCalendarEventById200ResponseEvent {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarEventById200ResponseEvent) Set(val *CoreCalendarGetCalendarEventById200ResponseEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarEventById200ResponseEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarEventById200ResponseEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarEventById200ResponseEvent(val *CoreCalendarGetCalendarEventById200ResponseEvent) *NullableCoreCalendarGetCalendarEventById200ResponseEvent {
	return &NullableCoreCalendarGetCalendarEventById200ResponseEvent{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarEventById200ResponseEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarEventById200ResponseEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


