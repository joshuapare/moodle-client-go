/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreCalendarGetCalendarDayView200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCalendarGetCalendarDayView200Response{}

// CoreCalendarGetCalendarDayView200Response struct for CoreCalendarGetCalendarDayView200Response
type CoreCalendarGetCalendarDayView200Response struct {
	// categoryid
	Categoryid *int32 `json:"categoryid,omitempty"`
	// courseid
	Courseid int32 `json:"courseid"`
	Date CoreCalendarGetCalendarDayView200ResponseDate `json:"date"`
	// defaulteventcontext
	Defaulteventcontext int32 `json:"defaulteventcontext"`
	Events []CoreCalendarGetCalendarDayView200ResponseEventsInner `json:"events"`
	// filter_selector
	FilterSelector string `json:"filter_selector"`
	// larrow
	Larrow string `json:"larrow"`
	// neweventtimestamp
	Neweventtimestamp int32 `json:"neweventtimestamp"`
	Nextperiod CoreCalendarGetCalendarDayView200ResponseNextperiod `json:"nextperiod"`
	// nextperiodlink
	Nextperiodlink string `json:"nextperiodlink"`
	// nextperiodname
	Nextperiodname string `json:"nextperiodname"`
	// periodname
	Periodname string `json:"periodname"`
	Previousperiod CoreCalendarGetCalendarDayView200ResponseNextperiod `json:"previousperiod"`
	// previousperiodlink
	Previousperiodlink string `json:"previousperiodlink"`
	// previousperiodname
	Previousperiodname string `json:"previousperiodname"`
	// rarrow
	Rarrow string `json:"rarrow"`
}

type _CoreCalendarGetCalendarDayView200Response CoreCalendarGetCalendarDayView200Response

// NewCoreCalendarGetCalendarDayView200Response instantiates a new CoreCalendarGetCalendarDayView200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalendarGetCalendarDayView200Response(courseid int32, date CoreCalendarGetCalendarDayView200ResponseDate, defaulteventcontext int32, events []CoreCalendarGetCalendarDayView200ResponseEventsInner, filterSelector string, larrow string, neweventtimestamp int32, nextperiod CoreCalendarGetCalendarDayView200ResponseNextperiod, nextperiodlink string, nextperiodname string, periodname string, previousperiod CoreCalendarGetCalendarDayView200ResponseNextperiod, previousperiodlink string, previousperiodname string, rarrow string) *CoreCalendarGetCalendarDayView200Response {
	this := CoreCalendarGetCalendarDayView200Response{}
	var categoryid int32 = 0
	this.Categoryid = &categoryid
	this.Courseid = courseid
	this.Date = date
	this.Defaulteventcontext = defaulteventcontext
	this.Events = events
	this.FilterSelector = filterSelector
	this.Larrow = larrow
	this.Neweventtimestamp = neweventtimestamp
	this.Nextperiod = nextperiod
	this.Nextperiodlink = nextperiodlink
	this.Nextperiodname = nextperiodname
	this.Periodname = periodname
	this.Previousperiod = previousperiod
	this.Previousperiodlink = previousperiodlink
	this.Previousperiodname = previousperiodname
	this.Rarrow = rarrow
	return &this
}

// NewCoreCalendarGetCalendarDayView200ResponseWithDefaults instantiates a new CoreCalendarGetCalendarDayView200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalendarGetCalendarDayView200ResponseWithDefaults() *CoreCalendarGetCalendarDayView200Response {
	this := CoreCalendarGetCalendarDayView200Response{}
	var categoryid int32 = 0
	this.Categoryid = &categoryid
	var defaulteventcontext int32 = 0
	this.Defaulteventcontext = defaulteventcontext
	var filterSelector string = "null"
	this.FilterSelector = filterSelector
	var larrow string = "null"
	this.Larrow = larrow
	var neweventtimestamp int32 = null
	this.Neweventtimestamp = neweventtimestamp
	var nextperiodlink string = "null"
	this.Nextperiodlink = nextperiodlink
	var nextperiodname string = "null"
	this.Nextperiodname = nextperiodname
	var periodname string = "null"
	this.Periodname = periodname
	var previousperiodlink string = "null"
	this.Previousperiodlink = previousperiodlink
	var previousperiodname string = "null"
	this.Previousperiodname = previousperiodname
	var rarrow string = "null"
	this.Rarrow = rarrow
	return &this
}

// GetCategoryid returns the Categoryid field value if set, zero value otherwise.
func (o *CoreCalendarGetCalendarDayView200Response) GetCategoryid() int32 {
	if o == nil || IsNil(o.Categoryid) {
		var ret int32
		return ret
	}
	return *o.Categoryid
}

// GetCategoryidOk returns a tuple with the Categoryid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetCategoryidOk() (*int32, bool) {
	if o == nil || IsNil(o.Categoryid) {
		return nil, false
	}
	return o.Categoryid, true
}

// HasCategoryid returns a boolean if a field has been set.
func (o *CoreCalendarGetCalendarDayView200Response) HasCategoryid() bool {
	if o != nil && !IsNil(o.Categoryid) {
		return true
	}

	return false
}

// SetCategoryid gets a reference to the given int32 and assigns it to the Categoryid field.
func (o *CoreCalendarGetCalendarDayView200Response) SetCategoryid(v int32) {
	o.Categoryid = &v
}

// GetCourseid returns the Courseid field value
func (o *CoreCalendarGetCalendarDayView200Response) GetCourseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Courseid
}

// GetCourseidOk returns a tuple with the Courseid field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetCourseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Courseid, true
}

// SetCourseid sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetCourseid(v int32) {
	o.Courseid = v
}

// GetDate returns the Date field value
func (o *CoreCalendarGetCalendarDayView200Response) GetDate() CoreCalendarGetCalendarDayView200ResponseDate {
	if o == nil {
		var ret CoreCalendarGetCalendarDayView200ResponseDate
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetDateOk() (*CoreCalendarGetCalendarDayView200ResponseDate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetDate(v CoreCalendarGetCalendarDayView200ResponseDate) {
	o.Date = v
}

// GetDefaulteventcontext returns the Defaulteventcontext field value
func (o *CoreCalendarGetCalendarDayView200Response) GetDefaulteventcontext() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Defaulteventcontext
}

// GetDefaulteventcontextOk returns a tuple with the Defaulteventcontext field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetDefaulteventcontextOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Defaulteventcontext, true
}

// SetDefaulteventcontext sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetDefaulteventcontext(v int32) {
	o.Defaulteventcontext = v
}

// GetEvents returns the Events field value
func (o *CoreCalendarGetCalendarDayView200Response) GetEvents() []CoreCalendarGetCalendarDayView200ResponseEventsInner {
	if o == nil {
		var ret []CoreCalendarGetCalendarDayView200ResponseEventsInner
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetEventsOk() ([]CoreCalendarGetCalendarDayView200ResponseEventsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetEvents(v []CoreCalendarGetCalendarDayView200ResponseEventsInner) {
	o.Events = v
}

// GetFilterSelector returns the FilterSelector field value
func (o *CoreCalendarGetCalendarDayView200Response) GetFilterSelector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterSelector
}

// GetFilterSelectorOk returns a tuple with the FilterSelector field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetFilterSelectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterSelector, true
}

// SetFilterSelector sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetFilterSelector(v string) {
	o.FilterSelector = v
}

// GetLarrow returns the Larrow field value
func (o *CoreCalendarGetCalendarDayView200Response) GetLarrow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Larrow
}

// GetLarrowOk returns a tuple with the Larrow field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetLarrowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Larrow, true
}

// SetLarrow sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetLarrow(v string) {
	o.Larrow = v
}

// GetNeweventtimestamp returns the Neweventtimestamp field value
func (o *CoreCalendarGetCalendarDayView200Response) GetNeweventtimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Neweventtimestamp
}

// GetNeweventtimestampOk returns a tuple with the Neweventtimestamp field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetNeweventtimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Neweventtimestamp, true
}

// SetNeweventtimestamp sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetNeweventtimestamp(v int32) {
	o.Neweventtimestamp = v
}

// GetNextperiod returns the Nextperiod field value
func (o *CoreCalendarGetCalendarDayView200Response) GetNextperiod() CoreCalendarGetCalendarDayView200ResponseNextperiod {
	if o == nil {
		var ret CoreCalendarGetCalendarDayView200ResponseNextperiod
		return ret
	}

	return o.Nextperiod
}

// GetNextperiodOk returns a tuple with the Nextperiod field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetNextperiodOk() (*CoreCalendarGetCalendarDayView200ResponseNextperiod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nextperiod, true
}

// SetNextperiod sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetNextperiod(v CoreCalendarGetCalendarDayView200ResponseNextperiod) {
	o.Nextperiod = v
}

// GetNextperiodlink returns the Nextperiodlink field value
func (o *CoreCalendarGetCalendarDayView200Response) GetNextperiodlink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nextperiodlink
}

// GetNextperiodlinkOk returns a tuple with the Nextperiodlink field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetNextperiodlinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nextperiodlink, true
}

// SetNextperiodlink sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetNextperiodlink(v string) {
	o.Nextperiodlink = v
}

// GetNextperiodname returns the Nextperiodname field value
func (o *CoreCalendarGetCalendarDayView200Response) GetNextperiodname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nextperiodname
}

// GetNextperiodnameOk returns a tuple with the Nextperiodname field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetNextperiodnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nextperiodname, true
}

// SetNextperiodname sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetNextperiodname(v string) {
	o.Nextperiodname = v
}

// GetPeriodname returns the Periodname field value
func (o *CoreCalendarGetCalendarDayView200Response) GetPeriodname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Periodname
}

// GetPeriodnameOk returns a tuple with the Periodname field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetPeriodnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Periodname, true
}

// SetPeriodname sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetPeriodname(v string) {
	o.Periodname = v
}

// GetPreviousperiod returns the Previousperiod field value
func (o *CoreCalendarGetCalendarDayView200Response) GetPreviousperiod() CoreCalendarGetCalendarDayView200ResponseNextperiod {
	if o == nil {
		var ret CoreCalendarGetCalendarDayView200ResponseNextperiod
		return ret
	}

	return o.Previousperiod
}

// GetPreviousperiodOk returns a tuple with the Previousperiod field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetPreviousperiodOk() (*CoreCalendarGetCalendarDayView200ResponseNextperiod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Previousperiod, true
}

// SetPreviousperiod sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetPreviousperiod(v CoreCalendarGetCalendarDayView200ResponseNextperiod) {
	o.Previousperiod = v
}

// GetPreviousperiodlink returns the Previousperiodlink field value
func (o *CoreCalendarGetCalendarDayView200Response) GetPreviousperiodlink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Previousperiodlink
}

// GetPreviousperiodlinkOk returns a tuple with the Previousperiodlink field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetPreviousperiodlinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Previousperiodlink, true
}

// SetPreviousperiodlink sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetPreviousperiodlink(v string) {
	o.Previousperiodlink = v
}

// GetPreviousperiodname returns the Previousperiodname field value
func (o *CoreCalendarGetCalendarDayView200Response) GetPreviousperiodname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Previousperiodname
}

// GetPreviousperiodnameOk returns a tuple with the Previousperiodname field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetPreviousperiodnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Previousperiodname, true
}

// SetPreviousperiodname sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetPreviousperiodname(v string) {
	o.Previousperiodname = v
}

// GetRarrow returns the Rarrow field value
func (o *CoreCalendarGetCalendarDayView200Response) GetRarrow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rarrow
}

// GetRarrowOk returns a tuple with the Rarrow field value
// and a boolean to check if the value has been set.
func (o *CoreCalendarGetCalendarDayView200Response) GetRarrowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rarrow, true
}

// SetRarrow sets field value
func (o *CoreCalendarGetCalendarDayView200Response) SetRarrow(v string) {
	o.Rarrow = v
}

func (o CoreCalendarGetCalendarDayView200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCalendarGetCalendarDayView200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categoryid) {
		toSerialize["categoryid"] = o.Categoryid
	}
	toSerialize["courseid"] = o.Courseid
	toSerialize["date"] = o.Date
	toSerialize["defaulteventcontext"] = o.Defaulteventcontext
	toSerialize["events"] = o.Events
	toSerialize["filter_selector"] = o.FilterSelector
	toSerialize["larrow"] = o.Larrow
	toSerialize["neweventtimestamp"] = o.Neweventtimestamp
	toSerialize["nextperiod"] = o.Nextperiod
	toSerialize["nextperiodlink"] = o.Nextperiodlink
	toSerialize["nextperiodname"] = o.Nextperiodname
	toSerialize["periodname"] = o.Periodname
	toSerialize["previousperiod"] = o.Previousperiod
	toSerialize["previousperiodlink"] = o.Previousperiodlink
	toSerialize["previousperiodname"] = o.Previousperiodname
	toSerialize["rarrow"] = o.Rarrow
	return toSerialize, nil
}

func (o *CoreCalendarGetCalendarDayView200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"courseid",
		"date",
		"defaulteventcontext",
		"events",
		"filter_selector",
		"larrow",
		"neweventtimestamp",
		"nextperiod",
		"nextperiodlink",
		"nextperiodname",
		"periodname",
		"previousperiod",
		"previousperiodlink",
		"previousperiodname",
		"rarrow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreCalendarGetCalendarDayView200Response := _CoreCalendarGetCalendarDayView200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreCalendarGetCalendarDayView200Response)

	if err != nil {
		return err
	}

	*o = CoreCalendarGetCalendarDayView200Response(varCoreCalendarGetCalendarDayView200Response)

	return err
}

type NullableCoreCalendarGetCalendarDayView200Response struct {
	value *CoreCalendarGetCalendarDayView200Response
	isSet bool
}

func (v NullableCoreCalendarGetCalendarDayView200Response) Get() *CoreCalendarGetCalendarDayView200Response {
	return v.value
}

func (v *NullableCoreCalendarGetCalendarDayView200Response) Set(val *CoreCalendarGetCalendarDayView200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalendarGetCalendarDayView200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalendarGetCalendarDayView200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalendarGetCalendarDayView200Response(val *CoreCalendarGetCalendarDayView200Response) *NullableCoreCalendarGetCalendarDayView200Response {
	return &NullableCoreCalendarGetCalendarDayView200Response{value: val, isSet: true}
}

func (v NullableCoreCalendarGetCalendarDayView200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalendarGetCalendarDayView200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


