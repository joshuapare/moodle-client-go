/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessagePopupGetPopupNotificationsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagePopupGetPopupNotificationsRequest{}

// MessagePopupGetPopupNotificationsRequest struct for MessagePopupGetPopupNotificationsRequest
type MessagePopupGetPopupNotificationsRequest struct {
	// the number of results to return
	Limit *int32 `json:"limit,omitempty"`
	// true for ordering by newest first, false for oldest first
	Newestfirst *bool `json:"newestfirst,omitempty"`
	// offset the result set by a given amount
	Offset *int32 `json:"offset,omitempty"`
	// the user id who received the message, 0 for current user
	Useridto int32 `json:"useridto"`
}

type _MessagePopupGetPopupNotificationsRequest MessagePopupGetPopupNotificationsRequest

// NewMessagePopupGetPopupNotificationsRequest instantiates a new MessagePopupGetPopupNotificationsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagePopupGetPopupNotificationsRequest(useridto int32) *MessagePopupGetPopupNotificationsRequest {
	this := MessagePopupGetPopupNotificationsRequest{}
	var limit int32 = 0
	this.Limit = &limit
	var newestfirst bool = true
	this.Newestfirst = &newestfirst
	var offset int32 = 0
	this.Offset = &offset
	this.Useridto = useridto
	return &this
}

// NewMessagePopupGetPopupNotificationsRequestWithDefaults instantiates a new MessagePopupGetPopupNotificationsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagePopupGetPopupNotificationsRequestWithDefaults() *MessagePopupGetPopupNotificationsRequest {
	this := MessagePopupGetPopupNotificationsRequest{}
	var limit int32 = 0
	this.Limit = &limit
	var newestfirst bool = true
	this.Newestfirst = &newestfirst
	var offset int32 = 0
	this.Offset = &offset
	var useridto int32 = null
	this.Useridto = useridto
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *MessagePopupGetPopupNotificationsRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePopupGetPopupNotificationsRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *MessagePopupGetPopupNotificationsRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *MessagePopupGetPopupNotificationsRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetNewestfirst returns the Newestfirst field value if set, zero value otherwise.
func (o *MessagePopupGetPopupNotificationsRequest) GetNewestfirst() bool {
	if o == nil || IsNil(o.Newestfirst) {
		var ret bool
		return ret
	}
	return *o.Newestfirst
}

// GetNewestfirstOk returns a tuple with the Newestfirst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePopupGetPopupNotificationsRequest) GetNewestfirstOk() (*bool, bool) {
	if o == nil || IsNil(o.Newestfirst) {
		return nil, false
	}
	return o.Newestfirst, true
}

// HasNewestfirst returns a boolean if a field has been set.
func (o *MessagePopupGetPopupNotificationsRequest) HasNewestfirst() bool {
	if o != nil && !IsNil(o.Newestfirst) {
		return true
	}

	return false
}

// SetNewestfirst gets a reference to the given bool and assigns it to the Newestfirst field.
func (o *MessagePopupGetPopupNotificationsRequest) SetNewestfirst(v bool) {
	o.Newestfirst = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *MessagePopupGetPopupNotificationsRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePopupGetPopupNotificationsRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *MessagePopupGetPopupNotificationsRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *MessagePopupGetPopupNotificationsRequest) SetOffset(v int32) {
	o.Offset = &v
}

// GetUseridto returns the Useridto field value
func (o *MessagePopupGetPopupNotificationsRequest) GetUseridto() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Useridto
}

// GetUseridtoOk returns a tuple with the Useridto field value
// and a boolean to check if the value has been set.
func (o *MessagePopupGetPopupNotificationsRequest) GetUseridtoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Useridto, true
}

// SetUseridto sets field value
func (o *MessagePopupGetPopupNotificationsRequest) SetUseridto(v int32) {
	o.Useridto = v
}

func (o MessagePopupGetPopupNotificationsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagePopupGetPopupNotificationsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Newestfirst) {
		toSerialize["newestfirst"] = o.Newestfirst
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	toSerialize["useridto"] = o.Useridto
	return toSerialize, nil
}

func (o *MessagePopupGetPopupNotificationsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"useridto",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessagePopupGetPopupNotificationsRequest := _MessagePopupGetPopupNotificationsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessagePopupGetPopupNotificationsRequest)

	if err != nil {
		return err
	}

	*o = MessagePopupGetPopupNotificationsRequest(varMessagePopupGetPopupNotificationsRequest)

	return err
}

type NullableMessagePopupGetPopupNotificationsRequest struct {
	value *MessagePopupGetPopupNotificationsRequest
	isSet bool
}

func (v NullableMessagePopupGetPopupNotificationsRequest) Get() *MessagePopupGetPopupNotificationsRequest {
	return v.value
}

func (v *NullableMessagePopupGetPopupNotificationsRequest) Set(val *MessagePopupGetPopupNotificationsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagePopupGetPopupNotificationsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagePopupGetPopupNotificationsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagePopupGetPopupNotificationsRequest(val *MessagePopupGetPopupNotificationsRequest) *NullableMessagePopupGetPopupNotificationsRequest {
	return &NullableMessagePopupGetPopupNotificationsRequest{value: val, isSet: true}
}

func (v NullableMessagePopupGetPopupNotificationsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagePopupGetPopupNotificationsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


