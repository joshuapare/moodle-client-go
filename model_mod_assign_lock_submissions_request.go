/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModAssignLockSubmissionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModAssignLockSubmissionsRequest{}

// ModAssignLockSubmissionsRequest struct for ModAssignLockSubmissionsRequest
type ModAssignLockSubmissionsRequest struct {
	// The assignment id to operate on
	Assignmentid int32 `json:"assignmentid"`
	Userids []map[string]interface{} `json:"userids"`
}

type _ModAssignLockSubmissionsRequest ModAssignLockSubmissionsRequest

// NewModAssignLockSubmissionsRequest instantiates a new ModAssignLockSubmissionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModAssignLockSubmissionsRequest(assignmentid int32, userids []map[string]interface{}) *ModAssignLockSubmissionsRequest {
	this := ModAssignLockSubmissionsRequest{}
	this.Assignmentid = assignmentid
	this.Userids = userids
	return &this
}

// NewModAssignLockSubmissionsRequestWithDefaults instantiates a new ModAssignLockSubmissionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModAssignLockSubmissionsRequestWithDefaults() *ModAssignLockSubmissionsRequest {
	this := ModAssignLockSubmissionsRequest{}
	return &this
}

// GetAssignmentid returns the Assignmentid field value
func (o *ModAssignLockSubmissionsRequest) GetAssignmentid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Assignmentid
}

// GetAssignmentidOk returns a tuple with the Assignmentid field value
// and a boolean to check if the value has been set.
func (o *ModAssignLockSubmissionsRequest) GetAssignmentidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assignmentid, true
}

// SetAssignmentid sets field value
func (o *ModAssignLockSubmissionsRequest) SetAssignmentid(v int32) {
	o.Assignmentid = v
}

// GetUserids returns the Userids field value
func (o *ModAssignLockSubmissionsRequest) GetUserids() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Userids
}

// GetUseridsOk returns a tuple with the Userids field value
// and a boolean to check if the value has been set.
func (o *ModAssignLockSubmissionsRequest) GetUseridsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Userids, true
}

// SetUserids sets field value
func (o *ModAssignLockSubmissionsRequest) SetUserids(v []map[string]interface{}) {
	o.Userids = v
}

func (o ModAssignLockSubmissionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModAssignLockSubmissionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignmentid"] = o.Assignmentid
	toSerialize["userids"] = o.Userids
	return toSerialize, nil
}

func (o *ModAssignLockSubmissionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assignmentid",
		"userids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModAssignLockSubmissionsRequest := _ModAssignLockSubmissionsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModAssignLockSubmissionsRequest)

	if err != nil {
		return err
	}

	*o = ModAssignLockSubmissionsRequest(varModAssignLockSubmissionsRequest)

	return err
}

type NullableModAssignLockSubmissionsRequest struct {
	value *ModAssignLockSubmissionsRequest
	isSet bool
}

func (v NullableModAssignLockSubmissionsRequest) Get() *ModAssignLockSubmissionsRequest {
	return v.value
}

func (v *NullableModAssignLockSubmissionsRequest) Set(val *ModAssignLockSubmissionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModAssignLockSubmissionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModAssignLockSubmissionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModAssignLockSubmissionsRequest(val *ModAssignLockSubmissionsRequest) *NullableModAssignLockSubmissionsRequest {
	return &NullableModAssignLockSubmissionsRequest{value: val, isSet: true}
}

func (v NullableModAssignLockSubmissionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModAssignLockSubmissionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


