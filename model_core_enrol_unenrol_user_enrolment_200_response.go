/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreEnrolUnenrolUserEnrolment200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreEnrolUnenrolUserEnrolment200Response{}

// CoreEnrolUnenrolUserEnrolment200Response struct for CoreEnrolUnenrolUserEnrolment200Response
type CoreEnrolUnenrolUserEnrolment200Response struct {
	Errors []CoreEnrolUnenrolUserEnrolment200ResponseErrorsInner `json:"errors"`
	// True if the user's enrolment was successfully updated
	Result bool `json:"result"`
}

type _CoreEnrolUnenrolUserEnrolment200Response CoreEnrolUnenrolUserEnrolment200Response

// NewCoreEnrolUnenrolUserEnrolment200Response instantiates a new CoreEnrolUnenrolUserEnrolment200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreEnrolUnenrolUserEnrolment200Response(errors []CoreEnrolUnenrolUserEnrolment200ResponseErrorsInner, result bool) *CoreEnrolUnenrolUserEnrolment200Response {
	this := CoreEnrolUnenrolUserEnrolment200Response{}
	this.Errors = errors
	this.Result = result
	return &this
}

// NewCoreEnrolUnenrolUserEnrolment200ResponseWithDefaults instantiates a new CoreEnrolUnenrolUserEnrolment200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreEnrolUnenrolUserEnrolment200ResponseWithDefaults() *CoreEnrolUnenrolUserEnrolment200Response {
	this := CoreEnrolUnenrolUserEnrolment200Response{}
	return &this
}

// GetErrors returns the Errors field value
func (o *CoreEnrolUnenrolUserEnrolment200Response) GetErrors() []CoreEnrolUnenrolUserEnrolment200ResponseErrorsInner {
	if o == nil {
		var ret []CoreEnrolUnenrolUserEnrolment200ResponseErrorsInner
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolUnenrolUserEnrolment200Response) GetErrorsOk() ([]CoreEnrolUnenrolUserEnrolment200ResponseErrorsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *CoreEnrolUnenrolUserEnrolment200Response) SetErrors(v []CoreEnrolUnenrolUserEnrolment200ResponseErrorsInner) {
	o.Errors = v
}

// GetResult returns the Result field value
func (o *CoreEnrolUnenrolUserEnrolment200Response) GetResult() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *CoreEnrolUnenrolUserEnrolment200Response) GetResultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *CoreEnrolUnenrolUserEnrolment200Response) SetResult(v bool) {
	o.Result = v
}

func (o CoreEnrolUnenrolUserEnrolment200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreEnrolUnenrolUserEnrolment200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errors"] = o.Errors
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

func (o *CoreEnrolUnenrolUserEnrolment200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errors",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreEnrolUnenrolUserEnrolment200Response := _CoreEnrolUnenrolUserEnrolment200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreEnrolUnenrolUserEnrolment200Response)

	if err != nil {
		return err
	}

	*o = CoreEnrolUnenrolUserEnrolment200Response(varCoreEnrolUnenrolUserEnrolment200Response)

	return err
}

type NullableCoreEnrolUnenrolUserEnrolment200Response struct {
	value *CoreEnrolUnenrolUserEnrolment200Response
	isSet bool
}

func (v NullableCoreEnrolUnenrolUserEnrolment200Response) Get() *CoreEnrolUnenrolUserEnrolment200Response {
	return v.value
}

func (v *NullableCoreEnrolUnenrolUserEnrolment200Response) Set(val *CoreEnrolUnenrolUserEnrolment200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreEnrolUnenrolUserEnrolment200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreEnrolUnenrolUserEnrolment200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreEnrolUnenrolUserEnrolment200Response(val *CoreEnrolUnenrolUserEnrolment200Response) *NullableCoreEnrolUnenrolUserEnrolment200Response {
	return &NullableCoreEnrolUnenrolUserEnrolment200Response{value: val, isSet: true}
}

func (v NullableCoreEnrolUnenrolUserEnrolment200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreEnrolUnenrolUserEnrolment200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


