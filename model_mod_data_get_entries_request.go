/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModDataGetEntriesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModDataGetEntriesRequest{}

// ModDataGetEntriesRequest struct for ModDataGetEntriesRequest
type ModDataGetEntriesRequest struct {
	// data instance id
	Databaseid int32 `json:"databaseid"`
	// Group id, 0 means that the function will determine the user group
	Groupid *int32 `json:"groupid,omitempty"`
	// The direction of the sorting: 'ASC' or 'DESC'.                                                 Empty for using the default database setting.
	Order *string `json:"order,omitempty"`
	// The page of records to return.
	Page *int32 `json:"page,omitempty"`
	// The number of records to return per page
	Perpage *int32 `json:"perpage,omitempty"`
	// Whether to return contents or not. This will return each entry                                                         raw contents and the complete list view (using the template).
	Returncontents *bool `json:"returncontents,omitempty"`
	// Sort the records by this field id, reserved ids are:                                                 0: timeadded                                                 -1: firstname                                                 -2: lastname                                                 -3: approved                                                 -4: timemodified.                                                 Empty for using the default database setting.
	Sort *int32 `json:"sort,omitempty"`
}

type _ModDataGetEntriesRequest ModDataGetEntriesRequest

// NewModDataGetEntriesRequest instantiates a new ModDataGetEntriesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModDataGetEntriesRequest(databaseid int32) *ModDataGetEntriesRequest {
	this := ModDataGetEntriesRequest{}
	this.Databaseid = databaseid
	var groupid int32 = 0
	this.Groupid = &groupid
	var order string = "null"
	this.Order = &order
	var page int32 = 0
	this.Page = &page
	var perpage int32 = 0
	this.Perpage = &perpage
	var returncontents bool = false
	this.Returncontents = &returncontents
	var sort int32 = null
	this.Sort = &sort
	return &this
}

// NewModDataGetEntriesRequestWithDefaults instantiates a new ModDataGetEntriesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModDataGetEntriesRequestWithDefaults() *ModDataGetEntriesRequest {
	this := ModDataGetEntriesRequest{}
	var groupid int32 = 0
	this.Groupid = &groupid
	var order string = "null"
	this.Order = &order
	var page int32 = 0
	this.Page = &page
	var perpage int32 = 0
	this.Perpage = &perpage
	var returncontents bool = false
	this.Returncontents = &returncontents
	var sort int32 = null
	this.Sort = &sort
	return &this
}

// GetDatabaseid returns the Databaseid field value
func (o *ModDataGetEntriesRequest) GetDatabaseid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Databaseid
}

// GetDatabaseidOk returns a tuple with the Databaseid field value
// and a boolean to check if the value has been set.
func (o *ModDataGetEntriesRequest) GetDatabaseidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Databaseid, true
}

// SetDatabaseid sets field value
func (o *ModDataGetEntriesRequest) SetDatabaseid(v int32) {
	o.Databaseid = v
}

// GetGroupid returns the Groupid field value if set, zero value otherwise.
func (o *ModDataGetEntriesRequest) GetGroupid() int32 {
	if o == nil || IsNil(o.Groupid) {
		var ret int32
		return ret
	}
	return *o.Groupid
}

// GetGroupidOk returns a tuple with the Groupid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataGetEntriesRequest) GetGroupidOk() (*int32, bool) {
	if o == nil || IsNil(o.Groupid) {
		return nil, false
	}
	return o.Groupid, true
}

// HasGroupid returns a boolean if a field has been set.
func (o *ModDataGetEntriesRequest) HasGroupid() bool {
	if o != nil && !IsNil(o.Groupid) {
		return true
	}

	return false
}

// SetGroupid gets a reference to the given int32 and assigns it to the Groupid field.
func (o *ModDataGetEntriesRequest) SetGroupid(v int32) {
	o.Groupid = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ModDataGetEntriesRequest) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataGetEntriesRequest) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ModDataGetEntriesRequest) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *ModDataGetEntriesRequest) SetOrder(v string) {
	o.Order = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ModDataGetEntriesRequest) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataGetEntriesRequest) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ModDataGetEntriesRequest) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *ModDataGetEntriesRequest) SetPage(v int32) {
	o.Page = &v
}

// GetPerpage returns the Perpage field value if set, zero value otherwise.
func (o *ModDataGetEntriesRequest) GetPerpage() int32 {
	if o == nil || IsNil(o.Perpage) {
		var ret int32
		return ret
	}
	return *o.Perpage
}

// GetPerpageOk returns a tuple with the Perpage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataGetEntriesRequest) GetPerpageOk() (*int32, bool) {
	if o == nil || IsNil(o.Perpage) {
		return nil, false
	}
	return o.Perpage, true
}

// HasPerpage returns a boolean if a field has been set.
func (o *ModDataGetEntriesRequest) HasPerpage() bool {
	if o != nil && !IsNil(o.Perpage) {
		return true
	}

	return false
}

// SetPerpage gets a reference to the given int32 and assigns it to the Perpage field.
func (o *ModDataGetEntriesRequest) SetPerpage(v int32) {
	o.Perpage = &v
}

// GetReturncontents returns the Returncontents field value if set, zero value otherwise.
func (o *ModDataGetEntriesRequest) GetReturncontents() bool {
	if o == nil || IsNil(o.Returncontents) {
		var ret bool
		return ret
	}
	return *o.Returncontents
}

// GetReturncontentsOk returns a tuple with the Returncontents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataGetEntriesRequest) GetReturncontentsOk() (*bool, bool) {
	if o == nil || IsNil(o.Returncontents) {
		return nil, false
	}
	return o.Returncontents, true
}

// HasReturncontents returns a boolean if a field has been set.
func (o *ModDataGetEntriesRequest) HasReturncontents() bool {
	if o != nil && !IsNil(o.Returncontents) {
		return true
	}

	return false
}

// SetReturncontents gets a reference to the given bool and assigns it to the Returncontents field.
func (o *ModDataGetEntriesRequest) SetReturncontents(v bool) {
	o.Returncontents = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *ModDataGetEntriesRequest) GetSort() int32 {
	if o == nil || IsNil(o.Sort) {
		var ret int32
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModDataGetEntriesRequest) GetSortOk() (*int32, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *ModDataGetEntriesRequest) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given int32 and assigns it to the Sort field.
func (o *ModDataGetEntriesRequest) SetSort(v int32) {
	o.Sort = &v
}

func (o ModDataGetEntriesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModDataGetEntriesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["databaseid"] = o.Databaseid
	if !IsNil(o.Groupid) {
		toSerialize["groupid"] = o.Groupid
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Perpage) {
		toSerialize["perpage"] = o.Perpage
	}
	if !IsNil(o.Returncontents) {
		toSerialize["returncontents"] = o.Returncontents
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	return toSerialize, nil
}

func (o *ModDataGetEntriesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"databaseid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModDataGetEntriesRequest := _ModDataGetEntriesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModDataGetEntriesRequest)

	if err != nil {
		return err
	}

	*o = ModDataGetEntriesRequest(varModDataGetEntriesRequest)

	return err
}

type NullableModDataGetEntriesRequest struct {
	value *ModDataGetEntriesRequest
	isSet bool
}

func (v NullableModDataGetEntriesRequest) Get() *ModDataGetEntriesRequest {
	return v.value
}

func (v *NullableModDataGetEntriesRequest) Set(val *ModDataGetEntriesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModDataGetEntriesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModDataGetEntriesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModDataGetEntriesRequest(val *ModDataGetEntriesRequest) *NullableModDataGetEntriesRequest {
	return &NullableModDataGetEntriesRequest{value: val, isSet: true}
}

func (v NullableModDataGetEntriesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModDataGetEntriesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


