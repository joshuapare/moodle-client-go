/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
)

// checks if the CoreSearchViewResultsRequestFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreSearchViewResultsRequestFilters{}

// CoreSearchViewResultsRequestFilters struct for CoreSearchViewResultsRequestFilters
type CoreSearchViewResultsRequestFilters struct {
	Areaids []map[string]interface{} `json:"areaids,omitempty"`
	Courseids []map[string]interface{} `json:"courseids,omitempty"`
	// docs modified before this date
	Timeend *int32 `json:"timeend,omitempty"`
	// docs modified after this date
	Timestart *int32 `json:"timestart,omitempty"`
	// result title
	Title *string `json:"title,omitempty"`
}

// NewCoreSearchViewResultsRequestFilters instantiates a new CoreSearchViewResultsRequestFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreSearchViewResultsRequestFilters() *CoreSearchViewResultsRequestFilters {
	this := CoreSearchViewResultsRequestFilters{}
	var timeend int32 = 0
	this.Timeend = &timeend
	var timestart int32 = 0
	this.Timestart = &timestart
	return &this
}

// NewCoreSearchViewResultsRequestFiltersWithDefaults instantiates a new CoreSearchViewResultsRequestFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreSearchViewResultsRequestFiltersWithDefaults() *CoreSearchViewResultsRequestFilters {
	this := CoreSearchViewResultsRequestFilters{}
	var timeend int32 = 0
	this.Timeend = &timeend
	var timestart int32 = 0
	this.Timestart = &timestart
	return &this
}

// GetAreaids returns the Areaids field value if set, zero value otherwise.
func (o *CoreSearchViewResultsRequestFilters) GetAreaids() []map[string]interface{} {
	if o == nil || IsNil(o.Areaids) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Areaids
}

// GetAreaidsOk returns a tuple with the Areaids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchViewResultsRequestFilters) GetAreaidsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Areaids) {
		return nil, false
	}
	return o.Areaids, true
}

// HasAreaids returns a boolean if a field has been set.
func (o *CoreSearchViewResultsRequestFilters) HasAreaids() bool {
	if o != nil && !IsNil(o.Areaids) {
		return true
	}

	return false
}

// SetAreaids gets a reference to the given []map[string]interface{} and assigns it to the Areaids field.
func (o *CoreSearchViewResultsRequestFilters) SetAreaids(v []map[string]interface{}) {
	o.Areaids = v
}

// GetCourseids returns the Courseids field value if set, zero value otherwise.
func (o *CoreSearchViewResultsRequestFilters) GetCourseids() []map[string]interface{} {
	if o == nil || IsNil(o.Courseids) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Courseids
}

// GetCourseidsOk returns a tuple with the Courseids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchViewResultsRequestFilters) GetCourseidsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Courseids) {
		return nil, false
	}
	return o.Courseids, true
}

// HasCourseids returns a boolean if a field has been set.
func (o *CoreSearchViewResultsRequestFilters) HasCourseids() bool {
	if o != nil && !IsNil(o.Courseids) {
		return true
	}

	return false
}

// SetCourseids gets a reference to the given []map[string]interface{} and assigns it to the Courseids field.
func (o *CoreSearchViewResultsRequestFilters) SetCourseids(v []map[string]interface{}) {
	o.Courseids = v
}

// GetTimeend returns the Timeend field value if set, zero value otherwise.
func (o *CoreSearchViewResultsRequestFilters) GetTimeend() int32 {
	if o == nil || IsNil(o.Timeend) {
		var ret int32
		return ret
	}
	return *o.Timeend
}

// GetTimeendOk returns a tuple with the Timeend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchViewResultsRequestFilters) GetTimeendOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeend) {
		return nil, false
	}
	return o.Timeend, true
}

// HasTimeend returns a boolean if a field has been set.
func (o *CoreSearchViewResultsRequestFilters) HasTimeend() bool {
	if o != nil && !IsNil(o.Timeend) {
		return true
	}

	return false
}

// SetTimeend gets a reference to the given int32 and assigns it to the Timeend field.
func (o *CoreSearchViewResultsRequestFilters) SetTimeend(v int32) {
	o.Timeend = &v
}

// GetTimestart returns the Timestart field value if set, zero value otherwise.
func (o *CoreSearchViewResultsRequestFilters) GetTimestart() int32 {
	if o == nil || IsNil(o.Timestart) {
		var ret int32
		return ret
	}
	return *o.Timestart
}

// GetTimestartOk returns a tuple with the Timestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchViewResultsRequestFilters) GetTimestartOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestart) {
		return nil, false
	}
	return o.Timestart, true
}

// HasTimestart returns a boolean if a field has been set.
func (o *CoreSearchViewResultsRequestFilters) HasTimestart() bool {
	if o != nil && !IsNil(o.Timestart) {
		return true
	}

	return false
}

// SetTimestart gets a reference to the given int32 and assigns it to the Timestart field.
func (o *CoreSearchViewResultsRequestFilters) SetTimestart(v int32) {
	o.Timestart = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CoreSearchViewResultsRequestFilters) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSearchViewResultsRequestFilters) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CoreSearchViewResultsRequestFilters) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CoreSearchViewResultsRequestFilters) SetTitle(v string) {
	o.Title = &v
}

func (o CoreSearchViewResultsRequestFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreSearchViewResultsRequestFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Areaids) {
		toSerialize["areaids"] = o.Areaids
	}
	if !IsNil(o.Courseids) {
		toSerialize["courseids"] = o.Courseids
	}
	if !IsNil(o.Timeend) {
		toSerialize["timeend"] = o.Timeend
	}
	if !IsNil(o.Timestart) {
		toSerialize["timestart"] = o.Timestart
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableCoreSearchViewResultsRequestFilters struct {
	value *CoreSearchViewResultsRequestFilters
	isSet bool
}

func (v NullableCoreSearchViewResultsRequestFilters) Get() *CoreSearchViewResultsRequestFilters {
	return v.value
}

func (v *NullableCoreSearchViewResultsRequestFilters) Set(val *CoreSearchViewResultsRequestFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreSearchViewResultsRequestFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreSearchViewResultsRequestFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreSearchViewResultsRequestFilters(val *CoreSearchViewResultsRequestFilters) *NullableCoreSearchViewResultsRequestFilters {
	return &NullableCoreSearchViewResultsRequestFilters{value: val, isSet: true}
}

func (v NullableCoreSearchViewResultsRequestFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreSearchViewResultsRequestFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


