/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModChoiceSubmitChoiceResponseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModChoiceSubmitChoiceResponseRequest{}

// ModChoiceSubmitChoiceResponseRequest struct for ModChoiceSubmitChoiceResponseRequest
type ModChoiceSubmitChoiceResponseRequest struct {
	// choice instance id
	Choiceid int32 `json:"choiceid"`
	Responses []map[string]interface{} `json:"responses"`
}

type _ModChoiceSubmitChoiceResponseRequest ModChoiceSubmitChoiceResponseRequest

// NewModChoiceSubmitChoiceResponseRequest instantiates a new ModChoiceSubmitChoiceResponseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModChoiceSubmitChoiceResponseRequest(choiceid int32, responses []map[string]interface{}) *ModChoiceSubmitChoiceResponseRequest {
	this := ModChoiceSubmitChoiceResponseRequest{}
	this.Choiceid = choiceid
	this.Responses = responses
	return &this
}

// NewModChoiceSubmitChoiceResponseRequestWithDefaults instantiates a new ModChoiceSubmitChoiceResponseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModChoiceSubmitChoiceResponseRequestWithDefaults() *ModChoiceSubmitChoiceResponseRequest {
	this := ModChoiceSubmitChoiceResponseRequest{}
	return &this
}

// GetChoiceid returns the Choiceid field value
func (o *ModChoiceSubmitChoiceResponseRequest) GetChoiceid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Choiceid
}

// GetChoiceidOk returns a tuple with the Choiceid field value
// and a boolean to check if the value has been set.
func (o *ModChoiceSubmitChoiceResponseRequest) GetChoiceidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Choiceid, true
}

// SetChoiceid sets field value
func (o *ModChoiceSubmitChoiceResponseRequest) SetChoiceid(v int32) {
	o.Choiceid = v
}

// GetResponses returns the Responses field value
func (o *ModChoiceSubmitChoiceResponseRequest) GetResponses() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value
// and a boolean to check if the value has been set.
func (o *ModChoiceSubmitChoiceResponseRequest) GetResponsesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Responses, true
}

// SetResponses sets field value
func (o *ModChoiceSubmitChoiceResponseRequest) SetResponses(v []map[string]interface{}) {
	o.Responses = v
}

func (o ModChoiceSubmitChoiceResponseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModChoiceSubmitChoiceResponseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["choiceid"] = o.Choiceid
	toSerialize["responses"] = o.Responses
	return toSerialize, nil
}

func (o *ModChoiceSubmitChoiceResponseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"choiceid",
		"responses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModChoiceSubmitChoiceResponseRequest := _ModChoiceSubmitChoiceResponseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModChoiceSubmitChoiceResponseRequest)

	if err != nil {
		return err
	}

	*o = ModChoiceSubmitChoiceResponseRequest(varModChoiceSubmitChoiceResponseRequest)

	return err
}

type NullableModChoiceSubmitChoiceResponseRequest struct {
	value *ModChoiceSubmitChoiceResponseRequest
	isSet bool
}

func (v NullableModChoiceSubmitChoiceResponseRequest) Get() *ModChoiceSubmitChoiceResponseRequest {
	return v.value
}

func (v *NullableModChoiceSubmitChoiceResponseRequest) Set(val *ModChoiceSubmitChoiceResponseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModChoiceSubmitChoiceResponseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModChoiceSubmitChoiceResponseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModChoiceSubmitChoiceResponseRequest(val *ModChoiceSubmitChoiceResponseRequest) *NullableModChoiceSubmitChoiceResponseRequest {
	return &NullableModChoiceSubmitChoiceResponseRequest{value: val, isSet: true}
}

func (v NullableModChoiceSubmitChoiceResponseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModChoiceSubmitChoiceResponseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


