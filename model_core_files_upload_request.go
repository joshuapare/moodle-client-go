/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreFilesUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreFilesUploadRequest{}

// CoreFilesUploadRequest struct for CoreFilesUploadRequest
type CoreFilesUploadRequest struct {
	// component
	Component string `json:"component"`
	// context id
	Contextid *int32 `json:"contextid,omitempty"`
	// The context level to put the file in,                         (block, course, coursecat, system, user, module)
	Contextlevel *string `json:"contextlevel,omitempty"`
	// file area
	Filearea string `json:"filearea"`
	// file content
	Filecontent string `json:"filecontent"`
	// file name
	Filename string `json:"filename"`
	// file path
	Filepath string `json:"filepath"`
	// The Instance id of item associated                          with the context level
	Instanceid *int32 `json:"instanceid,omitempty"`
	// associated id
	Itemid int32 `json:"itemid"`
}

type _CoreFilesUploadRequest CoreFilesUploadRequest

// NewCoreFilesUploadRequest instantiates a new CoreFilesUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreFilesUploadRequest(component string, filearea string, filecontent string, filename string, filepath string, itemid int32) *CoreFilesUploadRequest {
	this := CoreFilesUploadRequest{}
	this.Component = component
	var contextid int32 = null
	this.Contextid = &contextid
	var contextlevel string = "null"
	this.Contextlevel = &contextlevel
	this.Filearea = filearea
	this.Filecontent = filecontent
	this.Filename = filename
	this.Filepath = filepath
	var instanceid int32 = null
	this.Instanceid = &instanceid
	this.Itemid = itemid
	return &this
}

// NewCoreFilesUploadRequestWithDefaults instantiates a new CoreFilesUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreFilesUploadRequestWithDefaults() *CoreFilesUploadRequest {
	this := CoreFilesUploadRequest{}
	var contextid int32 = null
	this.Contextid = &contextid
	var contextlevel string = "null"
	this.Contextlevel = &contextlevel
	var filecontent string = "null"
	this.Filecontent = filecontent
	var instanceid int32 = null
	this.Instanceid = &instanceid
	return &this
}

// GetComponent returns the Component field value
func (o *CoreFilesUploadRequest) GetComponent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *CoreFilesUploadRequest) SetComponent(v string) {
	o.Component = v
}

// GetContextid returns the Contextid field value if set, zero value otherwise.
func (o *CoreFilesUploadRequest) GetContextid() int32 {
	if o == nil || IsNil(o.Contextid) {
		var ret int32
		return ret
	}
	return *o.Contextid
}

// GetContextidOk returns a tuple with the Contextid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetContextidOk() (*int32, bool) {
	if o == nil || IsNil(o.Contextid) {
		return nil, false
	}
	return o.Contextid, true
}

// HasContextid returns a boolean if a field has been set.
func (o *CoreFilesUploadRequest) HasContextid() bool {
	if o != nil && !IsNil(o.Contextid) {
		return true
	}

	return false
}

// SetContextid gets a reference to the given int32 and assigns it to the Contextid field.
func (o *CoreFilesUploadRequest) SetContextid(v int32) {
	o.Contextid = &v
}

// GetContextlevel returns the Contextlevel field value if set, zero value otherwise.
func (o *CoreFilesUploadRequest) GetContextlevel() string {
	if o == nil || IsNil(o.Contextlevel) {
		var ret string
		return ret
	}
	return *o.Contextlevel
}

// GetContextlevelOk returns a tuple with the Contextlevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetContextlevelOk() (*string, bool) {
	if o == nil || IsNil(o.Contextlevel) {
		return nil, false
	}
	return o.Contextlevel, true
}

// HasContextlevel returns a boolean if a field has been set.
func (o *CoreFilesUploadRequest) HasContextlevel() bool {
	if o != nil && !IsNil(o.Contextlevel) {
		return true
	}

	return false
}

// SetContextlevel gets a reference to the given string and assigns it to the Contextlevel field.
func (o *CoreFilesUploadRequest) SetContextlevel(v string) {
	o.Contextlevel = &v
}

// GetFilearea returns the Filearea field value
func (o *CoreFilesUploadRequest) GetFilearea() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filearea
}

// GetFileareaOk returns a tuple with the Filearea field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetFileareaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filearea, true
}

// SetFilearea sets field value
func (o *CoreFilesUploadRequest) SetFilearea(v string) {
	o.Filearea = v
}

// GetFilecontent returns the Filecontent field value
func (o *CoreFilesUploadRequest) GetFilecontent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filecontent
}

// GetFilecontentOk returns a tuple with the Filecontent field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetFilecontentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filecontent, true
}

// SetFilecontent sets field value
func (o *CoreFilesUploadRequest) SetFilecontent(v string) {
	o.Filecontent = v
}

// GetFilename returns the Filename field value
func (o *CoreFilesUploadRequest) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *CoreFilesUploadRequest) SetFilename(v string) {
	o.Filename = v
}

// GetFilepath returns the Filepath field value
func (o *CoreFilesUploadRequest) GetFilepath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filepath
}

// GetFilepathOk returns a tuple with the Filepath field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetFilepathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filepath, true
}

// SetFilepath sets field value
func (o *CoreFilesUploadRequest) SetFilepath(v string) {
	o.Filepath = v
}

// GetInstanceid returns the Instanceid field value if set, zero value otherwise.
func (o *CoreFilesUploadRequest) GetInstanceid() int32 {
	if o == nil || IsNil(o.Instanceid) {
		var ret int32
		return ret
	}
	return *o.Instanceid
}

// GetInstanceidOk returns a tuple with the Instanceid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetInstanceidOk() (*int32, bool) {
	if o == nil || IsNil(o.Instanceid) {
		return nil, false
	}
	return o.Instanceid, true
}

// HasInstanceid returns a boolean if a field has been set.
func (o *CoreFilesUploadRequest) HasInstanceid() bool {
	if o != nil && !IsNil(o.Instanceid) {
		return true
	}

	return false
}

// SetInstanceid gets a reference to the given int32 and assigns it to the Instanceid field.
func (o *CoreFilesUploadRequest) SetInstanceid(v int32) {
	o.Instanceid = &v
}

// GetItemid returns the Itemid field value
func (o *CoreFilesUploadRequest) GetItemid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Itemid
}

// GetItemidOk returns a tuple with the Itemid field value
// and a boolean to check if the value has been set.
func (o *CoreFilesUploadRequest) GetItemidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Itemid, true
}

// SetItemid sets field value
func (o *CoreFilesUploadRequest) SetItemid(v int32) {
	o.Itemid = v
}

func (o CoreFilesUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreFilesUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["component"] = o.Component
	if !IsNil(o.Contextid) {
		toSerialize["contextid"] = o.Contextid
	}
	if !IsNil(o.Contextlevel) {
		toSerialize["contextlevel"] = o.Contextlevel
	}
	toSerialize["filearea"] = o.Filearea
	toSerialize["filecontent"] = o.Filecontent
	toSerialize["filename"] = o.Filename
	toSerialize["filepath"] = o.Filepath
	if !IsNil(o.Instanceid) {
		toSerialize["instanceid"] = o.Instanceid
	}
	toSerialize["itemid"] = o.Itemid
	return toSerialize, nil
}

func (o *CoreFilesUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"component",
		"filearea",
		"filecontent",
		"filename",
		"filepath",
		"itemid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreFilesUploadRequest := _CoreFilesUploadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreFilesUploadRequest)

	if err != nil {
		return err
	}

	*o = CoreFilesUploadRequest(varCoreFilesUploadRequest)

	return err
}

type NullableCoreFilesUploadRequest struct {
	value *CoreFilesUploadRequest
	isSet bool
}

func (v NullableCoreFilesUploadRequest) Get() *CoreFilesUploadRequest {
	return v.value
}

func (v *NullableCoreFilesUploadRequest) Set(val *CoreFilesUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreFilesUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreFilesUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreFilesUploadRequest(val *CoreFilesUploadRequest) *NullableCoreFilesUploadRequest {
	return &NullableCoreFilesUploadRequest{value: val, isSet: true}
}

func (v NullableCoreFilesUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreFilesUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


