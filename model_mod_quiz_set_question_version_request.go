/*
Moodle Webservice API

Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

API version: 4.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moodleclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModQuizSetQuestionVersionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModQuizSetQuestionVersionRequest{}

// ModQuizSetQuestionVersionRequest struct for ModQuizSetQuestionVersionRequest
type ModQuizSetQuestionVersionRequest struct {
	Newversion int32 `json:"newversion"`
	Slotid int32 `json:"slotid"`
}

type _ModQuizSetQuestionVersionRequest ModQuizSetQuestionVersionRequest

// NewModQuizSetQuestionVersionRequest instantiates a new ModQuizSetQuestionVersionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModQuizSetQuestionVersionRequest(newversion int32, slotid int32) *ModQuizSetQuestionVersionRequest {
	this := ModQuizSetQuestionVersionRequest{}
	this.Newversion = newversion
	this.Slotid = slotid
	return &this
}

// NewModQuizSetQuestionVersionRequestWithDefaults instantiates a new ModQuizSetQuestionVersionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModQuizSetQuestionVersionRequestWithDefaults() *ModQuizSetQuestionVersionRequest {
	this := ModQuizSetQuestionVersionRequest{}
	return &this
}

// GetNewversion returns the Newversion field value
func (o *ModQuizSetQuestionVersionRequest) GetNewversion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Newversion
}

// GetNewversionOk returns a tuple with the Newversion field value
// and a boolean to check if the value has been set.
func (o *ModQuizSetQuestionVersionRequest) GetNewversionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Newversion, true
}

// SetNewversion sets field value
func (o *ModQuizSetQuestionVersionRequest) SetNewversion(v int32) {
	o.Newversion = v
}

// GetSlotid returns the Slotid field value
func (o *ModQuizSetQuestionVersionRequest) GetSlotid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Slotid
}

// GetSlotidOk returns a tuple with the Slotid field value
// and a boolean to check if the value has been set.
func (o *ModQuizSetQuestionVersionRequest) GetSlotidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slotid, true
}

// SetSlotid sets field value
func (o *ModQuizSetQuestionVersionRequest) SetSlotid(v int32) {
	o.Slotid = v
}

func (o ModQuizSetQuestionVersionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModQuizSetQuestionVersionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["newversion"] = o.Newversion
	toSerialize["slotid"] = o.Slotid
	return toSerialize, nil
}

func (o *ModQuizSetQuestionVersionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"newversion",
		"slotid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModQuizSetQuestionVersionRequest := _ModQuizSetQuestionVersionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModQuizSetQuestionVersionRequest)

	if err != nil {
		return err
	}

	*o = ModQuizSetQuestionVersionRequest(varModQuizSetQuestionVersionRequest)

	return err
}

type NullableModQuizSetQuestionVersionRequest struct {
	value *ModQuizSetQuestionVersionRequest
	isSet bool
}

func (v NullableModQuizSetQuestionVersionRequest) Get() *ModQuizSetQuestionVersionRequest {
	return v.value
}

func (v *NullableModQuizSetQuestionVersionRequest) Set(val *ModQuizSetQuestionVersionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModQuizSetQuestionVersionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModQuizSetQuestionVersionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModQuizSetQuestionVersionRequest(val *ModQuizSetQuestionVersionRequest) *NullableModQuizSetQuestionVersionRequest {
	return &NullableModQuizSetQuestionVersionRequest{value: val, isSet: true}
}

func (v NullableModQuizSetQuestionVersionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModQuizSetQuestionVersionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


